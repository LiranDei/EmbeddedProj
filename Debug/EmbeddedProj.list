
EmbeddedProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  08006e24  08006e24  00016e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800714c  0800714c  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800714c  0800714c  0001714c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007154  08007154  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007154  08007154  00017154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007158  08007158  00017158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800715c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  200001f8  08007354  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  08007354  000204b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f0e  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027b1  00000000  00000000  00033136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  000358e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f48  00000000  00000000  00036938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000289e5  00000000  00000000  00037880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000135be  00000000  00000000  00060265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5d7f  00000000  00000000  00073823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001695a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004edc  00000000  00000000  001695f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006e0c 	.word	0x08006e0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	08006e0c 	.word	0x08006e0c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <initBtnClicks>:

BTN_CLICK* btn;


void initBtnClicks(BTN_CLICK* btnClick, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	4613      	mov	r3, r2
 80005a0:	80fb      	strh	r3, [r7, #6]
	btnClick->GPIOx = GPIOx;
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	68ba      	ldr	r2, [r7, #8]
 80005a6:	601a      	str	r2, [r3, #0]
	btnClick->GPIO_Pin = GPIO_Pin;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	88fa      	ldrh	r2, [r7, #6]
 80005ac:	809a      	strh	r2, [r3, #4]
	btnClick->noiseWait = OFF;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	2200      	movs	r2, #0
 80005b2:	71da      	strb	r2, [r3, #7]
	btnClick->status = WAITING_FIRST_CLICK;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	2200      	movs	r2, #0
 80005b8:	719a      	strb	r2, [r3, #6]
	btnClick->counter = 0;
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	2200      	movs	r2, #0
 80005be:	615a      	str	r2, [r3, #20]
	btnClick->bounceCounter = 0;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	2200      	movs	r2, #0
 80005c4:	611a      	str	r2, [r3, #16]
	btn = btnClick;
 80005c6:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <initBtnClicks+0x44>)
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	6013      	str	r3, [r2, #0]
}
 80005cc:	bf00      	nop
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	20000214 	.word	0x20000214

080005dc <btnOnClickInterrupt>:

void btnOnClickInterrupt(uint16_t GPIO_Pin)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	80fb      	strh	r3, [r7, #6]
	if(!(HAL_GPIO_ReadPin(btn->GPIOx, btn->GPIO_Pin)))
 80005e6:	4b2c      	ldr	r3, [pc, #176]	; (8000698 <btnOnClickInterrupt+0xbc>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	4b2a      	ldr	r3, [pc, #168]	; (8000698 <btnOnClickInterrupt+0xbc>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	889b      	ldrh	r3, [r3, #4]
 80005f2:	4619      	mov	r1, r3
 80005f4:	4610      	mov	r0, r2
 80005f6:	f001 fc7d 	bl	8001ef4 <HAL_GPIO_ReadPin>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d129      	bne.n	8000654 <btnOnClickInterrupt+0x78>
	{
		if(btn->status == WAITING_FIRST_CLICK || btn->status == WAITING_FOR_LONG_PRESS)
 8000600:	4b25      	ldr	r3, [pc, #148]	; (8000698 <btnOnClickInterrupt+0xbc>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	799b      	ldrb	r3, [r3, #6]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d004      	beq.n	8000614 <btnOnClickInterrupt+0x38>
 800060a:	4b23      	ldr	r3, [pc, #140]	; (8000698 <btnOnClickInterrupt+0xbc>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	799b      	ldrb	r3, [r3, #6]
 8000610:	2b03      	cmp	r3, #3
 8000612:	d10e      	bne.n	8000632 <btnOnClickInterrupt+0x56>
		{
			btn->firstClick = HAL_GetTick();
 8000614:	f001 f9a6 	bl	8001964 <HAL_GetTick>
 8000618:	4602      	mov	r2, r0
 800061a:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <btnOnClickInterrupt+0xbc>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	609a      	str	r2, [r3, #8]
			btn->status = WAITING_FOR_RELEASE;
 8000620:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <btnOnClickInterrupt+0xbc>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2201      	movs	r2, #1
 8000626:	719a      	strb	r2, [r3, #6]
			btn->counter = 0;
 8000628:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <btnOnClickInterrupt+0xbc>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2200      	movs	r2, #0
 800062e:	615a      	str	r2, [r3, #20]
			btn->status = WAITING_FIRST_CLICK;
		}

	}

}
 8000630:	e02d      	b.n	800068e <btnOnClickInterrupt+0xb2>
		else if(btn->status == WAITING_FOR_DOUBLE)
 8000632:	4b19      	ldr	r3, [pc, #100]	; (8000698 <btnOnClickInterrupt+0xbc>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	799b      	ldrb	r3, [r3, #6]
 8000638:	2b02      	cmp	r3, #2
 800063a:	d128      	bne.n	800068e <btnOnClickInterrupt+0xb2>
			btn->counter = 0;
 800063c:	4b16      	ldr	r3, [pc, #88]	; (8000698 <btnOnClickInterrupt+0xbc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2200      	movs	r2, #0
 8000642:	615a      	str	r2, [r3, #20]
			printf("was double click\n\r");
 8000644:	4815      	ldr	r0, [pc, #84]	; (800069c <btnOnClickInterrupt+0xc0>)
 8000646:	f005 fa69 	bl	8005b1c <iprintf>
			btn->status = WAITING_FOR_LONG_PRESS;
 800064a:	4b13      	ldr	r3, [pc, #76]	; (8000698 <btnOnClickInterrupt+0xbc>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2203      	movs	r2, #3
 8000650:	719a      	strb	r2, [r3, #6]
}
 8000652:	e01c      	b.n	800068e <btnOnClickInterrupt+0xb2>
		if(btn->status == WAITING_FOR_RELEASE)
 8000654:	4b10      	ldr	r3, [pc, #64]	; (8000698 <btnOnClickInterrupt+0xbc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	799b      	ldrb	r3, [r3, #6]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d10e      	bne.n	800067c <btnOnClickInterrupt+0xa0>
			btn->secondClick = HAL_GetTick();
 800065e:	f001 f981 	bl	8001964 <HAL_GetTick>
 8000662:	4602      	mov	r2, r0
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <btnOnClickInterrupt+0xbc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	60da      	str	r2, [r3, #12]
			btn->counter = 0;
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <btnOnClickInterrupt+0xbc>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2200      	movs	r2, #0
 8000670:	615a      	str	r2, [r3, #20]
			btn->status = WAITING_FOR_DOUBLE;
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <btnOnClickInterrupt+0xbc>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2202      	movs	r2, #2
 8000678:	719a      	strb	r2, [r3, #6]
}
 800067a:	e008      	b.n	800068e <btnOnClickInterrupt+0xb2>
		else if(btn->status == WAITING_FOR_LONG_PRESS)
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <btnOnClickInterrupt+0xbc>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	799b      	ldrb	r3, [r3, #6]
 8000682:	2b03      	cmp	r3, #3
 8000684:	d103      	bne.n	800068e <btnOnClickInterrupt+0xb2>
			btn->status = WAITING_FIRST_CLICK;
 8000686:	4b04      	ldr	r3, [pc, #16]	; (8000698 <btnOnClickInterrupt+0xbc>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2200      	movs	r2, #0
 800068c:	719a      	strb	r2, [r3, #6]
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000214 	.word	0x20000214
 800069c:	08006e24 	.word	0x08006e24

080006a0 <handleClicks>:

void handleClicks()
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	if(btn->noiseWait == ON)
 80006a4:	4b41      	ldr	r3, [pc, #260]	; (80007ac <handleClicks+0x10c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	79db      	ldrb	r3, [r3, #7]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d118      	bne.n	80006e0 <handleClicks+0x40>
	{
		btn->bounceCounter++;
 80006ae:	4b3f      	ldr	r3, [pc, #252]	; (80007ac <handleClicks+0x10c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	691a      	ldr	r2, [r3, #16]
 80006b4:	3201      	adds	r2, #1
 80006b6:	611a      	str	r2, [r3, #16]
		if(btn->bounceCounter >= BOUNCE_TIME_WAIT)
 80006b8:	4b3c      	ldr	r3, [pc, #240]	; (80007ac <handleClicks+0x10c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	691b      	ldr	r3, [r3, #16]
 80006be:	2b13      	cmp	r3, #19
 80006c0:	dd72      	ble.n	80007a8 <handleClicks+0x108>
		{
			btn->noiseWait = OFF;
 80006c2:	4b3a      	ldr	r3, [pc, #232]	; (80007ac <handleClicks+0x10c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2200      	movs	r2, #0
 80006c8:	71da      	strb	r2, [r3, #7]
			btn->bounceCounter = 0;
 80006ca:	4b38      	ldr	r3, [pc, #224]	; (80007ac <handleClicks+0x10c>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
			btnOnClickInterrupt(btn->GPIO_Pin);
 80006d2:	4b36      	ldr	r3, [pc, #216]	; (80007ac <handleClicks+0x10c>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	889b      	ldrh	r3, [r3, #4]
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ff7f 	bl	80005dc <btnOnClickInterrupt>
			}
			break;

		}
	}
}
 80006de:	e063      	b.n	80007a8 <handleClicks+0x108>
		if(btn->status != WAITING_FIRST_CLICK)
 80006e0:	4b32      	ldr	r3, [pc, #200]	; (80007ac <handleClicks+0x10c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	799b      	ldrb	r3, [r3, #6]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d004      	beq.n	80006f4 <handleClicks+0x54>
			btn->counter++;
 80006ea:	4b30      	ldr	r3, [pc, #192]	; (80007ac <handleClicks+0x10c>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	695a      	ldr	r2, [r3, #20]
 80006f0:	3201      	adds	r2, #1
 80006f2:	615a      	str	r2, [r3, #20]
		switch(btn->status)
 80006f4:	4b2d      	ldr	r3, [pc, #180]	; (80007ac <handleClicks+0x10c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	799b      	ldrb	r3, [r3, #6]
 80006fa:	2b03      	cmp	r3, #3
 80006fc:	d040      	beq.n	8000780 <handleClicks+0xe0>
 80006fe:	2b03      	cmp	r3, #3
 8000700:	dc52      	bgt.n	80007a8 <handleClicks+0x108>
 8000702:	2b01      	cmp	r3, #1
 8000704:	d002      	beq.n	800070c <handleClicks+0x6c>
 8000706:	2b02      	cmp	r3, #2
 8000708:	d00b      	beq.n	8000722 <handleClicks+0x82>
}
 800070a:	e04d      	b.n	80007a8 <handleClicks+0x108>
			if(btn->counter > 1000)
 800070c:	4b27      	ldr	r3, [pc, #156]	; (80007ac <handleClicks+0x10c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000716:	dd42      	ble.n	800079e <handleClicks+0xfe>
				btn->status = WAITING_FOR_LONG_PRESS;
 8000718:	4b24      	ldr	r3, [pc, #144]	; (80007ac <handleClicks+0x10c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2203      	movs	r2, #3
 800071e:	719a      	strb	r2, [r3, #6]
			break;
 8000720:	e03d      	b.n	800079e <handleClicks+0xfe>
			if(btn->counter > 200)//wasnt double click
 8000722:	4b22      	ldr	r3, [pc, #136]	; (80007ac <handleClicks+0x10c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	695b      	ldr	r3, [r3, #20]
 8000728:	2bc8      	cmp	r3, #200	; 0xc8
 800072a:	dd3a      	ble.n	80007a2 <handleClicks+0x102>
				btn->status = WAITING_FIRST_CLICK;
 800072c:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <handleClicks+0x10c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2200      	movs	r2, #0
 8000732:	719a      	strb	r2, [r3, #6]
				btn->counter = 0;
 8000734:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <handleClicks+0x10c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2200      	movs	r2, #0
 800073a:	615a      	str	r2, [r3, #20]
				if(btn->secondClick - btn->firstClick < 500)
 800073c:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <handleClicks+0x10c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	68da      	ldr	r2, [r3, #12]
 8000742:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <handleClicks+0x10c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	689b      	ldr	r3, [r3, #8]
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800074e:	da0b      	bge.n	8000768 <handleClicks+0xc8>
					printf("Thats was short<%d>\n\r", btn->secondClick - btn->firstClick);
 8000750:	4b16      	ldr	r3, [pc, #88]	; (80007ac <handleClicks+0x10c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	68da      	ldr	r2, [r3, #12]
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <handleClicks+0x10c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	689b      	ldr	r3, [r3, #8]
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	4619      	mov	r1, r3
 8000760:	4813      	ldr	r0, [pc, #76]	; (80007b0 <handleClicks+0x110>)
 8000762:	f005 f9db 	bl	8005b1c <iprintf>
			break;
 8000766:	e01c      	b.n	80007a2 <handleClicks+0x102>
					printf("Thats was long<%d>\n\r", btn->secondClick - btn->firstClick);
 8000768:	4b10      	ldr	r3, [pc, #64]	; (80007ac <handleClicks+0x10c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	68da      	ldr	r2, [r3, #12]
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <handleClicks+0x10c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	4619      	mov	r1, r3
 8000778:	480e      	ldr	r0, [pc, #56]	; (80007b4 <handleClicks+0x114>)
 800077a:	f005 f9cf 	bl	8005b1c <iprintf>
			break;
 800077e:	e010      	b.n	80007a2 <handleClicks+0x102>
			if(btn->status == WAITING_FOR_LONG_PRESS)
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <handleClicks+0x10c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	799b      	ldrb	r3, [r3, #6]
 8000786:	2b03      	cmp	r3, #3
 8000788:	d10d      	bne.n	80007a6 <handleClicks+0x106>
				if(btn->counter > 1000)
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <handleClicks+0x10c>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	695b      	ldr	r3, [r3, #20]
 8000790:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000794:	dd07      	ble.n	80007a6 <handleClicks+0x106>
					printf("long\n\r");
 8000796:	4808      	ldr	r0, [pc, #32]	; (80007b8 <handleClicks+0x118>)
 8000798:	f005 f9c0 	bl	8005b1c <iprintf>
			break;
 800079c:	e003      	b.n	80007a6 <handleClicks+0x106>
			break;
 800079e:	bf00      	nop
 80007a0:	e002      	b.n	80007a8 <handleClicks+0x108>
			break;
 80007a2:	bf00      	nop
 80007a4:	e000      	b.n	80007a8 <handleClicks+0x108>
			break;
 80007a6:	bf00      	nop
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000214 	.word	0x20000214
 80007b0:	08006e38 	.word	0x08006e38
 80007b4:	08006e50 	.word	0x08006e50
 80007b8:	08006e68 	.word	0x08006e68

080007bc <changeFreq>:
							{Sol, 5000}};

static int index = 0;

void changeFreq (TIM_HandleTypeDef * htim3, TIM_HandleTypeDef * htim6)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]

	index = (index+1) % MUSIC_SIZE;
 80007c6:	4b23      	ldr	r3, [pc, #140]	; (8000854 <changeFreq+0x98>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	1c59      	adds	r1, r3, #1
 80007cc:	4b22      	ldr	r3, [pc, #136]	; (8000858 <changeFreq+0x9c>)
 80007ce:	fb83 2301 	smull	r2, r3, r3, r1
 80007d2:	111a      	asrs	r2, r3, #4
 80007d4:	17cb      	asrs	r3, r1, #31
 80007d6:	1ad2      	subs	r2, r2, r3
 80007d8:	4613      	mov	r3, r2
 80007da:	00db      	lsls	r3, r3, #3
 80007dc:	1a9b      	subs	r3, r3, r2
 80007de:	00da      	lsls	r2, r3, #3
 80007e0:	1ad2      	subs	r2, r2, r3
 80007e2:	1a8a      	subs	r2, r1, r2
 80007e4:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <changeFreq+0x98>)
 80007e6:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(htim3, 0);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2200      	movs	r2, #0
 80007ee:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(htim3, music[index].note);
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <changeFreq+0x98>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a19      	ldr	r2, [pc, #100]	; (800085c <changeFreq+0xa0>)
 80007f6:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <changeFreq+0x98>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a15      	ldr	r2, [pc, #84]	; (800085c <changeFreq+0xa0>)
 8000806:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800080a:	461a      	mov	r2, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_1, (music[index].note)/2 );
 8000810:	4b10      	ldr	r3, [pc, #64]	; (8000854 <changeFreq+0x98>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a11      	ldr	r2, [pc, #68]	; (800085c <changeFreq+0xa0>)
 8000816:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800081a:	085b      	lsrs	r3, r3, #1
 800081c:	b29a      	uxth	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_AUTORELOAD(htim6, music[index].period);
 8000824:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <changeFreq+0x98>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a0c      	ldr	r2, [pc, #48]	; (800085c <changeFreq+0xa0>)
 800082a:	00db      	lsls	r3, r3, #3
 800082c:	4413      	add	r3, r2
 800082e:	685a      	ldr	r2, [r3, #4]
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	62da      	str	r2, [r3, #44]	; 0x2c
 8000836:	4b07      	ldr	r3, [pc, #28]	; (8000854 <changeFreq+0x98>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a08      	ldr	r2, [pc, #32]	; (800085c <changeFreq+0xa0>)
 800083c:	00db      	lsls	r3, r3, #3
 800083e:	4413      	add	r3, r2
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	461a      	mov	r2, r3
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	60da      	str	r2, [r3, #12]

}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	2000021c 	.word	0x2000021c
 8000858:	5397829d 	.word	0x5397829d
 800085c:	20000000 	.word	0x20000000

08000860 <onOffMusic>:

void onOffMusic(TIM_HandleTypeDef * htim3)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	if(!press)
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <onOffMusic+0x50>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d10a      	bne.n	8000886 <onOffMusic+0x26>
		{
			HAL_TIM_Base_Start(htim3);
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f002 ff19 	bl	80036a8 <HAL_TIM_Base_Start>
			HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_1);
 8000876:	2100      	movs	r1, #0
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f003 f89b 	bl	80039b4 <HAL_TIM_PWM_Start>
			HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800087e:	201d      	movs	r0, #29
 8000880:	f001 f973 	bl	8001b6a <HAL_NVIC_EnableIRQ>
 8000884:	e006      	b.n	8000894 <onOffMusic+0x34>
		}
		else
		{
			HAL_TIM_Base_Stop(htim3);
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f002 ff76 	bl	8003778 <HAL_TIM_Base_Stop>
			HAL_TIM_PWM_Stop(htim3, TIM_CHANNEL_1);
 800088c:	2100      	movs	r1, #0
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f003 f996 	bl	8003bc0 <HAL_TIM_PWM_Stop>
		}
	press = (press+1)%2;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <onOffMusic+0x50>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	3301      	adds	r3, #1
 800089a:	2b00      	cmp	r3, #0
 800089c:	f003 0301 	and.w	r3, r3, #1
 80008a0:	bfb8      	it	lt
 80008a2:	425b      	neglt	r3, r3
 80008a4:	4a02      	ldr	r2, [pc, #8]	; (80008b0 <onOffMusic+0x50>)
 80008a6:	6013      	str	r3, [r2, #0]

}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000218 	.word	0x20000218

080008b4 <clockInit>:
 */

#include <Clock.h>

void clockInit (CLOCK* clock)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	clock->ms = 0;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
	clock->sec = 0;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2200      	movs	r2, #0
 80008c6:	711a      	strb	r2, [r3, #4]
	clock->min = 0;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2200      	movs	r2, #0
 80008cc:	715a      	strb	r2, [r3, #5]
	clock->hour = 0;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2200      	movs	r2, #0
 80008d2:	719a      	strb	r2, [r3, #6]
}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <increaseQlock>:

void increaseQlock(CLOCK* clock)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	if(clock->ms >= MSECS_TO_SEC)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008f0:	db08      	blt.n	8000904 <increaseQlock+0x24>
	{
		clock->ms = 0;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
		clock->sec++;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	791b      	ldrb	r3, [r3, #4]
 80008fc:	3301      	adds	r3, #1
 80008fe:	b2da      	uxtb	r2, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	711a      	strb	r2, [r3, #4]
	}
	if(clock->sec >= SECS_IN_MIN)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	791b      	ldrb	r3, [r3, #4]
 8000908:	2b3b      	cmp	r3, #59	; 0x3b
 800090a:	d908      	bls.n	800091e <increaseQlock+0x3e>
	{
		clock->sec = 0;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2200      	movs	r2, #0
 8000910:	711a      	strb	r2, [r3, #4]
		clock->min++;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	795b      	ldrb	r3, [r3, #5]
 8000916:	3301      	adds	r3, #1
 8000918:	b2da      	uxtb	r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	715a      	strb	r2, [r3, #5]
	}
	if(clock->min >= MINS_IN_HOUR)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	795b      	ldrb	r3, [r3, #5]
 8000922:	2b3b      	cmp	r3, #59	; 0x3b
 8000924:	d908      	bls.n	8000938 <increaseQlock+0x58>
	{
		clock->min = 0;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2200      	movs	r2, #0
 800092a:	715a      	strb	r2, [r3, #5]
		clock->hour++;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	799b      	ldrb	r3, [r3, #6]
 8000930:	3301      	adds	r3, #1
 8000932:	b2da      	uxtb	r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	719a      	strb	r2, [r3, #6]
	}

}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <clockOnInterrupt>:

void clockOnInterrupt(CLOCK* clock)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	clock->ms++;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	1c5a      	adds	r2, r3, #1
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	601a      	str	r2, [r3, #0]
	increaseQlock(clock);
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f7ff ffc2 	bl	80008e0 <increaseQlock>

}
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <printTime>:

void printTime(CLOCK* clock)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	printf("%d:%d:%d\n\r",clock->hour,clock->min, clock->sec);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	799b      	ldrb	r3, [r3, #6]
 8000970:	4619      	mov	r1, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	795b      	ldrb	r3, [r3, #5]
 8000976:	461a      	mov	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	791b      	ldrb	r3, [r3, #4]
 800097c:	4803      	ldr	r0, [pc, #12]	; (800098c <printTime+0x28>)
 800097e:	f005 f8cd 	bl	8005b1c <iprintf>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	08006e70 	.word	0x08006e70

08000990 <htimInit>:
uint8_t cmdbuffer[MAX_BUFFER_LENGTH];
int cmdcount = 0;
TIM_HandleTypeDef* htimFour;

void htimInit(TIM_HandleTypeDef* htim4)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	htimFour = htim4;
 8000998:	4a04      	ldr	r2, [pc, #16]	; (80009ac <htimInit+0x1c>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6013      	str	r3, [r2, #0]
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000294 	.word	0x20000294

080009b0 <ledInit>:
void ledInit(LED* led, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	4613      	mov	r3, r2
 80009bc:	80fb      	strh	r3, [r7, #6]
	led->state = STATE_OFF;
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	2200      	movs	r2, #0
 80009c2:	701a      	strb	r2, [r3, #0]
	led->GPIOx = GPIOx;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	68ba      	ldr	r2, [r7, #8]
 80009c8:	605a      	str	r2, [r3, #4]
	led->GPIO_Pin = GPIO_Pin;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	88fa      	ldrh	r2, [r7, #6]
 80009ce:	811a      	strh	r2, [r3, #8]
	led->counter = 0;
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
	led->period = START_PERIOD;
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	220a      	movs	r2, #10
 80009da:	615a      	str	r2, [r3, #20]
	if(led->GPIO_Pin == RedLed_Pin)
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	891b      	ldrh	r3, [r3, #8]
 80009e0:	2b40      	cmp	r3, #64	; 0x40
 80009e2:	d103      	bne.n	80009ec <ledInit+0x3c>
	{
		ledRed = led;
 80009e4:	4a06      	ldr	r2, [pc, #24]	; (8000a00 <ledInit+0x50>)
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	6013      	str	r3, [r2, #0]
	}
	else
	{
		ledBlue = led;
	}
}
 80009ea:	e002      	b.n	80009f2 <ledInit+0x42>
		ledBlue = led;
 80009ec:	4a05      	ldr	r2, [pc, #20]	; (8000a04 <ledInit+0x54>)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	6013      	str	r3, [r2, #0]
}
 80009f2:	bf00      	nop
 80009f4:	3714      	adds	r7, #20
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	20000220 	.word	0x20000220
 8000a04:	20000224 	.word	0x20000224

08000a08 <ledOn>:


void ledOn(LED* led)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	led->state = STATE_ON;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2201      	movs	r2, #1
 8000a14:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, 1);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6858      	ldr	r0, [r3, #4]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	891b      	ldrh	r3, [r3, #8]
 8000a1e:	2201      	movs	r2, #1
 8000a20:	4619      	mov	r1, r3
 8000a22:	f001 fa7f 	bl	8001f24 <HAL_GPIO_WritePin>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <ledOff>:

void ledOff(LED* led)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b082      	sub	sp, #8
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
	led->state = STATE_OFF;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, 0);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6858      	ldr	r0, [r3, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	891b      	ldrh	r3, [r3, #8]
 8000a44:	2200      	movs	r2, #0
 8000a46:	4619      	mov	r1, r3
 8000a48:	f001 fa6c 	bl	8001f24 <HAL_GPIO_WritePin>
}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <ledBlink>:

void ledBlink(LED* led, int period)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]
	led->state = STATE_BLINKING;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2203      	movs	r2, #3
 8000a62:	701a      	strb	r2, [r3, #0]
	led->period = period;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	683a      	ldr	r2, [r7, #0]
 8000a68:	615a      	str	r2, [r3, #20]
	led->counter = 0;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <ledOnTimerInterrupt>:

void ledOnTimerInterrupt(LED* led)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	if(led->state == STATE_BLINKING && led->counter == led->period)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b03      	cmp	r3, #3
 8000a8a:	d111      	bne.n	8000ab0 <ledOnTimerInterrupt+0x34>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	691a      	ldr	r2, [r3, #16]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	695b      	ldr	r3, [r3, #20]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d10b      	bne.n	8000ab0 <ledOnTimerInterrupt+0x34>
	{
		HAL_GPIO_TogglePin(led->GPIOx, led->GPIO_Pin);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	685a      	ldr	r2, [r3, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	891b      	ldrh	r3, [r3, #8]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	f001 fa56 	bl	8001f54 <HAL_GPIO_TogglePin>
		led->counter = 0;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
 8000aae:	e005      	b.n	8000abc <ledOnTimerInterrupt+0x40>
	}

	else
	{
		led ->counter++;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	691b      	ldr	r3, [r3, #16]
 8000ab4:	1c5a      	adds	r2, r3, #1
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	611a      	str	r2, [r3, #16]

	}

}
 8000aba:	bf00      	nop
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <setBrightness>:

void setBrightness (LED* led, int brightness)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
	led->state = STATE_BRIGHTNESS;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(htimFour);
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <setBrightness+0x38>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f002 fe75 	bl	80037c8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(htimFour,TIM_CHANNEL_1);
 8000ade:	4b07      	ldr	r3, [pc, #28]	; (8000afc <setBrightness+0x38>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f003 f901 	bl	8003cec <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(htimFour,TIM_CHANNEL_1, brightness);
 8000aea:	4b04      	ldr	r3, [pc, #16]	; (8000afc <setBrightness+0x38>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	683a      	ldr	r2, [r7, #0]
 8000af2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000294 	.word	0x20000294

08000b00 <commTask>:
{

}

int commTask(UART_HandleTypeDef* huart2)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef Status = HAL_UART_Receive(huart2, &ch, 1, 0);
 8000b08:	2300      	movs	r3, #0
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	491f      	ldr	r1, [pc, #124]	; (8000b8c <commTask+0x8c>)
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f004 fa94 	bl	800503c <HAL_UART_Receive>
 8000b14:	4603      	mov	r3, r0
 8000b16:	73fb      	strb	r3, [r7, #15]
	if (Status != HAL_OK) {
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <commTask+0x22>
		return 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e030      	b.n	8000b84 <commTask+0x84>
	}
	if (ch != '\r' && ch != '\n')
 8000b22:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <commTask+0x8c>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b0d      	cmp	r3, #13
 8000b28:	d01c      	beq.n	8000b64 <commTask+0x64>
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <commTask+0x8c>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b0a      	cmp	r3, #10
 8000b30:	d018      	beq.n	8000b64 <commTask+0x64>
	{
		HAL_UART_Transmit(huart2, &ch, 1, 0xFFFF);
 8000b32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b36:	2201      	movs	r2, #1
 8000b38:	4914      	ldr	r1, [pc, #80]	; (8000b8c <commTask+0x8c>)
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f004 f9ea 	bl	8004f14 <HAL_UART_Transmit>

		if (cmdcount >= MAX_BUFFER_LENGTH)
 8000b40:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <commTask+0x90>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b63      	cmp	r3, #99	; 0x63
 8000b46:	dd02      	ble.n	8000b4e <commTask+0x4e>
		{
			cmdcount = 0;
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <commTask+0x90>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <commTask+0x90>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	1c5a      	adds	r2, r3, #1
 8000b54:	490e      	ldr	r1, [pc, #56]	; (8000b90 <commTask+0x90>)
 8000b56:	600a      	str	r2, [r1, #0]
 8000b58:	4a0c      	ldr	r2, [pc, #48]	; (8000b8c <commTask+0x8c>)
 8000b5a:	7811      	ldrb	r1, [r2, #0]
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	; (8000b94 <commTask+0x94>)
 8000b5e:	54d1      	strb	r1, [r2, r3]
		return 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	e00f      	b.n	8000b84 <commTask+0x84>
	}
	HAL_UART_Transmit(huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 8000b64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b68:	2202      	movs	r2, #2
 8000b6a:	490b      	ldr	r1, [pc, #44]	; (8000b98 <commTask+0x98>)
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f004 f9d1 	bl	8004f14 <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 8000b72:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <commTask+0x90>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a07      	ldr	r2, [pc, #28]	; (8000b94 <commTask+0x94>)
 8000b78:	2100      	movs	r1, #0
 8000b7a:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 8000b7c:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <commTask+0x90>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
	return 1;
 8000b82:	2301      	movs	r3, #1
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000228 	.word	0x20000228
 8000b90:	20000290 	.word	0x20000290
 8000b94:	2000022c 	.word	0x2000022c
 8000b98:	08006e7c 	.word	0x08006e7c

08000b9c <handleCommand>:

void handleCommand()
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af00      	add	r7, sp, #0
	char cmd[20];
	//sscanf((const char*)cmdbuffer, "%s", cmd);
	char* tokens;
	tokens = strtok(cmdbuffer,"  \r");
 8000ba2:	4952      	ldr	r1, [pc, #328]	; (8000cec <handleCommand+0x150>)
 8000ba4:	4852      	ldr	r0, [pc, #328]	; (8000cf0 <handleCommand+0x154>)
 8000ba6:	f005 f84f 	bl	8005c48 <strtok>
 8000baa:	61f8      	str	r0, [r7, #28]
	strcpy(cmd,tokens);
 8000bac:	463b      	mov	r3, r7
 8000bae:	69f9      	ldr	r1, [r7, #28]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f005 f841 	bl	8005c38 <strcpy>
	HAL_TIM_Base_Stop_IT(htimFour);
 8000bb6:	4b4f      	ldr	r3, [pc, #316]	; (8000cf4 <handleCommand+0x158>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f002 fe74 	bl	80038a8 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop_IT(htimFour,TIM_CHANNEL_1);
 8000bc0:	4b4c      	ldr	r3, [pc, #304]	; (8000cf4 <handleCommand+0x158>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f003 f9e4 	bl	8003f94 <HAL_TIM_PWM_Stop_IT>

	if (strcmp(cmd, "full") == 0)
 8000bcc:	463b      	mov	r3, r7
 8000bce:	494a      	ldr	r1, [pc, #296]	; (8000cf8 <handleCommand+0x15c>)
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fafd 	bl	80001d0 <strcmp>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d10a      	bne.n	8000bf2 <handleCommand+0x56>
	{
		ledOn(ledRed);
 8000bdc:	4b47      	ldr	r3, [pc, #284]	; (8000cfc <handleCommand+0x160>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff ff11 	bl	8000a08 <ledOn>
		ledOn(ledBlue);
 8000be6:	4b46      	ldr	r3, [pc, #280]	; (8000d00 <handleCommand+0x164>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff ff0c 	bl	8000a08 <ledOn>
	}
	else
	{
		printf("Invalid command\r\n");
	}
}
 8000bf0:	e078      	b.n	8000ce4 <handleCommand+0x148>
	else if (strcmp(cmd, "half") == 0)
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	4943      	ldr	r1, [pc, #268]	; (8000d04 <handleCommand+0x168>)
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff faea 	bl	80001d0 <strcmp>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d11a      	bne.n	8000c38 <handleCommand+0x9c>
		tokens = strtok(NULL, "  \r");
 8000c02:	493a      	ldr	r1, [pc, #232]	; (8000cec <handleCommand+0x150>)
 8000c04:	2000      	movs	r0, #0
 8000c06:	f005 f81f 	bl	8005c48 <strtok>
 8000c0a:	61f8      	str	r0, [r7, #28]
		strcpy(cmd,tokens);
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	69f9      	ldr	r1, [r7, #28]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f005 f811 	bl	8005c38 <strcpy>
		strcpy(cmd,tokens);
 8000c16:	463b      	mov	r3, r7
 8000c18:	69f9      	ldr	r1, [r7, #28]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f005 f80c 	bl	8005c38 <strcpy>
		value = (int)atoi((const)cmd);
 8000c20:	463b      	mov	r3, r7
 8000c22:	4618      	mov	r0, r3
 8000c24:	f004 ff43 	bl	8005aae <atoi>
 8000c28:	6178      	str	r0, [r7, #20]
		setBrightness(ledBlue, value);
 8000c2a:	4b35      	ldr	r3, [pc, #212]	; (8000d00 <handleCommand+0x164>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	6979      	ldr	r1, [r7, #20]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff ff47 	bl	8000ac4 <setBrightness>
}
 8000c36:	e055      	b.n	8000ce4 <handleCommand+0x148>
	else if (strcmp(cmd, "blink") == 0)
 8000c38:	463b      	mov	r3, r7
 8000c3a:	4933      	ldr	r1, [pc, #204]	; (8000d08 <handleCommand+0x16c>)
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fac7 	bl	80001d0 <strcmp>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d10e      	bne.n	8000c66 <handleCommand+0xca>
		ledBlink(ledRed, 700);
 8000c48:	4b2c      	ldr	r3, [pc, #176]	; (8000cfc <handleCommand+0x160>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff feff 	bl	8000a54 <ledBlink>
		ledBlink(ledBlue, 300);
 8000c56:	4b2a      	ldr	r3, [pc, #168]	; (8000d00 <handleCommand+0x164>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fef8 	bl	8000a54 <ledBlink>
}
 8000c64:	e03e      	b.n	8000ce4 <handleCommand+0x148>
	else if(strcmp(cmd, "off") == 0)
 8000c66:	463b      	mov	r3, r7
 8000c68:	4928      	ldr	r1, [pc, #160]	; (8000d0c <handleCommand+0x170>)
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fab0 	bl	80001d0 <strcmp>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d10a      	bne.n	8000c8c <handleCommand+0xf0>
		ledOff(ledRed);
 8000c76:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <handleCommand+0x160>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff fed7 	bl	8000a2e <ledOff>
		ledOff(ledBlue);
 8000c80:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <handleCommand+0x164>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fed2 	bl	8000a2e <ledOff>
}
 8000c8a:	e02b      	b.n	8000ce4 <handleCommand+0x148>
	else if(strcmp(cmd, "set") == 0)
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	4920      	ldr	r1, [pc, #128]	; (8000d10 <handleCommand+0x174>)
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fa9d 	bl	80001d0 <strcmp>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d120      	bne.n	8000cde <handleCommand+0x142>
		tokens = strtok(NULL, "  \r");
 8000c9c:	4913      	ldr	r1, [pc, #76]	; (8000cec <handleCommand+0x150>)
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f004 ffd2 	bl	8005c48 <strtok>
 8000ca4:	61f8      	str	r0, [r7, #28]
	    strcpy(cmd,tokens);
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	69f9      	ldr	r1, [r7, #28]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f004 ffc4 	bl	8005c38 <strcpy>
		strcpy(cmd,tokens);
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	69f9      	ldr	r1, [r7, #28]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f004 ffbf 	bl	8005c38 <strcpy>
		value = (int)atoi((const)cmd);
 8000cba:	463b      	mov	r3, r7
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f004 fef6 	bl	8005aae <atoi>
 8000cc2:	61b8      	str	r0, [r7, #24]
		ledBlink(ledBlue, value);
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <handleCommand+0x164>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	69b9      	ldr	r1, [r7, #24]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fec2 	bl	8000a54 <ledBlink>
		ledBlink(ledRed, value);
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <handleCommand+0x160>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	69b9      	ldr	r1, [r7, #24]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff febc 	bl	8000a54 <ledBlink>
}
 8000cdc:	e002      	b.n	8000ce4 <handleCommand+0x148>
		printf("Invalid command\r\n");
 8000cde:	480d      	ldr	r0, [pc, #52]	; (8000d14 <handleCommand+0x178>)
 8000ce0:	f004 ffa2 	bl	8005c28 <puts>
}
 8000ce4:	bf00      	nop
 8000ce6:	3720      	adds	r7, #32
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	08006e80 	.word	0x08006e80
 8000cf0:	2000022c 	.word	0x2000022c
 8000cf4:	20000294 	.word	0x20000294
 8000cf8:	08006e84 	.word	0x08006e84
 8000cfc:	20000220 	.word	0x20000220
 8000d00:	20000224 	.word	0x20000224
 8000d04:	08006e8c 	.word	0x08006e8c
 8000d08:	08006e94 	.word	0x08006e94
 8000d0c:	08006e9c 	.word	0x08006e9c
 8000d10:	08006ea0 	.word	0x08006ea0
 8000d14:	08006ea4 	.word	0x08006ea4

08000d18 <myMain>:
void myMain(UART_HandleTypeDef* huart2)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	if (commTask(huart2))
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff feed 	bl	8000b00 <commTask>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <myMain+0x18>
	{
		handleCommand();
 8000d2c:	f7ff ff36 	bl	8000b9c <handleCommand>
	}
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int fd, char* ptr, int len) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4c:	68b9      	ldr	r1, [r7, #8]
 8000d4e:	4804      	ldr	r0, [pc, #16]	; (8000d60 <_write+0x28>)
 8000d50:	f004 f8e0 	bl	8004f14 <HAL_UART_Transmit>
    return len;
 8000d54:	687b      	ldr	r3, [r7, #4]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200003c8 	.word	0x200003c8

08000d64 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	if(htim == &htim6)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a13      	ldr	r2, [pc, #76]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d104      	bne.n	8000d7e <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		changeFreq(&htim3, &htim6);// for the buzzer
 8000d74:	4911      	ldr	r1, [pc, #68]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000d76:	4812      	ldr	r0, [pc, #72]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000d78:	f7ff fd20 	bl	80007bc <changeFreq>
	}
	else if(htim == &htim4)
	{
		HAL_GPIO_WritePin(GPIOA,BlueLed_Pin , 1);
	}
}
 8000d7c:	e019      	b.n	8000db2 <HAL_TIM_PeriodElapsedCallback+0x4e>
	else if (htim == &htim7)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a10      	ldr	r2, [pc, #64]	; (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d10b      	bne.n	8000d9e <HAL_TIM_PeriodElapsedCallback+0x3a>
		handleClicks();
 8000d86:	f7ff fc8b 	bl	80006a0 <handleClicks>
		clockOnInterrupt(&myQlock);
 8000d8a:	480f      	ldr	r0, [pc, #60]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000d8c:	f7ff fdda 	bl	8000944 <clockOnInterrupt>
		ledOnTimerInterrupt(&ledR);
 8000d90:	480e      	ldr	r0, [pc, #56]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000d92:	f7ff fe73 	bl	8000a7c <ledOnTimerInterrupt>
		ledOnTimerInterrupt(&ledB);
 8000d96:	480e      	ldr	r0, [pc, #56]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000d98:	f7ff fe70 	bl	8000a7c <ledOnTimerInterrupt>
}
 8000d9c:	e009      	b.n	8000db2 <HAL_TIM_PeriodElapsedCallback+0x4e>
	else if(htim == &htim4)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a0c      	ldr	r2, [pc, #48]	; (8000dd4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d105      	bne.n	8000db2 <HAL_TIM_PeriodElapsedCallback+0x4e>
		HAL_GPIO_WritePin(GPIOA,BlueLed_Pin , 1);
 8000da6:	2201      	movs	r2, #1
 8000da8:	2120      	movs	r1, #32
 8000daa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dae:	f001 f8b9 	bl	8001f24 <HAL_GPIO_WritePin>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000330 	.word	0x20000330
 8000dc0:	20000298 	.word	0x20000298
 8000dc4:	2000037c 	.word	0x2000037c
 8000dc8:	2000047c 	.word	0x2000047c
 8000dcc:	2000044c 	.word	0x2000044c
 8000dd0:	20000464 	.word	0x20000464
 8000dd4:	200002e4 	.word	0x200002e4

08000dd8 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef * htim)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA,BlueLed_Pin , 0);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2120      	movs	r1, #32
 8000de4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de8:	f001 f89c 	bl	8001f24 <HAL_GPIO_WritePin>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == rightBtn_Pin)
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e04:	d105      	bne.n	8000e12 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		onOffMusic (&htim3);//turn on/off the music
 8000e06:	4808      	ldr	r0, [pc, #32]	; (8000e28 <HAL_GPIO_EXTI_Callback+0x34>)
 8000e08:	f7ff fd2a 	bl	8000860 <onOffMusic>
		printTime(&myQlock);// print time of running
 8000e0c:	4807      	ldr	r0, [pc, #28]	; (8000e2c <HAL_GPIO_EXTI_Callback+0x38>)
 8000e0e:	f7ff fda9 	bl	8000964 <printTime>
	}

	if(GPIO_Pin == leftBtn_Pin)
 8000e12:	88fb      	ldrh	r3, [r7, #6]
 8000e14:	2b08      	cmp	r3, #8
 8000e16:	d102      	bne.n	8000e1e <HAL_GPIO_EXTI_Callback+0x2a>
	{
		//HAL_GPIO_TogglePin(GPIOA, BlueLed_Pin);
		//onClickInterrupt(GPIO_Pin);//print short click/long click
		btnClick.noiseWait = ON;
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	71da      	strb	r2, [r3, #7]

	}

}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000298 	.word	0x20000298
 8000e2c:	2000047c 	.word	0x2000047c
 8000e30:	20000484 	.word	0x20000484

08000e34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e38:	f000 fd24 	bl	8001884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e3c:	f000 f848 	bl	8000ed0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e40:	f000 f9ec 	bl	800121c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e44:	f000 f9ba 	bl	80011bc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000e48:	f000 f894 	bl	8000f74 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000e4c:	f000 f948 	bl	80010e0 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000e50:	f000 f97e 	bl	8001150 <MX_TIM7_Init>
  MX_TIM4_Init();
 8000e54:	f000 f8ea 	bl	800102c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8000e58:	4814      	ldr	r0, [pc, #80]	; (8000eac <main+0x78>)
 8000e5a:	f002 fcb5 	bl	80037c8 <HAL_TIM_Base_Start_IT>
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000e5e:	2036      	movs	r0, #54	; 0x36
 8000e60:	f000 fe83 	bl	8001b6a <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT(&htim7);
 8000e64:	4812      	ldr	r0, [pc, #72]	; (8000eb0 <main+0x7c>)
 8000e66:	f002 fcaf 	bl	80037c8 <HAL_TIM_Base_Start_IT>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000e6a:	2037      	movs	r0, #55	; 0x37
 8000e6c:	f000 fe7d 	bl	8001b6a <HAL_NVIC_EnableIRQ>
  ledInit(&ledR, GPIOA, RedLed_Pin);
 8000e70:	2240      	movs	r2, #64	; 0x40
 8000e72:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000e76:	480f      	ldr	r0, [pc, #60]	; (8000eb4 <main+0x80>)
 8000e78:	f7ff fd9a 	bl	80009b0 <ledInit>
  ledInit(&ledB, GPIOA, BlueLed_Pin);
 8000e7c:	2220      	movs	r2, #32
 8000e7e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000e82:	480d      	ldr	r0, [pc, #52]	; (8000eb8 <main+0x84>)
 8000e84:	f7ff fd94 	bl	80009b0 <ledInit>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000e88:	201e      	movs	r0, #30
 8000e8a:	f000 fe6e 	bl	8001b6a <HAL_NVIC_EnableIRQ>
  htimInit(&htim4);
 8000e8e:	480b      	ldr	r0, [pc, #44]	; (8000ebc <main+0x88>)
 8000e90:	f7ff fd7e 	bl	8000990 <htimInit>
//  installLed(&ledR,&ledB);
  initBtnClicks(&btnClick,leftBtn_GPIO_Port,leftBtn_Pin);
 8000e94:	2208      	movs	r2, #8
 8000e96:	490a      	ldr	r1, [pc, #40]	; (8000ec0 <main+0x8c>)
 8000e98:	480a      	ldr	r0, [pc, #40]	; (8000ec4 <main+0x90>)
 8000e9a:	f7ff fb7b 	bl	8000594 <initBtnClicks>
  clockInit(&myQlock);
 8000e9e:	480a      	ldr	r0, [pc, #40]	; (8000ec8 <main+0x94>)
 8000ea0:	f7ff fd08 	bl	80008b4 <clockInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  myMain(&huart2);
 8000ea4:	4809      	ldr	r0, [pc, #36]	; (8000ecc <main+0x98>)
 8000ea6:	f7ff ff37 	bl	8000d18 <myMain>
 8000eaa:	e7fb      	b.n	8000ea4 <main+0x70>
 8000eac:	20000330 	.word	0x20000330
 8000eb0:	2000037c 	.word	0x2000037c
 8000eb4:	2000044c 	.word	0x2000044c
 8000eb8:	20000464 	.word	0x20000464
 8000ebc:	200002e4 	.word	0x200002e4
 8000ec0:	48000400 	.word	0x48000400
 8000ec4:	20000484 	.word	0x20000484
 8000ec8:	2000047c 	.word	0x2000047c
 8000ecc:	200003c8 	.word	0x200003c8

08000ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b096      	sub	sp, #88	; 0x58
 8000ed4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	2244      	movs	r2, #68	; 0x44
 8000edc:	2100      	movs	r1, #0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f004 fe14 	bl	8005b0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
 8000ef0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ef2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ef6:	f001 f86d 	bl	8001fd4 <HAL_PWREx_ControlVoltageScaling>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f00:	f000 fa20 	bl	8001344 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f04:	2302      	movs	r3, #2
 8000f06:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f0c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f0e:	2310      	movs	r3, #16
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f12:	2302      	movs	r3, #2
 8000f14:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f16:	2302      	movs	r3, #2
 8000f18:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f1e:	230a      	movs	r3, #10
 8000f20:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f22:	2307      	movs	r3, #7
 8000f24:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f26:	2302      	movs	r3, #2
 8000f28:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4618      	mov	r0, r3
 8000f34:	f001 f8a4 	bl	8002080 <HAL_RCC_OscConfig>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000f3e:	f000 fa01 	bl	8001344 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f42:	230f      	movs	r3, #15
 8000f44:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f46:	2303      	movs	r3, #3
 8000f48:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f56:	463b      	mov	r3, r7
 8000f58:	2104      	movs	r1, #4
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f001 fc6c 	bl	8002838 <HAL_RCC_ClockConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f66:	f000 f9ed 	bl	8001344 <Error_Handler>
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	3758      	adds	r7, #88	; 0x58
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f7a:	f107 031c 	add.w	r3, r7, #28
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f86:	463b      	mov	r3, r7
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
 8000f94:	615a      	str	r2, [r3, #20]
 8000f96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f98:	4b22      	ldr	r3, [pc, #136]	; (8001024 <MX_TIM3_Init+0xb0>)
 8000f9a:	4a23      	ldr	r2, [pc, #140]	; (8001028 <MX_TIM3_Init+0xb4>)
 8000f9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 8000f9e:	4b21      	ldr	r3, [pc, #132]	; (8001024 <MX_TIM3_Init+0xb0>)
 8000fa0:	f240 321f 	movw	r2, #799	; 0x31f
 8000fa4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <MX_TIM3_Init+0xb0>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 381;
 8000fac:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <MX_TIM3_Init+0xb0>)
 8000fae:	f240 127d 	movw	r2, #381	; 0x17d
 8000fb2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <MX_TIM3_Init+0xb0>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fba:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <MX_TIM3_Init+0xb0>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fc0:	4818      	ldr	r0, [pc, #96]	; (8001024 <MX_TIM3_Init+0xb0>)
 8000fc2:	f002 fca0 	bl	8003906 <HAL_TIM_PWM_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8000fcc:	f000 f9ba 	bl	8001344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fd8:	f107 031c 	add.w	r3, r7, #28
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4811      	ldr	r0, [pc, #68]	; (8001024 <MX_TIM3_Init+0xb0>)
 8000fe0:	f003 fea4 	bl	8004d2c <HAL_TIMEx_MasterConfigSynchronization>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000fea:	f000 f9ab 	bl	8001344 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fee:	2360      	movs	r3, #96	; 0x60
 8000ff0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ffe:	463b      	mov	r3, r7
 8001000:	2200      	movs	r2, #0
 8001002:	4619      	mov	r1, r3
 8001004:	4807      	ldr	r0, [pc, #28]	; (8001024 <MX_TIM3_Init+0xb0>)
 8001006:	f003 f9c9 	bl	800439c <HAL_TIM_PWM_ConfigChannel>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001010:	f000 f998 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001014:	4803      	ldr	r0, [pc, #12]	; (8001024 <MX_TIM3_Init+0xb0>)
 8001016:	f000 fa3b 	bl	8001490 <HAL_TIM_MspPostInit>

}
 800101a:	bf00      	nop
 800101c:	3728      	adds	r7, #40	; 0x28
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000298 	.word	0x20000298
 8001028:	40000400 	.word	0x40000400

0800102c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800103e:	463b      	mov	r3, r7
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
 800104c:	615a      	str	r2, [r3, #20]
 800104e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001050:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <MX_TIM4_Init+0xac>)
 8001052:	4a22      	ldr	r2, [pc, #136]	; (80010dc <MX_TIM4_Init+0xb0>)
 8001054:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 999;
 8001056:	4b20      	ldr	r3, [pc, #128]	; (80010d8 <MX_TIM4_Init+0xac>)
 8001058:	f240 32e7 	movw	r2, #999	; 0x3e7
 800105c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105e:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <MX_TIM4_Init+0xac>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9;
 8001064:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <MX_TIM4_Init+0xac>)
 8001066:	2209      	movs	r2, #9
 8001068:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106a:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <MX_TIM4_Init+0xac>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001070:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <MX_TIM4_Init+0xac>)
 8001072:	2200      	movs	r2, #0
 8001074:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001076:	4818      	ldr	r0, [pc, #96]	; (80010d8 <MX_TIM4_Init+0xac>)
 8001078:	f002 fc45 	bl	8003906 <HAL_TIM_PWM_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001082:	f000 f95f 	bl	8001344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800108e:	f107 031c 	add.w	r3, r7, #28
 8001092:	4619      	mov	r1, r3
 8001094:	4810      	ldr	r0, [pc, #64]	; (80010d8 <MX_TIM4_Init+0xac>)
 8001096:	f003 fe49 	bl	8004d2c <HAL_TIMEx_MasterConfigSynchronization>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80010a0:	f000 f950 	bl	8001344 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010a4:	2360      	movs	r3, #96	; 0x60
 80010a6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010b4:	463b      	mov	r3, r7
 80010b6:	2200      	movs	r2, #0
 80010b8:	4619      	mov	r1, r3
 80010ba:	4807      	ldr	r0, [pc, #28]	; (80010d8 <MX_TIM4_Init+0xac>)
 80010bc:	f003 f96e 	bl	800439c <HAL_TIM_PWM_ConfigChannel>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80010c6:	f000 f93d 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80010ca:	4803      	ldr	r0, [pc, #12]	; (80010d8 <MX_TIM4_Init+0xac>)
 80010cc:	f000 f9e0 	bl	8001490 <HAL_TIM_MspPostInit>

}
 80010d0:	bf00      	nop
 80010d2:	3728      	adds	r7, #40	; 0x28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200002e4 	.word	0x200002e4
 80010dc:	40000800 	.word	0x40000800

080010e0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80010f0:	4b15      	ldr	r3, [pc, #84]	; (8001148 <MX_TIM6_Init+0x68>)
 80010f2:	4a16      	ldr	r2, [pc, #88]	; (800114c <MX_TIM6_Init+0x6c>)
 80010f4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 80010f6:	4b14      	ldr	r3, [pc, #80]	; (8001148 <MX_TIM6_Init+0x68>)
 80010f8:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80010fc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <MX_TIM6_Init+0x68>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1999;
 8001104:	4b10      	ldr	r3, [pc, #64]	; (8001148 <MX_TIM6_Init+0x68>)
 8001106:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800110a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MX_TIM6_Init+0x68>)
 800110e:	2200      	movs	r2, #0
 8001110:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001112:	480d      	ldr	r0, [pc, #52]	; (8001148 <MX_TIM6_Init+0x68>)
 8001114:	f002 fa70 	bl	80035f8 <HAL_TIM_Base_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800111e:	f000 f911 	bl	8001344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	4619      	mov	r1, r3
 800112e:	4806      	ldr	r0, [pc, #24]	; (8001148 <MX_TIM6_Init+0x68>)
 8001130:	f003 fdfc 	bl	8004d2c <HAL_TIMEx_MasterConfigSynchronization>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800113a:	f000 f903 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000330 	.word	0x20000330
 800114c:	40001000 	.word	0x40001000

08001150 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001160:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <MX_TIM7_Init+0x64>)
 8001162:	4a15      	ldr	r2, [pc, #84]	; (80011b8 <MX_TIM7_Init+0x68>)
 8001164:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 8001166:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <MX_TIM7_Init+0x64>)
 8001168:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800116c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <MX_TIM7_Init+0x64>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8001174:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <MX_TIM7_Init+0x64>)
 8001176:	2209      	movs	r2, #9
 8001178:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <MX_TIM7_Init+0x64>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001180:	480c      	ldr	r0, [pc, #48]	; (80011b4 <MX_TIM7_Init+0x64>)
 8001182:	f002 fa39 	bl	80035f8 <HAL_TIM_Base_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800118c:	f000 f8da 	bl	8001344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001190:	2300      	movs	r3, #0
 8001192:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	4619      	mov	r1, r3
 800119c:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_TIM7_Init+0x64>)
 800119e:	f003 fdc5 	bl	8004d2c <HAL_TIMEx_MasterConfigSynchronization>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80011a8:	f000 f8cc 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	2000037c 	.word	0x2000037c
 80011b8:	40001400 	.word	0x40001400

080011bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011c0:	4b14      	ldr	r3, [pc, #80]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011c2:	4a15      	ldr	r2, [pc, #84]	; (8001218 <MX_USART2_UART_Init+0x5c>)
 80011c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011c6:	4b13      	ldr	r3, [pc, #76]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011e2:	220c      	movs	r2, #12
 80011e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011f2:	4b08      	ldr	r3, [pc, #32]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_USART2_UART_Init+0x58>)
 8001200:	f003 fe3a 	bl	8004e78 <HAL_UART_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800120a:	f000 f89b 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200003c8 	.word	0x200003c8
 8001218:	40004400 	.word	0x40004400

0800121c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001232:	4b41      	ldr	r3, [pc, #260]	; (8001338 <MX_GPIO_Init+0x11c>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	4a40      	ldr	r2, [pc, #256]	; (8001338 <MX_GPIO_Init+0x11c>)
 8001238:	f043 0304 	orr.w	r3, r3, #4
 800123c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123e:	4b3e      	ldr	r3, [pc, #248]	; (8001338 <MX_GPIO_Init+0x11c>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800124a:	4b3b      	ldr	r3, [pc, #236]	; (8001338 <MX_GPIO_Init+0x11c>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	4a3a      	ldr	r2, [pc, #232]	; (8001338 <MX_GPIO_Init+0x11c>)
 8001250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001256:	4b38      	ldr	r3, [pc, #224]	; (8001338 <MX_GPIO_Init+0x11c>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	4b35      	ldr	r3, [pc, #212]	; (8001338 <MX_GPIO_Init+0x11c>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001266:	4a34      	ldr	r2, [pc, #208]	; (8001338 <MX_GPIO_Init+0x11c>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126e:	4b32      	ldr	r3, [pc, #200]	; (8001338 <MX_GPIO_Init+0x11c>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	4b2f      	ldr	r3, [pc, #188]	; (8001338 <MX_GPIO_Init+0x11c>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	4a2e      	ldr	r2, [pc, #184]	; (8001338 <MX_GPIO_Init+0x11c>)
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001286:	4b2c      	ldr	r3, [pc, #176]	; (8001338 <MX_GPIO_Init+0x11c>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BlueLed_Pin|RedLed_Pin, GPIO_PIN_RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	2160      	movs	r1, #96	; 0x60
 8001296:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129a:	f000 fe43 	bl	8001f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800129e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012a4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	4619      	mov	r1, r3
 80012b4:	4821      	ldr	r0, [pc, #132]	; (800133c <MX_GPIO_Init+0x120>)
 80012b6:	f000 fc73 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BlueLed_Pin RedLed_Pin */
  GPIO_InitStruct.Pin = BlueLed_Pin|RedLed_Pin;
 80012ba:	2360      	movs	r3, #96	; 0x60
 80012bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012be:	2301      	movs	r3, #1
 80012c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4619      	mov	r1, r3
 80012d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d4:	f000 fc64 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : rightBtn_Pin */
  GPIO_InitStruct.Pin = rightBtn_Pin;
 80012d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(rightBtn_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	4619      	mov	r1, r3
 80012ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f2:	f000 fc55 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : leftBtn_Pin */
  GPIO_InitStruct.Pin = leftBtn_Pin;
 80012f6:	2308      	movs	r3, #8
 80012f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80012fa:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80012fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(leftBtn_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	480d      	ldr	r0, [pc, #52]	; (8001340 <MX_GPIO_Init+0x124>)
 800130c:	f000 fc48 	bl	8001ba0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	2100      	movs	r1, #0
 8001314:	2009      	movs	r0, #9
 8001316:	f000 fc0c 	bl	8001b32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800131a:	2009      	movs	r0, #9
 800131c:	f000 fc25 	bl	8001b6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	2100      	movs	r1, #0
 8001324:	2028      	movs	r0, #40	; 0x28
 8001326:	f000 fc04 	bl	8001b32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800132a:	2028      	movs	r0, #40	; 0x28
 800132c:	f000 fc1d 	bl	8001b6a <HAL_NVIC_EnableIRQ>

}
 8001330:	bf00      	nop
 8001332:	3728      	adds	r7, #40	; 0x28
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40021000 	.word	0x40021000
 800133c:	48000800 	.word	0x48000800
 8001340:	48000400 	.word	0x48000400

08001344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001348:	b672      	cpsid	i
}
 800134a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800134c:	e7fe      	b.n	800134c <Error_Handler+0x8>
	...

08001350 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <HAL_MspInit+0x44>)
 8001358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800135a:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <HAL_MspInit+0x44>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6613      	str	r3, [r2, #96]	; 0x60
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <HAL_MspInit+0x44>)
 8001364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <HAL_MspInit+0x44>)
 8001370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001372:	4a08      	ldr	r2, [pc, #32]	; (8001394 <HAL_MspInit+0x44>)
 8001374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001378:	6593      	str	r3, [r2, #88]	; 0x58
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_MspInit+0x44>)
 800137c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001382:	603b      	str	r3, [r7, #0]
 8001384:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40021000 	.word	0x40021000

08001398 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a16      	ldr	r2, [pc, #88]	; (8001400 <HAL_TIM_PWM_MspInit+0x68>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d10c      	bne.n	80013c4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013aa:	4b16      	ldr	r3, [pc, #88]	; (8001404 <HAL_TIM_PWM_MspInit+0x6c>)
 80013ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ae:	4a15      	ldr	r2, [pc, #84]	; (8001404 <HAL_TIM_PWM_MspInit+0x6c>)
 80013b0:	f043 0302 	orr.w	r3, r3, #2
 80013b4:	6593      	str	r3, [r2, #88]	; 0x58
 80013b6:	4b13      	ldr	r3, [pc, #76]	; (8001404 <HAL_TIM_PWM_MspInit+0x6c>)
 80013b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80013c2:	e018      	b.n	80013f6 <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM4)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a0f      	ldr	r2, [pc, #60]	; (8001408 <HAL_TIM_PWM_MspInit+0x70>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d113      	bne.n	80013f6 <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013ce:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <HAL_TIM_PWM_MspInit+0x6c>)
 80013d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d2:	4a0c      	ldr	r2, [pc, #48]	; (8001404 <HAL_TIM_PWM_MspInit+0x6c>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	6593      	str	r3, [r2, #88]	; 0x58
 80013da:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <HAL_TIM_PWM_MspInit+0x6c>)
 80013dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2100      	movs	r1, #0
 80013ea:	201e      	movs	r0, #30
 80013ec:	f000 fba1 	bl	8001b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013f0:	201e      	movs	r0, #30
 80013f2:	f000 fbba 	bl	8001b6a <HAL_NVIC_EnableIRQ>
}
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40000400 	.word	0x40000400
 8001404:	40021000 	.word	0x40021000
 8001408:	40000800 	.word	0x40000800

0800140c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a1a      	ldr	r2, [pc, #104]	; (8001484 <HAL_TIM_Base_MspInit+0x78>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d114      	bne.n	8001448 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800141e:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <HAL_TIM_Base_MspInit+0x7c>)
 8001420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001422:	4a19      	ldr	r2, [pc, #100]	; (8001488 <HAL_TIM_Base_MspInit+0x7c>)
 8001424:	f043 0310 	orr.w	r3, r3, #16
 8001428:	6593      	str	r3, [r2, #88]	; 0x58
 800142a:	4b17      	ldr	r3, [pc, #92]	; (8001488 <HAL_TIM_Base_MspInit+0x7c>)
 800142c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142e:	f003 0310 	and.w	r3, r3, #16
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001436:	2200      	movs	r2, #0
 8001438:	2100      	movs	r1, #0
 800143a:	2036      	movs	r0, #54	; 0x36
 800143c:	f000 fb79 	bl	8001b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001440:	2036      	movs	r0, #54	; 0x36
 8001442:	f000 fb92 	bl	8001b6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001446:	e018      	b.n	800147a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a0f      	ldr	r2, [pc, #60]	; (800148c <HAL_TIM_Base_MspInit+0x80>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d113      	bne.n	800147a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001452:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <HAL_TIM_Base_MspInit+0x7c>)
 8001454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001456:	4a0c      	ldr	r2, [pc, #48]	; (8001488 <HAL_TIM_Base_MspInit+0x7c>)
 8001458:	f043 0320 	orr.w	r3, r3, #32
 800145c:	6593      	str	r3, [r2, #88]	; 0x58
 800145e:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <HAL_TIM_Base_MspInit+0x7c>)
 8001460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001462:	f003 0320 	and.w	r3, r3, #32
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2100      	movs	r1, #0
 800146e:	2037      	movs	r0, #55	; 0x37
 8001470:	f000 fb5f 	bl	8001b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001474:	2037      	movs	r0, #55	; 0x37
 8001476:	f000 fb78 	bl	8001b6a <HAL_NVIC_EnableIRQ>
}
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40001000 	.word	0x40001000
 8001488:	40021000 	.word	0x40021000
 800148c:	40001400 	.word	0x40001400

08001490 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a22      	ldr	r2, [pc, #136]	; (8001538 <HAL_TIM_MspPostInit+0xa8>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d11c      	bne.n	80014ec <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	4b22      	ldr	r3, [pc, #136]	; (800153c <HAL_TIM_MspPostInit+0xac>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	4a21      	ldr	r2, [pc, #132]	; (800153c <HAL_TIM_MspPostInit+0xac>)
 80014b8:	f043 0302 	orr.w	r3, r3, #2
 80014bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014be:	4b1f      	ldr	r3, [pc, #124]	; (800153c <HAL_TIM_MspPostInit+0xac>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014ca:	2310      	movs	r3, #16
 80014cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	2302      	movs	r3, #2
 80014d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014da:	2302      	movs	r3, #2
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4619      	mov	r1, r3
 80014e4:	4816      	ldr	r0, [pc, #88]	; (8001540 <HAL_TIM_MspPostInit+0xb0>)
 80014e6:	f000 fb5b 	bl	8001ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80014ea:	e020      	b.n	800152e <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM4)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a14      	ldr	r2, [pc, #80]	; (8001544 <HAL_TIM_MspPostInit+0xb4>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d11b      	bne.n	800152e <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f6:	4b11      	ldr	r3, [pc, #68]	; (800153c <HAL_TIM_MspPostInit+0xac>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fa:	4a10      	ldr	r2, [pc, #64]	; (800153c <HAL_TIM_MspPostInit+0xac>)
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <HAL_TIM_MspPostInit+0xac>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800150e:	2340      	movs	r3, #64	; 0x40
 8001510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800151e:	2302      	movs	r3, #2
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	4805      	ldr	r0, [pc, #20]	; (8001540 <HAL_TIM_MspPostInit+0xb0>)
 800152a:	f000 fb39 	bl	8001ba0 <HAL_GPIO_Init>
}
 800152e:	bf00      	nop
 8001530:	3728      	adds	r7, #40	; 0x28
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40000400 	.word	0x40000400
 800153c:	40021000 	.word	0x40021000
 8001540:	48000400 	.word	0x48000400
 8001544:	40000800 	.word	0x40000800

08001548 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b0ac      	sub	sp, #176	; 0xb0
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	2288      	movs	r2, #136	; 0x88
 8001566:	2100      	movs	r1, #0
 8001568:	4618      	mov	r0, r3
 800156a:	f004 facf 	bl	8005b0c <memset>
  if(huart->Instance==USART2)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a21      	ldr	r2, [pc, #132]	; (80015f8 <HAL_UART_MspInit+0xb0>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d13b      	bne.n	80015f0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001578:	2302      	movs	r3, #2
 800157a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800157c:	2300      	movs	r3, #0
 800157e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4618      	mov	r0, r3
 8001586:	f001 fb7b 	bl	8002c80 <HAL_RCCEx_PeriphCLKConfig>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001590:	f7ff fed8 	bl	8001344 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001594:	4b19      	ldr	r3, [pc, #100]	; (80015fc <HAL_UART_MspInit+0xb4>)
 8001596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001598:	4a18      	ldr	r2, [pc, #96]	; (80015fc <HAL_UART_MspInit+0xb4>)
 800159a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800159e:	6593      	str	r3, [r2, #88]	; 0x58
 80015a0:	4b16      	ldr	r3, [pc, #88]	; (80015fc <HAL_UART_MspInit+0xb4>)
 80015a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ac:	4b13      	ldr	r3, [pc, #76]	; (80015fc <HAL_UART_MspInit+0xb4>)
 80015ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b0:	4a12      	ldr	r2, [pc, #72]	; (80015fc <HAL_UART_MspInit+0xb4>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b8:	4b10      	ldr	r3, [pc, #64]	; (80015fc <HAL_UART_MspInit+0xb4>)
 80015ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015c4:	230c      	movs	r3, #12
 80015c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d6:	2303      	movs	r3, #3
 80015d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015dc:	2307      	movs	r3, #7
 80015de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015e6:	4619      	mov	r1, r3
 80015e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ec:	f000 fad8 	bl	8001ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015f0:	bf00      	nop
 80015f2:	37b0      	adds	r7, #176	; 0xb0
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40004400 	.word	0x40004400
 80015fc:	40021000 	.word	0x40021000

08001600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <NMI_Handler+0x4>

08001606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800160a:	e7fe      	b.n	800160a <HardFault_Handler+0x4>

0800160c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001610:	e7fe      	b.n	8001610 <MemManage_Handler+0x4>

08001612 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001616:	e7fe      	b.n	8001616 <BusFault_Handler+0x4>

08001618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800161c:	e7fe      	b.n	800161c <UsageFault_Handler+0x4>

0800161e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800164c:	f000 f976 	bl	800193c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}

08001654 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(leftBtn_Pin);
 8001658:	2008      	movs	r0, #8
 800165a:	f000 fc95 	bl	8001f88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
	...

08001664 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001668:	4802      	ldr	r0, [pc, #8]	; (8001674 <TIM4_IRQHandler+0x10>)
 800166a:	f002 fd77 	bl	800415c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	200002e4 	.word	0x200002e4

08001678 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(rightBtn_Pin);
 800167c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001680:	f000 fc82 	bl	8001f88 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001684:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001688:	f000 fc7e 	bl	8001f88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}

08001690 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001694:	4802      	ldr	r0, [pc, #8]	; (80016a0 <TIM6_DAC_IRQHandler+0x10>)
 8001696:	f002 fd61 	bl	800415c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000330 	.word	0x20000330

080016a4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80016a8:	4802      	ldr	r0, [pc, #8]	; (80016b4 <TIM7_IRQHandler+0x10>)
 80016aa:	f002 fd57 	bl	800415c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2000037c 	.word	0x2000037c

080016b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
	return 1;
 80016bc:	2301      	movs	r3, #1
}
 80016be:	4618      	mov	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <_kill>:

int _kill(int pid, int sig)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016d2:	f004 f9f1 	bl	8005ab8 <__errno>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2216      	movs	r2, #22
 80016da:	601a      	str	r2, [r3, #0]
	return -1;
 80016dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <_exit>:

void _exit (int status)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016f0:	f04f 31ff 	mov.w	r1, #4294967295
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff ffe7 	bl	80016c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80016fa:	e7fe      	b.n	80016fa <_exit+0x12>

080016fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	e00a      	b.n	8001724 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800170e:	f3af 8000 	nop.w
 8001712:	4601      	mov	r1, r0
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	60ba      	str	r2, [r7, #8]
 800171a:	b2ca      	uxtb	r2, r1
 800171c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	3301      	adds	r3, #1
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	697a      	ldr	r2, [r7, #20]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	429a      	cmp	r2, r3
 800172a:	dbf0      	blt.n	800170e <_read+0x12>
	}

return len;
 800172c:	687b      	ldr	r3, [r7, #4]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
	return -1;
 800173e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001742:	4618      	mov	r0, r3
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800175e:	605a      	str	r2, [r3, #4]
	return 0;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <_isatty>:

int _isatty(int file)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
	return 1;
 8001776:	2301      	movs	r3, #1
}
 8001778:	4618      	mov	r0, r3
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
	return 0;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a8:	4a14      	ldr	r2, [pc, #80]	; (80017fc <_sbrk+0x5c>)
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <_sbrk+0x60>)
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b4:	4b13      	ldr	r3, [pc, #76]	; (8001804 <_sbrk+0x64>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d102      	bne.n	80017c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <_sbrk+0x64>)
 80017be:	4a12      	ldr	r2, [pc, #72]	; (8001808 <_sbrk+0x68>)
 80017c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <_sbrk+0x64>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d207      	bcs.n	80017e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d0:	f004 f972 	bl	8005ab8 <__errno>
 80017d4:	4603      	mov	r3, r0
 80017d6:	220c      	movs	r2, #12
 80017d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017da:	f04f 33ff 	mov.w	r3, #4294967295
 80017de:	e009      	b.n	80017f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <_sbrk+0x64>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017e6:	4b07      	ldr	r3, [pc, #28]	; (8001804 <_sbrk+0x64>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	4a05      	ldr	r2, [pc, #20]	; (8001804 <_sbrk+0x64>)
 80017f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017f2:	68fb      	ldr	r3, [r7, #12]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20018000 	.word	0x20018000
 8001800:	00000400 	.word	0x00000400
 8001804:	2000049c 	.word	0x2000049c
 8001808:	200004b8 	.word	0x200004b8

0800180c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <SystemInit+0x20>)
 8001812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001816:	4a05      	ldr	r2, [pc, #20]	; (800182c <SystemInit+0x20>)
 8001818:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800181c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001830:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001868 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001834:	f7ff ffea 	bl	800180c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001838:	480c      	ldr	r0, [pc, #48]	; (800186c <LoopForever+0x6>)
  ldr r1, =_edata
 800183a:	490d      	ldr	r1, [pc, #52]	; (8001870 <LoopForever+0xa>)
  ldr r2, =_sidata
 800183c:	4a0d      	ldr	r2, [pc, #52]	; (8001874 <LoopForever+0xe>)
  movs r3, #0
 800183e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001840:	e002      	b.n	8001848 <LoopCopyDataInit>

08001842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001846:	3304      	adds	r3, #4

08001848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800184a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800184c:	d3f9      	bcc.n	8001842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800184e:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001850:	4c0a      	ldr	r4, [pc, #40]	; (800187c <LoopForever+0x16>)
  movs r3, #0
 8001852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001854:	e001      	b.n	800185a <LoopFillZerobss>

08001856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001858:	3204      	adds	r2, #4

0800185a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800185a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800185c:	d3fb      	bcc.n	8001856 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800185e:	f004 f931 	bl	8005ac4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001862:	f7ff fae7 	bl	8000e34 <main>

08001866 <LoopForever>:

LoopForever:
    b LoopForever
 8001866:	e7fe      	b.n	8001866 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001868:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800186c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001870:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8001874:	0800715c 	.word	0x0800715c
  ldr r2, =_sbss
 8001878:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800187c:	200004b4 	.word	0x200004b4

08001880 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001880:	e7fe      	b.n	8001880 <ADC1_2_IRQHandler>
	...

08001884 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800188e:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <HAL_Init+0x3c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a0b      	ldr	r2, [pc, #44]	; (80018c0 <HAL_Init+0x3c>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800189a:	2003      	movs	r0, #3
 800189c:	f000 f93e 	bl	8001b1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018a0:	2000      	movs	r0, #0
 80018a2:	f000 f80f 	bl	80018c4 <HAL_InitTick>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d002      	beq.n	80018b2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	71fb      	strb	r3, [r7, #7]
 80018b0:	e001      	b.n	80018b6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018b2:	f7ff fd4d 	bl	8001350 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018b6:	79fb      	ldrb	r3, [r7, #7]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40022000 	.word	0x40022000

080018c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018d0:	4b17      	ldr	r3, [pc, #92]	; (8001930 <HAL_InitTick+0x6c>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d023      	beq.n	8001920 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018d8:	4b16      	ldr	r3, [pc, #88]	; (8001934 <HAL_InitTick+0x70>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4b14      	ldr	r3, [pc, #80]	; (8001930 <HAL_InitTick+0x6c>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	4619      	mov	r1, r3
 80018e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 f949 	bl	8001b86 <HAL_SYSTICK_Config>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10f      	bne.n	800191a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b0f      	cmp	r3, #15
 80018fe:	d809      	bhi.n	8001914 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001900:	2200      	movs	r2, #0
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	f04f 30ff 	mov.w	r0, #4294967295
 8001908:	f000 f913 	bl	8001b32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800190c:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <HAL_InitTick+0x74>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e007      	b.n	8001924 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	73fb      	strb	r3, [r7, #15]
 8001918:	e004      	b.n	8001924 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	73fb      	strb	r3, [r7, #15]
 800191e:	e001      	b.n	8001924 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001924:	7bfb      	ldrb	r3, [r7, #15]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000190 	.word	0x20000190
 8001934:	20000188 	.word	0x20000188
 8001938:	2000018c 	.word	0x2000018c

0800193c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_IncTick+0x20>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	461a      	mov	r2, r3
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_IncTick+0x24>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4413      	add	r3, r2
 800194c:	4a04      	ldr	r2, [pc, #16]	; (8001960 <HAL_IncTick+0x24>)
 800194e:	6013      	str	r3, [r2, #0]
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	20000190 	.word	0x20000190
 8001960:	200004a0 	.word	0x200004a0

08001964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return uwTick;
 8001968:	4b03      	ldr	r3, [pc, #12]	; (8001978 <HAL_GetTick+0x14>)
 800196a:	681b      	ldr	r3, [r3, #0]
}
 800196c:	4618      	mov	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	200004a0 	.word	0x200004a0

0800197c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <__NVIC_SetPriorityGrouping+0x44>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001998:	4013      	ands	r3, r2
 800199a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ae:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <__NVIC_SetPriorityGrouping+0x44>)
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	60d3      	str	r3, [r2, #12]
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c8:	4b04      	ldr	r3, [pc, #16]	; (80019dc <__NVIC_GetPriorityGrouping+0x18>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	0a1b      	lsrs	r3, r3, #8
 80019ce:	f003 0307 	and.w	r3, r3, #7
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	db0b      	blt.n	8001a0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	f003 021f 	and.w	r2, r3, #31
 80019f8:	4907      	ldr	r1, [pc, #28]	; (8001a18 <__NVIC_EnableIRQ+0x38>)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	095b      	lsrs	r3, r3, #5
 8001a00:	2001      	movs	r0, #1
 8001a02:	fa00 f202 	lsl.w	r2, r0, r2
 8001a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	e000e100 	.word	0xe000e100

08001a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	6039      	str	r1, [r7, #0]
 8001a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	db0a      	blt.n	8001a46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	490c      	ldr	r1, [pc, #48]	; (8001a68 <__NVIC_SetPriority+0x4c>)
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	0112      	lsls	r2, r2, #4
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	440b      	add	r3, r1
 8001a40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a44:	e00a      	b.n	8001a5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	4908      	ldr	r1, [pc, #32]	; (8001a6c <__NVIC_SetPriority+0x50>)
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	3b04      	subs	r3, #4
 8001a54:	0112      	lsls	r2, r2, #4
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	440b      	add	r3, r1
 8001a5a:	761a      	strb	r2, [r3, #24]
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000e100 	.word	0xe000e100
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b089      	sub	sp, #36	; 0x24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f1c3 0307 	rsb	r3, r3, #7
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	bf28      	it	cs
 8001a8e:	2304      	movcs	r3, #4
 8001a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3304      	adds	r3, #4
 8001a96:	2b06      	cmp	r3, #6
 8001a98:	d902      	bls.n	8001aa0 <NVIC_EncodePriority+0x30>
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3b03      	subs	r3, #3
 8001a9e:	e000      	b.n	8001aa2 <NVIC_EncodePriority+0x32>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43da      	mvns	r2, r3
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac2:	43d9      	mvns	r1, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac8:	4313      	orrs	r3, r2
         );
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3724      	adds	r7, #36	; 0x24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ae8:	d301      	bcc.n	8001aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aea:	2301      	movs	r3, #1
 8001aec:	e00f      	b.n	8001b0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aee:	4a0a      	ldr	r2, [pc, #40]	; (8001b18 <SysTick_Config+0x40>)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001af6:	210f      	movs	r1, #15
 8001af8:	f04f 30ff 	mov.w	r0, #4294967295
 8001afc:	f7ff ff8e 	bl	8001a1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b00:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <SysTick_Config+0x40>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b06:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <SysTick_Config+0x40>)
 8001b08:	2207      	movs	r2, #7
 8001b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	e000e010 	.word	0xe000e010

08001b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff ff29 	bl	800197c <__NVIC_SetPriorityGrouping>
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b086      	sub	sp, #24
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	4603      	mov	r3, r0
 8001b3a:	60b9      	str	r1, [r7, #8]
 8001b3c:	607a      	str	r2, [r7, #4]
 8001b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b44:	f7ff ff3e 	bl	80019c4 <__NVIC_GetPriorityGrouping>
 8001b48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	6978      	ldr	r0, [r7, #20]
 8001b50:	f7ff ff8e 	bl	8001a70 <NVIC_EncodePriority>
 8001b54:	4602      	mov	r2, r0
 8001b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff5d 	bl	8001a1c <__NVIC_SetPriority>
}
 8001b62:	bf00      	nop
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	4603      	mov	r3, r0
 8001b72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff31 	bl	80019e0 <__NVIC_EnableIRQ>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff ffa2 	bl	8001ad8 <SysTick_Config>
 8001b94:	4603      	mov	r3, r0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b087      	sub	sp, #28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bae:	e17f      	b.n	8001eb0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 8171 	beq.w	8001eaa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d005      	beq.n	8001be0 <HAL_GPIO_Init+0x40>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d130      	bne.n	8001c42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	2203      	movs	r2, #3
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	68da      	ldr	r2, [r3, #12]
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c16:	2201      	movs	r2, #1
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	091b      	lsrs	r3, r3, #4
 8001c2c:	f003 0201 	and.w	r2, r3, #1
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d118      	bne.n	8001c80 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c54:	2201      	movs	r2, #1
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	08db      	lsrs	r3, r3, #3
 8001c6a:	f003 0201 	and.w	r2, r3, #1
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 0303 	and.w	r3, r3, #3
 8001c88:	2b03      	cmp	r3, #3
 8001c8a:	d017      	beq.n	8001cbc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	2203      	movs	r2, #3
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 0303 	and.w	r3, r3, #3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d123      	bne.n	8001d10 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	08da      	lsrs	r2, r3, #3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3208      	adds	r2, #8
 8001cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	220f      	movs	r2, #15
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	691a      	ldr	r2, [r3, #16]
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	08da      	lsrs	r2, r3, #3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3208      	adds	r2, #8
 8001d0a:	6939      	ldr	r1, [r7, #16]
 8001d0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	4013      	ands	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 0203 	and.w	r2, r3, #3
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f000 80ac 	beq.w	8001eaa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d52:	4b5f      	ldr	r3, [pc, #380]	; (8001ed0 <HAL_GPIO_Init+0x330>)
 8001d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d56:	4a5e      	ldr	r2, [pc, #376]	; (8001ed0 <HAL_GPIO_Init+0x330>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	6613      	str	r3, [r2, #96]	; 0x60
 8001d5e:	4b5c      	ldr	r3, [pc, #368]	; (8001ed0 <HAL_GPIO_Init+0x330>)
 8001d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d6a:	4a5a      	ldr	r2, [pc, #360]	; (8001ed4 <HAL_GPIO_Init+0x334>)
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	089b      	lsrs	r3, r3, #2
 8001d70:	3302      	adds	r3, #2
 8001d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d76:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	220f      	movs	r2, #15
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43db      	mvns	r3, r3
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d94:	d025      	beq.n	8001de2 <HAL_GPIO_Init+0x242>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a4f      	ldr	r2, [pc, #316]	; (8001ed8 <HAL_GPIO_Init+0x338>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d01f      	beq.n	8001dde <HAL_GPIO_Init+0x23e>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a4e      	ldr	r2, [pc, #312]	; (8001edc <HAL_GPIO_Init+0x33c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d019      	beq.n	8001dda <HAL_GPIO_Init+0x23a>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a4d      	ldr	r2, [pc, #308]	; (8001ee0 <HAL_GPIO_Init+0x340>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d013      	beq.n	8001dd6 <HAL_GPIO_Init+0x236>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a4c      	ldr	r2, [pc, #304]	; (8001ee4 <HAL_GPIO_Init+0x344>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d00d      	beq.n	8001dd2 <HAL_GPIO_Init+0x232>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a4b      	ldr	r2, [pc, #300]	; (8001ee8 <HAL_GPIO_Init+0x348>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d007      	beq.n	8001dce <HAL_GPIO_Init+0x22e>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a4a      	ldr	r2, [pc, #296]	; (8001eec <HAL_GPIO_Init+0x34c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d101      	bne.n	8001dca <HAL_GPIO_Init+0x22a>
 8001dc6:	2306      	movs	r3, #6
 8001dc8:	e00c      	b.n	8001de4 <HAL_GPIO_Init+0x244>
 8001dca:	2307      	movs	r3, #7
 8001dcc:	e00a      	b.n	8001de4 <HAL_GPIO_Init+0x244>
 8001dce:	2305      	movs	r3, #5
 8001dd0:	e008      	b.n	8001de4 <HAL_GPIO_Init+0x244>
 8001dd2:	2304      	movs	r3, #4
 8001dd4:	e006      	b.n	8001de4 <HAL_GPIO_Init+0x244>
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e004      	b.n	8001de4 <HAL_GPIO_Init+0x244>
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e002      	b.n	8001de4 <HAL_GPIO_Init+0x244>
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <HAL_GPIO_Init+0x244>
 8001de2:	2300      	movs	r3, #0
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	f002 0203 	and.w	r2, r2, #3
 8001dea:	0092      	lsls	r2, r2, #2
 8001dec:	4093      	lsls	r3, r2
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001df4:	4937      	ldr	r1, [pc, #220]	; (8001ed4 <HAL_GPIO_Init+0x334>)
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	089b      	lsrs	r3, r3, #2
 8001dfa:	3302      	adds	r3, #2
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e02:	4b3b      	ldr	r3, [pc, #236]	; (8001ef0 <HAL_GPIO_Init+0x350>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e26:	4a32      	ldr	r2, [pc, #200]	; (8001ef0 <HAL_GPIO_Init+0x350>)
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e2c:	4b30      	ldr	r3, [pc, #192]	; (8001ef0 <HAL_GPIO_Init+0x350>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	43db      	mvns	r3, r3
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e50:	4a27      	ldr	r2, [pc, #156]	; (8001ef0 <HAL_GPIO_Init+0x350>)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e56:	4b26      	ldr	r3, [pc, #152]	; (8001ef0 <HAL_GPIO_Init+0x350>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4013      	ands	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e7a:	4a1d      	ldr	r2, [pc, #116]	; (8001ef0 <HAL_GPIO_Init+0x350>)
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e80:	4b1b      	ldr	r3, [pc, #108]	; (8001ef0 <HAL_GPIO_Init+0x350>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ea4:	4a12      	ldr	r2, [pc, #72]	; (8001ef0 <HAL_GPIO_Init+0x350>)
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	3301      	adds	r3, #1
 8001eae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f47f ae78 	bne.w	8001bb0 <HAL_GPIO_Init+0x10>
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	bf00      	nop
 8001ec4:	371c      	adds	r7, #28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40010000 	.word	0x40010000
 8001ed8:	48000400 	.word	0x48000400
 8001edc:	48000800 	.word	0x48000800
 8001ee0:	48000c00 	.word	0x48000c00
 8001ee4:	48001000 	.word	0x48001000
 8001ee8:	48001400 	.word	0x48001400
 8001eec:	48001800 	.word	0x48001800
 8001ef0:	40010400 	.word	0x40010400

08001ef4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	887b      	ldrh	r3, [r7, #2]
 8001f06:	4013      	ands	r3, r2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d002      	beq.n	8001f12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	73fb      	strb	r3, [r7, #15]
 8001f10:	e001      	b.n	8001f16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f12:	2300      	movs	r3, #0
 8001f14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	807b      	strh	r3, [r7, #2]
 8001f30:	4613      	mov	r3, r2
 8001f32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f34:	787b      	ldrb	r3, [r7, #1]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f3a:	887a      	ldrh	r2, [r7, #2]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f40:	e002      	b.n	8001f48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f42:	887a      	ldrh	r2, [r7, #2]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	695b      	ldr	r3, [r3, #20]
 8001f64:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f66:	887a      	ldrh	r2, [r7, #2]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	041a      	lsls	r2, r3, #16
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	43d9      	mvns	r1, r3
 8001f72:	887b      	ldrh	r3, [r7, #2]
 8001f74:	400b      	ands	r3, r1
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	619a      	str	r2, [r3, #24]
}
 8001f7c:	bf00      	nop
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f92:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f94:	695a      	ldr	r2, [r3, #20]
 8001f96:	88fb      	ldrh	r3, [r7, #6]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d006      	beq.n	8001fac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f9e:	4a05      	ldr	r2, [pc, #20]	; (8001fb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fa0:	88fb      	ldrh	r3, [r7, #6]
 8001fa2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fa4:	88fb      	ldrh	r3, [r7, #6]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe ff24 	bl	8000df4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fac:	bf00      	nop
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40010400 	.word	0x40010400

08001fb8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001fbc:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40007000 	.word	0x40007000

08001fd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fe2:	d130      	bne.n	8002046 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fe4:	4b23      	ldr	r3, [pc, #140]	; (8002074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ff0:	d038      	beq.n	8002064 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ff2:	4b20      	ldr	r3, [pc, #128]	; (8002074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ffa:	4a1e      	ldr	r2, [pc, #120]	; (8002074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ffc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002000:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002002:	4b1d      	ldr	r3, [pc, #116]	; (8002078 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2232      	movs	r2, #50	; 0x32
 8002008:	fb02 f303 	mul.w	r3, r2, r3
 800200c:	4a1b      	ldr	r2, [pc, #108]	; (800207c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800200e:	fba2 2303 	umull	r2, r3, r2, r3
 8002012:	0c9b      	lsrs	r3, r3, #18
 8002014:	3301      	adds	r3, #1
 8002016:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002018:	e002      	b.n	8002020 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	3b01      	subs	r3, #1
 800201e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002020:	4b14      	ldr	r3, [pc, #80]	; (8002074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800202c:	d102      	bne.n	8002034 <HAL_PWREx_ControlVoltageScaling+0x60>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1f2      	bne.n	800201a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002034:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800203c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002040:	d110      	bne.n	8002064 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e00f      	b.n	8002066 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800204e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002052:	d007      	beq.n	8002064 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002054:	4b07      	ldr	r3, [pc, #28]	; (8002074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800205c:	4a05      	ldr	r2, [pc, #20]	; (8002074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800205e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002062:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40007000 	.word	0x40007000
 8002078:	20000188 	.word	0x20000188
 800207c:	431bde83 	.word	0x431bde83

08002080 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e3ca      	b.n	8002828 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002092:	4b97      	ldr	r3, [pc, #604]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800209c:	4b94      	ldr	r3, [pc, #592]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f003 0303 	and.w	r3, r3, #3
 80020a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 80e4 	beq.w	800227c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d007      	beq.n	80020ca <HAL_RCC_OscConfig+0x4a>
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	2b0c      	cmp	r3, #12
 80020be:	f040 808b 	bne.w	80021d8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	f040 8087 	bne.w	80021d8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020ca:	4b89      	ldr	r3, [pc, #548]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d005      	beq.n	80020e2 <HAL_RCC_OscConfig+0x62>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e3a2      	b.n	8002828 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a1a      	ldr	r2, [r3, #32]
 80020e6:	4b82      	ldr	r3, [pc, #520]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d004      	beq.n	80020fc <HAL_RCC_OscConfig+0x7c>
 80020f2:	4b7f      	ldr	r3, [pc, #508]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020fa:	e005      	b.n	8002108 <HAL_RCC_OscConfig+0x88>
 80020fc:	4b7c      	ldr	r3, [pc, #496]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80020fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002102:	091b      	lsrs	r3, r3, #4
 8002104:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002108:	4293      	cmp	r3, r2
 800210a:	d223      	bcs.n	8002154 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	4618      	mov	r0, r3
 8002112:	f000 fd55 	bl	8002bc0 <RCC_SetFlashLatencyFromMSIRange>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e383      	b.n	8002828 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002120:	4b73      	ldr	r3, [pc, #460]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a72      	ldr	r2, [pc, #456]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002126:	f043 0308 	orr.w	r3, r3, #8
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	4b70      	ldr	r3, [pc, #448]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	496d      	ldr	r1, [pc, #436]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 800213a:	4313      	orrs	r3, r2
 800213c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800213e:	4b6c      	ldr	r3, [pc, #432]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	021b      	lsls	r3, r3, #8
 800214c:	4968      	ldr	r1, [pc, #416]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 800214e:	4313      	orrs	r3, r2
 8002150:	604b      	str	r3, [r1, #4]
 8002152:	e025      	b.n	80021a0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002154:	4b66      	ldr	r3, [pc, #408]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a65      	ldr	r2, [pc, #404]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 800215a:	f043 0308 	orr.w	r3, r3, #8
 800215e:	6013      	str	r3, [r2, #0]
 8002160:	4b63      	ldr	r3, [pc, #396]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	4960      	ldr	r1, [pc, #384]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 800216e:	4313      	orrs	r3, r2
 8002170:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002172:	4b5f      	ldr	r3, [pc, #380]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	021b      	lsls	r3, r3, #8
 8002180:	495b      	ldr	r1, [pc, #364]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002182:	4313      	orrs	r3, r2
 8002184:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d109      	bne.n	80021a0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	4618      	mov	r0, r3
 8002192:	f000 fd15 	bl	8002bc0 <RCC_SetFlashLatencyFromMSIRange>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e343      	b.n	8002828 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021a0:	f000 fc4a 	bl	8002a38 <HAL_RCC_GetSysClockFreq>
 80021a4:	4602      	mov	r2, r0
 80021a6:	4b52      	ldr	r3, [pc, #328]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	091b      	lsrs	r3, r3, #4
 80021ac:	f003 030f 	and.w	r3, r3, #15
 80021b0:	4950      	ldr	r1, [pc, #320]	; (80022f4 <HAL_RCC_OscConfig+0x274>)
 80021b2:	5ccb      	ldrb	r3, [r1, r3]
 80021b4:	f003 031f 	and.w	r3, r3, #31
 80021b8:	fa22 f303 	lsr.w	r3, r2, r3
 80021bc:	4a4e      	ldr	r2, [pc, #312]	; (80022f8 <HAL_RCC_OscConfig+0x278>)
 80021be:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021c0:	4b4e      	ldr	r3, [pc, #312]	; (80022fc <HAL_RCC_OscConfig+0x27c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fb7d 	bl	80018c4 <HAL_InitTick>
 80021ca:	4603      	mov	r3, r0
 80021cc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d052      	beq.n	800227a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	e327      	b.n	8002828 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d032      	beq.n	8002246 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021e0:	4b43      	ldr	r3, [pc, #268]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a42      	ldr	r2, [pc, #264]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021ec:	f7ff fbba 	bl	8001964 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021f4:	f7ff fbb6 	bl	8001964 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e310      	b.n	8002828 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002206:	4b3a      	ldr	r3, [pc, #232]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0f0      	beq.n	80021f4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002212:	4b37      	ldr	r3, [pc, #220]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a36      	ldr	r2, [pc, #216]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002218:	f043 0308 	orr.w	r3, r3, #8
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	4b34      	ldr	r3, [pc, #208]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	4931      	ldr	r1, [pc, #196]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 800222c:	4313      	orrs	r3, r2
 800222e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002230:	4b2f      	ldr	r3, [pc, #188]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	021b      	lsls	r3, r3, #8
 800223e:	492c      	ldr	r1, [pc, #176]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002240:	4313      	orrs	r3, r2
 8002242:	604b      	str	r3, [r1, #4]
 8002244:	e01a      	b.n	800227c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002246:	4b2a      	ldr	r3, [pc, #168]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a29      	ldr	r2, [pc, #164]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 800224c:	f023 0301 	bic.w	r3, r3, #1
 8002250:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002252:	f7ff fb87 	bl	8001964 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800225a:	f7ff fb83 	bl	8001964 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e2dd      	b.n	8002828 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800226c:	4b20      	ldr	r3, [pc, #128]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1f0      	bne.n	800225a <HAL_RCC_OscConfig+0x1da>
 8002278:	e000      	b.n	800227c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800227a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b00      	cmp	r3, #0
 8002286:	d074      	beq.n	8002372 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	2b08      	cmp	r3, #8
 800228c:	d005      	beq.n	800229a <HAL_RCC_OscConfig+0x21a>
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	2b0c      	cmp	r3, #12
 8002292:	d10e      	bne.n	80022b2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	2b03      	cmp	r3, #3
 8002298:	d10b      	bne.n	80022b2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800229a:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d064      	beq.n	8002370 <HAL_RCC_OscConfig+0x2f0>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d160      	bne.n	8002370 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e2ba      	b.n	8002828 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ba:	d106      	bne.n	80022ca <HAL_RCC_OscConfig+0x24a>
 80022bc:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a0b      	ldr	r2, [pc, #44]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80022c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	e026      	b.n	8002318 <HAL_RCC_OscConfig+0x298>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022d2:	d115      	bne.n	8002300 <HAL_RCC_OscConfig+0x280>
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a05      	ldr	r2, [pc, #20]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80022da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	4b03      	ldr	r3, [pc, #12]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a02      	ldr	r2, [pc, #8]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80022e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	e014      	b.n	8002318 <HAL_RCC_OscConfig+0x298>
 80022ee:	bf00      	nop
 80022f0:	40021000 	.word	0x40021000
 80022f4:	08006eb8 	.word	0x08006eb8
 80022f8:	20000188 	.word	0x20000188
 80022fc:	2000018c 	.word	0x2000018c
 8002300:	4ba0      	ldr	r3, [pc, #640]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a9f      	ldr	r2, [pc, #636]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	4b9d      	ldr	r3, [pc, #628]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a9c      	ldr	r2, [pc, #624]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d013      	beq.n	8002348 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002320:	f7ff fb20 	bl	8001964 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002328:	f7ff fb1c 	bl	8001964 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b64      	cmp	r3, #100	; 0x64
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e276      	b.n	8002828 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800233a:	4b92      	ldr	r3, [pc, #584]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0x2a8>
 8002346:	e014      	b.n	8002372 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7ff fb0c 	bl	8001964 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002350:	f7ff fb08 	bl	8001964 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	; 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e262      	b.n	8002828 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002362:	4b88      	ldr	r3, [pc, #544]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x2d0>
 800236e:	e000      	b.n	8002372 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d060      	beq.n	8002440 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	2b04      	cmp	r3, #4
 8002382:	d005      	beq.n	8002390 <HAL_RCC_OscConfig+0x310>
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	2b0c      	cmp	r3, #12
 8002388:	d119      	bne.n	80023be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2b02      	cmp	r3, #2
 800238e:	d116      	bne.n	80023be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002390:	4b7c      	ldr	r3, [pc, #496]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_RCC_OscConfig+0x328>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e23f      	b.n	8002828 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a8:	4b76      	ldr	r3, [pc, #472]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	061b      	lsls	r3, r3, #24
 80023b6:	4973      	ldr	r1, [pc, #460]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023bc:	e040      	b.n	8002440 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d023      	beq.n	800240e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c6:	4b6f      	ldr	r3, [pc, #444]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a6e      	ldr	r2, [pc, #440]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 80023cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d2:	f7ff fac7 	bl	8001964 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023da:	f7ff fac3 	bl	8001964 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e21d      	b.n	8002828 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023ec:	4b65      	ldr	r3, [pc, #404]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0f0      	beq.n	80023da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f8:	4b62      	ldr	r3, [pc, #392]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	061b      	lsls	r3, r3, #24
 8002406:	495f      	ldr	r1, [pc, #380]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002408:	4313      	orrs	r3, r2
 800240a:	604b      	str	r3, [r1, #4]
 800240c:	e018      	b.n	8002440 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800240e:	4b5d      	ldr	r3, [pc, #372]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a5c      	ldr	r2, [pc, #368]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241a:	f7ff faa3 	bl	8001964 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002422:	f7ff fa9f 	bl	8001964 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e1f9      	b.n	8002828 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002434:	4b53      	ldr	r3, [pc, #332]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1f0      	bne.n	8002422 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b00      	cmp	r3, #0
 800244a:	d03c      	beq.n	80024c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d01c      	beq.n	800248e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002454:	4b4b      	ldr	r3, [pc, #300]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800245a:	4a4a      	ldr	r2, [pc, #296]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002464:	f7ff fa7e 	bl	8001964 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800246c:	f7ff fa7a 	bl	8001964 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e1d4      	b.n	8002828 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800247e:	4b41      	ldr	r3, [pc, #260]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002480:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0ef      	beq.n	800246c <HAL_RCC_OscConfig+0x3ec>
 800248c:	e01b      	b.n	80024c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800248e:	4b3d      	ldr	r3, [pc, #244]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002490:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002494:	4a3b      	ldr	r2, [pc, #236]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002496:	f023 0301 	bic.w	r3, r3, #1
 800249a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249e:	f7ff fa61 	bl	8001964 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a6:	f7ff fa5d 	bl	8001964 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e1b7      	b.n	8002828 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024b8:	4b32      	ldr	r3, [pc, #200]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 80024ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1ef      	bne.n	80024a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0304 	and.w	r3, r3, #4
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 80a6 	beq.w	8002620 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024d4:	2300      	movs	r3, #0
 80024d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024d8:	4b2a      	ldr	r3, [pc, #168]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 80024da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10d      	bne.n	8002500 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e4:	4b27      	ldr	r3, [pc, #156]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 80024e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e8:	4a26      	ldr	r2, [pc, #152]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 80024ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ee:	6593      	str	r3, [r2, #88]	; 0x58
 80024f0:	4b24      	ldr	r3, [pc, #144]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 80024f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024fc:	2301      	movs	r3, #1
 80024fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002500:	4b21      	ldr	r3, [pc, #132]	; (8002588 <HAL_RCC_OscConfig+0x508>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002508:	2b00      	cmp	r3, #0
 800250a:	d118      	bne.n	800253e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800250c:	4b1e      	ldr	r3, [pc, #120]	; (8002588 <HAL_RCC_OscConfig+0x508>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a1d      	ldr	r2, [pc, #116]	; (8002588 <HAL_RCC_OscConfig+0x508>)
 8002512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002516:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002518:	f7ff fa24 	bl	8001964 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002520:	f7ff fa20 	bl	8001964 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e17a      	b.n	8002828 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002532:	4b15      	ldr	r3, [pc, #84]	; (8002588 <HAL_RCC_OscConfig+0x508>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0f0      	beq.n	8002520 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d108      	bne.n	8002558 <HAL_RCC_OscConfig+0x4d8>
 8002546:	4b0f      	ldr	r3, [pc, #60]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254c:	4a0d      	ldr	r2, [pc, #52]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002556:	e029      	b.n	80025ac <HAL_RCC_OscConfig+0x52c>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	2b05      	cmp	r3, #5
 800255e:	d115      	bne.n	800258c <HAL_RCC_OscConfig+0x50c>
 8002560:	4b08      	ldr	r3, [pc, #32]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002566:	4a07      	ldr	r2, [pc, #28]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002568:	f043 0304 	orr.w	r3, r3, #4
 800256c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002570:	4b04      	ldr	r3, [pc, #16]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002576:	4a03      	ldr	r2, [pc, #12]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002580:	e014      	b.n	80025ac <HAL_RCC_OscConfig+0x52c>
 8002582:	bf00      	nop
 8002584:	40021000 	.word	0x40021000
 8002588:	40007000 	.word	0x40007000
 800258c:	4b9c      	ldr	r3, [pc, #624]	; (8002800 <HAL_RCC_OscConfig+0x780>)
 800258e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002592:	4a9b      	ldr	r2, [pc, #620]	; (8002800 <HAL_RCC_OscConfig+0x780>)
 8002594:	f023 0301 	bic.w	r3, r3, #1
 8002598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800259c:	4b98      	ldr	r3, [pc, #608]	; (8002800 <HAL_RCC_OscConfig+0x780>)
 800259e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a2:	4a97      	ldr	r2, [pc, #604]	; (8002800 <HAL_RCC_OscConfig+0x780>)
 80025a4:	f023 0304 	bic.w	r3, r3, #4
 80025a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d016      	beq.n	80025e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b4:	f7ff f9d6 	bl	8001964 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ba:	e00a      	b.n	80025d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025bc:	f7ff f9d2 	bl	8001964 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e12a      	b.n	8002828 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025d2:	4b8b      	ldr	r3, [pc, #556]	; (8002800 <HAL_RCC_OscConfig+0x780>)
 80025d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0ed      	beq.n	80025bc <HAL_RCC_OscConfig+0x53c>
 80025e0:	e015      	b.n	800260e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e2:	f7ff f9bf 	bl	8001964 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025e8:	e00a      	b.n	8002600 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ea:	f7ff f9bb 	bl	8001964 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e113      	b.n	8002828 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002600:	4b7f      	ldr	r3, [pc, #508]	; (8002800 <HAL_RCC_OscConfig+0x780>)
 8002602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1ed      	bne.n	80025ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800260e:	7ffb      	ldrb	r3, [r7, #31]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d105      	bne.n	8002620 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002614:	4b7a      	ldr	r3, [pc, #488]	; (8002800 <HAL_RCC_OscConfig+0x780>)
 8002616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002618:	4a79      	ldr	r2, [pc, #484]	; (8002800 <HAL_RCC_OscConfig+0x780>)
 800261a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800261e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 80fe 	beq.w	8002826 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262e:	2b02      	cmp	r3, #2
 8002630:	f040 80d0 	bne.w	80027d4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002634:	4b72      	ldr	r3, [pc, #456]	; (8002800 <HAL_RCC_OscConfig+0x780>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f003 0203 	and.w	r2, r3, #3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002644:	429a      	cmp	r2, r3
 8002646:	d130      	bne.n	80026aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	3b01      	subs	r3, #1
 8002654:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002656:	429a      	cmp	r2, r3
 8002658:	d127      	bne.n	80026aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002664:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002666:	429a      	cmp	r2, r3
 8002668:	d11f      	bne.n	80026aa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002674:	2a07      	cmp	r2, #7
 8002676:	bf14      	ite	ne
 8002678:	2201      	movne	r2, #1
 800267a:	2200      	moveq	r2, #0
 800267c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800267e:	4293      	cmp	r3, r2
 8002680:	d113      	bne.n	80026aa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268c:	085b      	lsrs	r3, r3, #1
 800268e:	3b01      	subs	r3, #1
 8002690:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002692:	429a      	cmp	r2, r3
 8002694:	d109      	bne.n	80026aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	085b      	lsrs	r3, r3, #1
 80026a2:	3b01      	subs	r3, #1
 80026a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d06e      	beq.n	8002788 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	2b0c      	cmp	r3, #12
 80026ae:	d069      	beq.n	8002784 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026b0:	4b53      	ldr	r3, [pc, #332]	; (8002800 <HAL_RCC_OscConfig+0x780>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d105      	bne.n	80026c8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80026bc:	4b50      	ldr	r3, [pc, #320]	; (8002800 <HAL_RCC_OscConfig+0x780>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e0ad      	b.n	8002828 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80026cc:	4b4c      	ldr	r3, [pc, #304]	; (8002800 <HAL_RCC_OscConfig+0x780>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a4b      	ldr	r2, [pc, #300]	; (8002800 <HAL_RCC_OscConfig+0x780>)
 80026d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026d6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026d8:	f7ff f944 	bl	8001964 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e0:	f7ff f940 	bl	8001964 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e09a      	b.n	8002828 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026f2:	4b43      	ldr	r3, [pc, #268]	; (8002800 <HAL_RCC_OscConfig+0x780>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026fe:	4b40      	ldr	r3, [pc, #256]	; (8002800 <HAL_RCC_OscConfig+0x780>)
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	4b40      	ldr	r3, [pc, #256]	; (8002804 <HAL_RCC_OscConfig+0x784>)
 8002704:	4013      	ands	r3, r2
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800270e:	3a01      	subs	r2, #1
 8002710:	0112      	lsls	r2, r2, #4
 8002712:	4311      	orrs	r1, r2
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002718:	0212      	lsls	r2, r2, #8
 800271a:	4311      	orrs	r1, r2
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002720:	0852      	lsrs	r2, r2, #1
 8002722:	3a01      	subs	r2, #1
 8002724:	0552      	lsls	r2, r2, #21
 8002726:	4311      	orrs	r1, r2
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800272c:	0852      	lsrs	r2, r2, #1
 800272e:	3a01      	subs	r2, #1
 8002730:	0652      	lsls	r2, r2, #25
 8002732:	4311      	orrs	r1, r2
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002738:	0912      	lsrs	r2, r2, #4
 800273a:	0452      	lsls	r2, r2, #17
 800273c:	430a      	orrs	r2, r1
 800273e:	4930      	ldr	r1, [pc, #192]	; (8002800 <HAL_RCC_OscConfig+0x780>)
 8002740:	4313      	orrs	r3, r2
 8002742:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002744:	4b2e      	ldr	r3, [pc, #184]	; (8002800 <HAL_RCC_OscConfig+0x780>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a2d      	ldr	r2, [pc, #180]	; (8002800 <HAL_RCC_OscConfig+0x780>)
 800274a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800274e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002750:	4b2b      	ldr	r3, [pc, #172]	; (8002800 <HAL_RCC_OscConfig+0x780>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	4a2a      	ldr	r2, [pc, #168]	; (8002800 <HAL_RCC_OscConfig+0x780>)
 8002756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800275a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800275c:	f7ff f902 	bl	8001964 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002764:	f7ff f8fe 	bl	8001964 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e058      	b.n	8002828 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002776:	4b22      	ldr	r3, [pc, #136]	; (8002800 <HAL_RCC_OscConfig+0x780>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0f0      	beq.n	8002764 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002782:	e050      	b.n	8002826 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e04f      	b.n	8002828 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002788:	4b1d      	ldr	r3, [pc, #116]	; (8002800 <HAL_RCC_OscConfig+0x780>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d148      	bne.n	8002826 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002794:	4b1a      	ldr	r3, [pc, #104]	; (8002800 <HAL_RCC_OscConfig+0x780>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a19      	ldr	r2, [pc, #100]	; (8002800 <HAL_RCC_OscConfig+0x780>)
 800279a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800279e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027a0:	4b17      	ldr	r3, [pc, #92]	; (8002800 <HAL_RCC_OscConfig+0x780>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	4a16      	ldr	r2, [pc, #88]	; (8002800 <HAL_RCC_OscConfig+0x780>)
 80027a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027ac:	f7ff f8da 	bl	8001964 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b4:	f7ff f8d6 	bl	8001964 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e030      	b.n	8002828 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027c6:	4b0e      	ldr	r3, [pc, #56]	; (8002800 <HAL_RCC_OscConfig+0x780>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0f0      	beq.n	80027b4 <HAL_RCC_OscConfig+0x734>
 80027d2:	e028      	b.n	8002826 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	2b0c      	cmp	r3, #12
 80027d8:	d023      	beq.n	8002822 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027da:	4b09      	ldr	r3, [pc, #36]	; (8002800 <HAL_RCC_OscConfig+0x780>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a08      	ldr	r2, [pc, #32]	; (8002800 <HAL_RCC_OscConfig+0x780>)
 80027e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e6:	f7ff f8bd 	bl	8001964 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027ec:	e00c      	b.n	8002808 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ee:	f7ff f8b9 	bl	8001964 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d905      	bls.n	8002808 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e013      	b.n	8002828 <HAL_RCC_OscConfig+0x7a8>
 8002800:	40021000 	.word	0x40021000
 8002804:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002808:	4b09      	ldr	r3, [pc, #36]	; (8002830 <HAL_RCC_OscConfig+0x7b0>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1ec      	bne.n	80027ee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002814:	4b06      	ldr	r3, [pc, #24]	; (8002830 <HAL_RCC_OscConfig+0x7b0>)
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	4905      	ldr	r1, [pc, #20]	; (8002830 <HAL_RCC_OscConfig+0x7b0>)
 800281a:	4b06      	ldr	r3, [pc, #24]	; (8002834 <HAL_RCC_OscConfig+0x7b4>)
 800281c:	4013      	ands	r3, r2
 800281e:	60cb      	str	r3, [r1, #12]
 8002820:	e001      	b.n	8002826 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3720      	adds	r7, #32
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40021000 	.word	0x40021000
 8002834:	feeefffc 	.word	0xfeeefffc

08002838 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e0e7      	b.n	8002a1c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800284c:	4b75      	ldr	r3, [pc, #468]	; (8002a24 <HAL_RCC_ClockConfig+0x1ec>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	d910      	bls.n	800287c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285a:	4b72      	ldr	r3, [pc, #456]	; (8002a24 <HAL_RCC_ClockConfig+0x1ec>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f023 0207 	bic.w	r2, r3, #7
 8002862:	4970      	ldr	r1, [pc, #448]	; (8002a24 <HAL_RCC_ClockConfig+0x1ec>)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	4313      	orrs	r3, r2
 8002868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800286a:	4b6e      	ldr	r3, [pc, #440]	; (8002a24 <HAL_RCC_ClockConfig+0x1ec>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	429a      	cmp	r2, r3
 8002876:	d001      	beq.n	800287c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e0cf      	b.n	8002a1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d010      	beq.n	80028aa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	4b66      	ldr	r3, [pc, #408]	; (8002a28 <HAL_RCC_ClockConfig+0x1f0>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002894:	429a      	cmp	r2, r3
 8002896:	d908      	bls.n	80028aa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002898:	4b63      	ldr	r3, [pc, #396]	; (8002a28 <HAL_RCC_ClockConfig+0x1f0>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	4960      	ldr	r1, [pc, #384]	; (8002a28 <HAL_RCC_ClockConfig+0x1f0>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d04c      	beq.n	8002950 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d107      	bne.n	80028ce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028be:	4b5a      	ldr	r3, [pc, #360]	; (8002a28 <HAL_RCC_ClockConfig+0x1f0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d121      	bne.n	800290e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e0a6      	b.n	8002a1c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d107      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028d6:	4b54      	ldr	r3, [pc, #336]	; (8002a28 <HAL_RCC_ClockConfig+0x1f0>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d115      	bne.n	800290e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e09a      	b.n	8002a1c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d107      	bne.n	80028fe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028ee:	4b4e      	ldr	r3, [pc, #312]	; (8002a28 <HAL_RCC_ClockConfig+0x1f0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d109      	bne.n	800290e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e08e      	b.n	8002a1c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028fe:	4b4a      	ldr	r3, [pc, #296]	; (8002a28 <HAL_RCC_ClockConfig+0x1f0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e086      	b.n	8002a1c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800290e:	4b46      	ldr	r3, [pc, #280]	; (8002a28 <HAL_RCC_ClockConfig+0x1f0>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f023 0203 	bic.w	r2, r3, #3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	4943      	ldr	r1, [pc, #268]	; (8002a28 <HAL_RCC_ClockConfig+0x1f0>)
 800291c:	4313      	orrs	r3, r2
 800291e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002920:	f7ff f820 	bl	8001964 <HAL_GetTick>
 8002924:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002926:	e00a      	b.n	800293e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002928:	f7ff f81c 	bl	8001964 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	f241 3288 	movw	r2, #5000	; 0x1388
 8002936:	4293      	cmp	r3, r2
 8002938:	d901      	bls.n	800293e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e06e      	b.n	8002a1c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293e:	4b3a      	ldr	r3, [pc, #232]	; (8002a28 <HAL_RCC_ClockConfig+0x1f0>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 020c 	and.w	r2, r3, #12
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	429a      	cmp	r2, r3
 800294e:	d1eb      	bne.n	8002928 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d010      	beq.n	800297e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	4b31      	ldr	r3, [pc, #196]	; (8002a28 <HAL_RCC_ClockConfig+0x1f0>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002968:	429a      	cmp	r2, r3
 800296a:	d208      	bcs.n	800297e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800296c:	4b2e      	ldr	r3, [pc, #184]	; (8002a28 <HAL_RCC_ClockConfig+0x1f0>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	492b      	ldr	r1, [pc, #172]	; (8002a28 <HAL_RCC_ClockConfig+0x1f0>)
 800297a:	4313      	orrs	r3, r2
 800297c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800297e:	4b29      	ldr	r3, [pc, #164]	; (8002a24 <HAL_RCC_ClockConfig+0x1ec>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d210      	bcs.n	80029ae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298c:	4b25      	ldr	r3, [pc, #148]	; (8002a24 <HAL_RCC_ClockConfig+0x1ec>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f023 0207 	bic.w	r2, r3, #7
 8002994:	4923      	ldr	r1, [pc, #140]	; (8002a24 <HAL_RCC_ClockConfig+0x1ec>)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	4313      	orrs	r3, r2
 800299a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800299c:	4b21      	ldr	r3, [pc, #132]	; (8002a24 <HAL_RCC_ClockConfig+0x1ec>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d001      	beq.n	80029ae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e036      	b.n	8002a1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0304 	and.w	r3, r3, #4
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d008      	beq.n	80029cc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029ba:	4b1b      	ldr	r3, [pc, #108]	; (8002a28 <HAL_RCC_ClockConfig+0x1f0>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	4918      	ldr	r1, [pc, #96]	; (8002a28 <HAL_RCC_ClockConfig+0x1f0>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0308 	and.w	r3, r3, #8
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d009      	beq.n	80029ec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029d8:	4b13      	ldr	r3, [pc, #76]	; (8002a28 <HAL_RCC_ClockConfig+0x1f0>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4910      	ldr	r1, [pc, #64]	; (8002a28 <HAL_RCC_ClockConfig+0x1f0>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029ec:	f000 f824 	bl	8002a38 <HAL_RCC_GetSysClockFreq>
 80029f0:	4602      	mov	r2, r0
 80029f2:	4b0d      	ldr	r3, [pc, #52]	; (8002a28 <HAL_RCC_ClockConfig+0x1f0>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	091b      	lsrs	r3, r3, #4
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	490b      	ldr	r1, [pc, #44]	; (8002a2c <HAL_RCC_ClockConfig+0x1f4>)
 80029fe:	5ccb      	ldrb	r3, [r1, r3]
 8002a00:	f003 031f 	and.w	r3, r3, #31
 8002a04:	fa22 f303 	lsr.w	r3, r2, r3
 8002a08:	4a09      	ldr	r2, [pc, #36]	; (8002a30 <HAL_RCC_ClockConfig+0x1f8>)
 8002a0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a0c:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <HAL_RCC_ClockConfig+0x1fc>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fe ff57 	bl	80018c4 <HAL_InitTick>
 8002a16:	4603      	mov	r3, r0
 8002a18:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a1a:	7afb      	ldrb	r3, [r7, #11]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40022000 	.word	0x40022000
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	08006eb8 	.word	0x08006eb8
 8002a30:	20000188 	.word	0x20000188
 8002a34:	2000018c 	.word	0x2000018c

08002a38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b089      	sub	sp, #36	; 0x24
 8002a3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61fb      	str	r3, [r7, #28]
 8002a42:	2300      	movs	r3, #0
 8002a44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a46:	4b3e      	ldr	r3, [pc, #248]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
 8002a4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a50:	4b3b      	ldr	r3, [pc, #236]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f003 0303 	and.w	r3, r3, #3
 8002a58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d005      	beq.n	8002a6c <HAL_RCC_GetSysClockFreq+0x34>
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	2b0c      	cmp	r3, #12
 8002a64:	d121      	bne.n	8002aaa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d11e      	bne.n	8002aaa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a6c:	4b34      	ldr	r3, [pc, #208]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0308 	and.w	r3, r3, #8
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d107      	bne.n	8002a88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a78:	4b31      	ldr	r3, [pc, #196]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a7e:	0a1b      	lsrs	r3, r3, #8
 8002a80:	f003 030f 	and.w	r3, r3, #15
 8002a84:	61fb      	str	r3, [r7, #28]
 8002a86:	e005      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a88:	4b2d      	ldr	r3, [pc, #180]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	091b      	lsrs	r3, r3, #4
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a94:	4a2b      	ldr	r2, [pc, #172]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10d      	bne.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002aa8:	e00a      	b.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d102      	bne.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ab0:	4b25      	ldr	r3, [pc, #148]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ab2:	61bb      	str	r3, [r7, #24]
 8002ab4:	e004      	b.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d101      	bne.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002abc:	4b23      	ldr	r3, [pc, #140]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x114>)
 8002abe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	2b0c      	cmp	r3, #12
 8002ac4:	d134      	bne.n	8002b30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ac6:	4b1e      	ldr	r3, [pc, #120]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d003      	beq.n	8002ade <HAL_RCC_GetSysClockFreq+0xa6>
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d003      	beq.n	8002ae4 <HAL_RCC_GetSysClockFreq+0xac>
 8002adc:	e005      	b.n	8002aea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ade:	4b1a      	ldr	r3, [pc, #104]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ae0:	617b      	str	r3, [r7, #20]
      break;
 8002ae2:	e005      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ae4:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x114>)
 8002ae6:	617b      	str	r3, [r7, #20]
      break;
 8002ae8:	e002      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	617b      	str	r3, [r7, #20]
      break;
 8002aee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002af0:	4b13      	ldr	r3, [pc, #76]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	091b      	lsrs	r3, r3, #4
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	3301      	adds	r3, #1
 8002afc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002afe:	4b10      	ldr	r3, [pc, #64]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	0a1b      	lsrs	r3, r3, #8
 8002b04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	fb03 f202 	mul.w	r2, r3, r2
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b16:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	0e5b      	lsrs	r3, r3, #25
 8002b1c:	f003 0303 	and.w	r3, r3, #3
 8002b20:	3301      	adds	r3, #1
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b30:	69bb      	ldr	r3, [r7, #24]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3724      	adds	r7, #36	; 0x24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40021000 	.word	0x40021000
 8002b44:	08006ed0 	.word	0x08006ed0
 8002b48:	00f42400 	.word	0x00f42400
 8002b4c:	007a1200 	.word	0x007a1200

08002b50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b54:	4b03      	ldr	r3, [pc, #12]	; (8002b64 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b56:	681b      	ldr	r3, [r3, #0]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	20000188 	.word	0x20000188

08002b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b6c:	f7ff fff0 	bl	8002b50 <HAL_RCC_GetHCLKFreq>
 8002b70:	4602      	mov	r2, r0
 8002b72:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	0a1b      	lsrs	r3, r3, #8
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	4904      	ldr	r1, [pc, #16]	; (8002b90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b7e:	5ccb      	ldrb	r3, [r1, r3]
 8002b80:	f003 031f 	and.w	r3, r3, #31
 8002b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	08006ec8 	.word	0x08006ec8

08002b94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b98:	f7ff ffda 	bl	8002b50 <HAL_RCC_GetHCLKFreq>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	0adb      	lsrs	r3, r3, #11
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	4904      	ldr	r1, [pc, #16]	; (8002bbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002baa:	5ccb      	ldrb	r3, [r1, r3]
 8002bac:	f003 031f 	and.w	r3, r3, #31
 8002bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	08006ec8 	.word	0x08006ec8

08002bc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002bc8:	2300      	movs	r3, #0
 8002bca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002bcc:	4b2a      	ldr	r3, [pc, #168]	; (8002c78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002bd8:	f7ff f9ee 	bl	8001fb8 <HAL_PWREx_GetVoltageRange>
 8002bdc:	6178      	str	r0, [r7, #20]
 8002bde:	e014      	b.n	8002c0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002be0:	4b25      	ldr	r3, [pc, #148]	; (8002c78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be4:	4a24      	ldr	r2, [pc, #144]	; (8002c78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bea:	6593      	str	r3, [r2, #88]	; 0x58
 8002bec:	4b22      	ldr	r3, [pc, #136]	; (8002c78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002bf8:	f7ff f9de 	bl	8001fb8 <HAL_PWREx_GetVoltageRange>
 8002bfc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002bfe:	4b1e      	ldr	r3, [pc, #120]	; (8002c78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c02:	4a1d      	ldr	r2, [pc, #116]	; (8002c78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c08:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c10:	d10b      	bne.n	8002c2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b80      	cmp	r3, #128	; 0x80
 8002c16:	d919      	bls.n	8002c4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2ba0      	cmp	r3, #160	; 0xa0
 8002c1c:	d902      	bls.n	8002c24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c1e:	2302      	movs	r3, #2
 8002c20:	613b      	str	r3, [r7, #16]
 8002c22:	e013      	b.n	8002c4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c24:	2301      	movs	r3, #1
 8002c26:	613b      	str	r3, [r7, #16]
 8002c28:	e010      	b.n	8002c4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b80      	cmp	r3, #128	; 0x80
 8002c2e:	d902      	bls.n	8002c36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c30:	2303      	movs	r3, #3
 8002c32:	613b      	str	r3, [r7, #16]
 8002c34:	e00a      	b.n	8002c4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b80      	cmp	r3, #128	; 0x80
 8002c3a:	d102      	bne.n	8002c42 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	613b      	str	r3, [r7, #16]
 8002c40:	e004      	b.n	8002c4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b70      	cmp	r3, #112	; 0x70
 8002c46:	d101      	bne.n	8002c4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c48:	2301      	movs	r3, #1
 8002c4a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f023 0207 	bic.w	r2, r3, #7
 8002c54:	4909      	ldr	r1, [pc, #36]	; (8002c7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c5c:	4b07      	ldr	r3, [pc, #28]	; (8002c7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d001      	beq.n	8002c6e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e000      	b.n	8002c70 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40022000 	.word	0x40022000

08002c80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c88:	2300      	movs	r3, #0
 8002c8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d041      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ca0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ca4:	d02a      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002ca6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002caa:	d824      	bhi.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002cac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cb0:	d008      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002cb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cb6:	d81e      	bhi.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00a      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002cbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cc0:	d010      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002cc2:	e018      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002cc4:	4b86      	ldr	r3, [pc, #536]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	4a85      	ldr	r2, [pc, #532]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cd0:	e015      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 fabb 	bl	8003254 <RCCEx_PLLSAI1_Config>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ce2:	e00c      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3320      	adds	r3, #32
 8002ce8:	2100      	movs	r1, #0
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 fba6 	bl	800343c <RCCEx_PLLSAI2_Config>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cf4:	e003      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	74fb      	strb	r3, [r7, #19]
      break;
 8002cfa:	e000      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002cfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cfe:	7cfb      	ldrb	r3, [r7, #19]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10b      	bne.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d04:	4b76      	ldr	r3, [pc, #472]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d12:	4973      	ldr	r1, [pc, #460]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d1a:	e001      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d1c:	7cfb      	ldrb	r3, [r7, #19]
 8002d1e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d041      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d34:	d02a      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002d36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d3a:	d824      	bhi.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d40:	d008      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d46:	d81e      	bhi.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00a      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d50:	d010      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d52:	e018      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d54:	4b62      	ldr	r3, [pc, #392]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	4a61      	ldr	r2, [pc, #388]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d5e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d60:	e015      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3304      	adds	r3, #4
 8002d66:	2100      	movs	r1, #0
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 fa73 	bl	8003254 <RCCEx_PLLSAI1_Config>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d72:	e00c      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3320      	adds	r3, #32
 8002d78:	2100      	movs	r1, #0
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 fb5e 	bl	800343c <RCCEx_PLLSAI2_Config>
 8002d80:	4603      	mov	r3, r0
 8002d82:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d84:	e003      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	74fb      	strb	r3, [r7, #19]
      break;
 8002d8a:	e000      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002d8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d8e:	7cfb      	ldrb	r3, [r7, #19]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10b      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d94:	4b52      	ldr	r3, [pc, #328]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002da2:	494f      	ldr	r1, [pc, #316]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002daa:	e001      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dac:	7cfb      	ldrb	r3, [r7, #19]
 8002dae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 80a0 	beq.w	8002efe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002dc2:	4b47      	ldr	r3, [pc, #284]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00d      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd8:	4b41      	ldr	r3, [pc, #260]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ddc:	4a40      	ldr	r2, [pc, #256]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de2:	6593      	str	r3, [r2, #88]	; 0x58
 8002de4:	4b3e      	ldr	r3, [pc, #248]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dec:	60bb      	str	r3, [r7, #8]
 8002dee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002df0:	2301      	movs	r3, #1
 8002df2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002df4:	4b3b      	ldr	r3, [pc, #236]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a3a      	ldr	r2, [pc, #232]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dfe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e00:	f7fe fdb0 	bl	8001964 <HAL_GetTick>
 8002e04:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e06:	e009      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e08:	f7fe fdac 	bl	8001964 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d902      	bls.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	74fb      	strb	r3, [r7, #19]
        break;
 8002e1a:	e005      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e1c:	4b31      	ldr	r3, [pc, #196]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0ef      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002e28:	7cfb      	ldrb	r3, [r7, #19]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d15c      	bne.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e2e:	4b2c      	ldr	r3, [pc, #176]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e38:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d01f      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d019      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e4c:	4b24      	ldr	r3, [pc, #144]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e58:	4b21      	ldr	r3, [pc, #132]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5e:	4a20      	ldr	r2, [pc, #128]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e68:	4b1d      	ldr	r3, [pc, #116]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6e:	4a1c      	ldr	r2, [pc, #112]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e78:	4a19      	ldr	r2, [pc, #100]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d016      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8a:	f7fe fd6b 	bl	8001964 <HAL_GetTick>
 8002e8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e90:	e00b      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e92:	f7fe fd67 	bl	8001964 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d902      	bls.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	74fb      	strb	r3, [r7, #19]
            break;
 8002ea8:	e006      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0ec      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002eb8:	7cfb      	ldrb	r3, [r7, #19]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10c      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ebe:	4b08      	ldr	r3, [pc, #32]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ece:	4904      	ldr	r1, [pc, #16]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ed6:	e009      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ed8:	7cfb      	ldrb	r3, [r7, #19]
 8002eda:	74bb      	strb	r3, [r7, #18]
 8002edc:	e006      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002ede:	bf00      	nop
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee8:	7cfb      	ldrb	r3, [r7, #19]
 8002eea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eec:	7c7b      	ldrb	r3, [r7, #17]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d105      	bne.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef2:	4b9e      	ldr	r3, [pc, #632]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef6:	4a9d      	ldr	r2, [pc, #628]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002efc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00a      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f0a:	4b98      	ldr	r3, [pc, #608]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f10:	f023 0203 	bic.w	r2, r3, #3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f18:	4994      	ldr	r1, [pc, #592]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00a      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f2c:	4b8f      	ldr	r3, [pc, #572]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f32:	f023 020c 	bic.w	r2, r3, #12
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3a:	498c      	ldr	r1, [pc, #560]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0304 	and.w	r3, r3, #4
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00a      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f4e:	4b87      	ldr	r3, [pc, #540]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	4983      	ldr	r1, [pc, #524]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00a      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f70:	4b7e      	ldr	r3, [pc, #504]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7e:	497b      	ldr	r1, [pc, #492]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0310 	and.w	r3, r3, #16
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00a      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f92:	4b76      	ldr	r3, [pc, #472]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fa0:	4972      	ldr	r1, [pc, #456]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0320 	and.w	r3, r3, #32
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00a      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fb4:	4b6d      	ldr	r3, [pc, #436]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc2:	496a      	ldr	r1, [pc, #424]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00a      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fd6:	4b65      	ldr	r3, [pc, #404]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fdc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe4:	4961      	ldr	r1, [pc, #388]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00a      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ff8:	4b5c      	ldr	r3, [pc, #368]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003006:	4959      	ldr	r1, [pc, #356]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003008:	4313      	orrs	r3, r2
 800300a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800301a:	4b54      	ldr	r3, [pc, #336]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800301c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003020:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003028:	4950      	ldr	r1, [pc, #320]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800302a:	4313      	orrs	r3, r2
 800302c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00a      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800303c:	4b4b      	ldr	r3, [pc, #300]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800303e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003042:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304a:	4948      	ldr	r1, [pc, #288]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800304c:	4313      	orrs	r3, r2
 800304e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800305e:	4b43      	ldr	r3, [pc, #268]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003064:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306c:	493f      	ldr	r1, [pc, #252]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800306e:	4313      	orrs	r3, r2
 8003070:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d028      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003080:	4b3a      	ldr	r3, [pc, #232]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003086:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800308e:	4937      	ldr	r1, [pc, #220]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003090:	4313      	orrs	r3, r2
 8003092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800309a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800309e:	d106      	bne.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030a0:	4b32      	ldr	r3, [pc, #200]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	4a31      	ldr	r2, [pc, #196]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030aa:	60d3      	str	r3, [r2, #12]
 80030ac:	e011      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030b6:	d10c      	bne.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3304      	adds	r3, #4
 80030bc:	2101      	movs	r1, #1
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 f8c8 	bl	8003254 <RCCEx_PLLSAI1_Config>
 80030c4:	4603      	mov	r3, r0
 80030c6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80030c8:	7cfb      	ldrb	r3, [r7, #19]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80030ce:	7cfb      	ldrb	r3, [r7, #19]
 80030d0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d028      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80030de:	4b23      	ldr	r3, [pc, #140]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ec:	491f      	ldr	r1, [pc, #124]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030fc:	d106      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030fe:	4b1b      	ldr	r3, [pc, #108]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	4a1a      	ldr	r2, [pc, #104]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003104:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003108:	60d3      	str	r3, [r2, #12]
 800310a:	e011      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003110:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003114:	d10c      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3304      	adds	r3, #4
 800311a:	2101      	movs	r1, #1
 800311c:	4618      	mov	r0, r3
 800311e:	f000 f899 	bl	8003254 <RCCEx_PLLSAI1_Config>
 8003122:	4603      	mov	r3, r0
 8003124:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003126:	7cfb      	ldrb	r3, [r7, #19]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800312c:	7cfb      	ldrb	r3, [r7, #19]
 800312e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d02b      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800313c:	4b0b      	ldr	r3, [pc, #44]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800313e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003142:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800314a:	4908      	ldr	r1, [pc, #32]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800314c:	4313      	orrs	r3, r2
 800314e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003156:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800315a:	d109      	bne.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800315c:	4b03      	ldr	r3, [pc, #12]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4a02      	ldr	r2, [pc, #8]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003166:	60d3      	str	r3, [r2, #12]
 8003168:	e014      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800316a:	bf00      	nop
 800316c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003174:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003178:	d10c      	bne.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	3304      	adds	r3, #4
 800317e:	2101      	movs	r1, #1
 8003180:	4618      	mov	r0, r3
 8003182:	f000 f867 	bl	8003254 <RCCEx_PLLSAI1_Config>
 8003186:	4603      	mov	r3, r0
 8003188:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800318a:	7cfb      	ldrb	r3, [r7, #19]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003190:	7cfb      	ldrb	r3, [r7, #19]
 8003192:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d02f      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031a0:	4b2b      	ldr	r3, [pc, #172]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031ae:	4928      	ldr	r1, [pc, #160]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031be:	d10d      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3304      	adds	r3, #4
 80031c4:	2102      	movs	r1, #2
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 f844 	bl	8003254 <RCCEx_PLLSAI1_Config>
 80031cc:	4603      	mov	r3, r0
 80031ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031d0:	7cfb      	ldrb	r3, [r7, #19]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d014      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80031d6:	7cfb      	ldrb	r3, [r7, #19]
 80031d8:	74bb      	strb	r3, [r7, #18]
 80031da:	e011      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031e4:	d10c      	bne.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3320      	adds	r3, #32
 80031ea:	2102      	movs	r1, #2
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 f925 	bl	800343c <RCCEx_PLLSAI2_Config>
 80031f2:	4603      	mov	r3, r0
 80031f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031f6:	7cfb      	ldrb	r3, [r7, #19]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80031fc:	7cfb      	ldrb	r3, [r7, #19]
 80031fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00a      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800320c:	4b10      	ldr	r3, [pc, #64]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800320e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003212:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800321a:	490d      	ldr	r1, [pc, #52]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800321c:	4313      	orrs	r3, r2
 800321e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00b      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800322e:	4b08      	ldr	r3, [pc, #32]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003234:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800323e:	4904      	ldr	r1, [pc, #16]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003240:	4313      	orrs	r3, r2
 8003242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003246:	7cbb      	ldrb	r3, [r7, #18]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40021000 	.word	0x40021000

08003254 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003262:	4b75      	ldr	r3, [pc, #468]	; (8003438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d018      	beq.n	80032a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800326e:	4b72      	ldr	r3, [pc, #456]	; (8003438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	f003 0203 	and.w	r2, r3, #3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d10d      	bne.n	800329a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
       ||
 8003282:	2b00      	cmp	r3, #0
 8003284:	d009      	beq.n	800329a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003286:	4b6c      	ldr	r3, [pc, #432]	; (8003438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	091b      	lsrs	r3, r3, #4
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
       ||
 8003296:	429a      	cmp	r2, r3
 8003298:	d047      	beq.n	800332a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	73fb      	strb	r3, [r7, #15]
 800329e:	e044      	b.n	800332a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b03      	cmp	r3, #3
 80032a6:	d018      	beq.n	80032da <RCCEx_PLLSAI1_Config+0x86>
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	d825      	bhi.n	80032f8 <RCCEx_PLLSAI1_Config+0xa4>
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d002      	beq.n	80032b6 <RCCEx_PLLSAI1_Config+0x62>
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d009      	beq.n	80032c8 <RCCEx_PLLSAI1_Config+0x74>
 80032b4:	e020      	b.n	80032f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032b6:	4b60      	ldr	r3, [pc, #384]	; (8003438 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d11d      	bne.n	80032fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032c6:	e01a      	b.n	80032fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032c8:	4b5b      	ldr	r3, [pc, #364]	; (8003438 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d116      	bne.n	8003302 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032d8:	e013      	b.n	8003302 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032da:	4b57      	ldr	r3, [pc, #348]	; (8003438 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10f      	bne.n	8003306 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032e6:	4b54      	ldr	r3, [pc, #336]	; (8003438 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d109      	bne.n	8003306 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032f6:	e006      	b.n	8003306 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	73fb      	strb	r3, [r7, #15]
      break;
 80032fc:	e004      	b.n	8003308 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032fe:	bf00      	nop
 8003300:	e002      	b.n	8003308 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003302:	bf00      	nop
 8003304:	e000      	b.n	8003308 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003306:	bf00      	nop
    }

    if(status == HAL_OK)
 8003308:	7bfb      	ldrb	r3, [r7, #15]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10d      	bne.n	800332a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800330e:	4b4a      	ldr	r3, [pc, #296]	; (8003438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6819      	ldr	r1, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	3b01      	subs	r3, #1
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	430b      	orrs	r3, r1
 8003324:	4944      	ldr	r1, [pc, #272]	; (8003438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003326:	4313      	orrs	r3, r2
 8003328:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800332a:	7bfb      	ldrb	r3, [r7, #15]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d17d      	bne.n	800342c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003330:	4b41      	ldr	r3, [pc, #260]	; (8003438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a40      	ldr	r2, [pc, #256]	; (8003438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003336:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800333a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800333c:	f7fe fb12 	bl	8001964 <HAL_GetTick>
 8003340:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003342:	e009      	b.n	8003358 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003344:	f7fe fb0e 	bl	8001964 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d902      	bls.n	8003358 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	73fb      	strb	r3, [r7, #15]
        break;
 8003356:	e005      	b.n	8003364 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003358:	4b37      	ldr	r3, [pc, #220]	; (8003438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1ef      	bne.n	8003344 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003364:	7bfb      	ldrb	r3, [r7, #15]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d160      	bne.n	800342c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d111      	bne.n	8003394 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003370:	4b31      	ldr	r3, [pc, #196]	; (8003438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003378:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6892      	ldr	r2, [r2, #8]
 8003380:	0211      	lsls	r1, r2, #8
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	68d2      	ldr	r2, [r2, #12]
 8003386:	0912      	lsrs	r2, r2, #4
 8003388:	0452      	lsls	r2, r2, #17
 800338a:	430a      	orrs	r2, r1
 800338c:	492a      	ldr	r1, [pc, #168]	; (8003438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800338e:	4313      	orrs	r3, r2
 8003390:	610b      	str	r3, [r1, #16]
 8003392:	e027      	b.n	80033e4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d112      	bne.n	80033c0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800339a:	4b27      	ldr	r3, [pc, #156]	; (8003438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80033a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6892      	ldr	r2, [r2, #8]
 80033aa:	0211      	lsls	r1, r2, #8
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6912      	ldr	r2, [r2, #16]
 80033b0:	0852      	lsrs	r2, r2, #1
 80033b2:	3a01      	subs	r2, #1
 80033b4:	0552      	lsls	r2, r2, #21
 80033b6:	430a      	orrs	r2, r1
 80033b8:	491f      	ldr	r1, [pc, #124]	; (8003438 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	610b      	str	r3, [r1, #16]
 80033be:	e011      	b.n	80033e4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033c0:	4b1d      	ldr	r3, [pc, #116]	; (8003438 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80033c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6892      	ldr	r2, [r2, #8]
 80033d0:	0211      	lsls	r1, r2, #8
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6952      	ldr	r2, [r2, #20]
 80033d6:	0852      	lsrs	r2, r2, #1
 80033d8:	3a01      	subs	r2, #1
 80033da:	0652      	lsls	r2, r2, #25
 80033dc:	430a      	orrs	r2, r1
 80033de:	4916      	ldr	r1, [pc, #88]	; (8003438 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80033e4:	4b14      	ldr	r3, [pc, #80]	; (8003438 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a13      	ldr	r2, [pc, #76]	; (8003438 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f0:	f7fe fab8 	bl	8001964 <HAL_GetTick>
 80033f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033f6:	e009      	b.n	800340c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033f8:	f7fe fab4 	bl	8001964 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d902      	bls.n	800340c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	73fb      	strb	r3, [r7, #15]
          break;
 800340a:	e005      	b.n	8003418 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800340c:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0ef      	beq.n	80033f8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003418:	7bfb      	ldrb	r3, [r7, #15]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d106      	bne.n	800342c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800341e:	4b06      	ldr	r3, [pc, #24]	; (8003438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003420:	691a      	ldr	r2, [r3, #16]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	4904      	ldr	r1, [pc, #16]	; (8003438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003428:	4313      	orrs	r3, r2
 800342a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800342c:	7bfb      	ldrb	r3, [r7, #15]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40021000 	.word	0x40021000

0800343c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003446:	2300      	movs	r3, #0
 8003448:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800344a:	4b6a      	ldr	r3, [pc, #424]	; (80035f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d018      	beq.n	8003488 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003456:	4b67      	ldr	r3, [pc, #412]	; (80035f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	f003 0203 	and.w	r2, r3, #3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d10d      	bne.n	8003482 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
       ||
 800346a:	2b00      	cmp	r3, #0
 800346c:	d009      	beq.n	8003482 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800346e:	4b61      	ldr	r3, [pc, #388]	; (80035f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	091b      	lsrs	r3, r3, #4
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	1c5a      	adds	r2, r3, #1
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
       ||
 800347e:	429a      	cmp	r2, r3
 8003480:	d047      	beq.n	8003512 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	73fb      	strb	r3, [r7, #15]
 8003486:	e044      	b.n	8003512 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2b03      	cmp	r3, #3
 800348e:	d018      	beq.n	80034c2 <RCCEx_PLLSAI2_Config+0x86>
 8003490:	2b03      	cmp	r3, #3
 8003492:	d825      	bhi.n	80034e0 <RCCEx_PLLSAI2_Config+0xa4>
 8003494:	2b01      	cmp	r3, #1
 8003496:	d002      	beq.n	800349e <RCCEx_PLLSAI2_Config+0x62>
 8003498:	2b02      	cmp	r3, #2
 800349a:	d009      	beq.n	80034b0 <RCCEx_PLLSAI2_Config+0x74>
 800349c:	e020      	b.n	80034e0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800349e:	4b55      	ldr	r3, [pc, #340]	; (80035f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d11d      	bne.n	80034e6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034ae:	e01a      	b.n	80034e6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034b0:	4b50      	ldr	r3, [pc, #320]	; (80035f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d116      	bne.n	80034ea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034c0:	e013      	b.n	80034ea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034c2:	4b4c      	ldr	r3, [pc, #304]	; (80035f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10f      	bne.n	80034ee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034ce:	4b49      	ldr	r3, [pc, #292]	; (80035f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d109      	bne.n	80034ee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034de:	e006      	b.n	80034ee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	73fb      	strb	r3, [r7, #15]
      break;
 80034e4:	e004      	b.n	80034f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034e6:	bf00      	nop
 80034e8:	e002      	b.n	80034f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034ea:	bf00      	nop
 80034ec:	e000      	b.n	80034f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10d      	bne.n	8003512 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034f6:	4b3f      	ldr	r3, [pc, #252]	; (80035f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6819      	ldr	r1, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	3b01      	subs	r3, #1
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	430b      	orrs	r3, r1
 800350c:	4939      	ldr	r1, [pc, #228]	; (80035f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800350e:	4313      	orrs	r3, r2
 8003510:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003512:	7bfb      	ldrb	r3, [r7, #15]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d167      	bne.n	80035e8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003518:	4b36      	ldr	r3, [pc, #216]	; (80035f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a35      	ldr	r2, [pc, #212]	; (80035f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800351e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003522:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003524:	f7fe fa1e 	bl	8001964 <HAL_GetTick>
 8003528:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800352a:	e009      	b.n	8003540 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800352c:	f7fe fa1a 	bl	8001964 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d902      	bls.n	8003540 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	73fb      	strb	r3, [r7, #15]
        break;
 800353e:	e005      	b.n	800354c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003540:	4b2c      	ldr	r3, [pc, #176]	; (80035f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1ef      	bne.n	800352c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800354c:	7bfb      	ldrb	r3, [r7, #15]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d14a      	bne.n	80035e8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d111      	bne.n	800357c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003558:	4b26      	ldr	r3, [pc, #152]	; (80035f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6892      	ldr	r2, [r2, #8]
 8003568:	0211      	lsls	r1, r2, #8
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	68d2      	ldr	r2, [r2, #12]
 800356e:	0912      	lsrs	r2, r2, #4
 8003570:	0452      	lsls	r2, r2, #17
 8003572:	430a      	orrs	r2, r1
 8003574:	491f      	ldr	r1, [pc, #124]	; (80035f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003576:	4313      	orrs	r3, r2
 8003578:	614b      	str	r3, [r1, #20]
 800357a:	e011      	b.n	80035a0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800357c:	4b1d      	ldr	r3, [pc, #116]	; (80035f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003584:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6892      	ldr	r2, [r2, #8]
 800358c:	0211      	lsls	r1, r2, #8
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6912      	ldr	r2, [r2, #16]
 8003592:	0852      	lsrs	r2, r2, #1
 8003594:	3a01      	subs	r2, #1
 8003596:	0652      	lsls	r2, r2, #25
 8003598:	430a      	orrs	r2, r1
 800359a:	4916      	ldr	r1, [pc, #88]	; (80035f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800359c:	4313      	orrs	r3, r2
 800359e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80035a0:	4b14      	ldr	r3, [pc, #80]	; (80035f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a13      	ldr	r2, [pc, #76]	; (80035f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ac:	f7fe f9da 	bl	8001964 <HAL_GetTick>
 80035b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80035b2:	e009      	b.n	80035c8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035b4:	f7fe f9d6 	bl	8001964 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d902      	bls.n	80035c8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	73fb      	strb	r3, [r7, #15]
          break;
 80035c6:	e005      	b.n	80035d4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80035c8:	4b0a      	ldr	r3, [pc, #40]	; (80035f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0ef      	beq.n	80035b4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d106      	bne.n	80035e8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80035da:	4b06      	ldr	r3, [pc, #24]	; (80035f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035dc:	695a      	ldr	r2, [r3, #20]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	4904      	ldr	r1, [pc, #16]	; (80035f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80035e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40021000 	.word	0x40021000

080035f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e049      	b.n	800369e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d106      	bne.n	8003624 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7fd fef4 	bl	800140c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3304      	adds	r3, #4
 8003634:	4619      	mov	r1, r3
 8003636:	4610      	mov	r0, r2
 8003638:	f000 ffe2 	bl	8004600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
	...

080036a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d001      	beq.n	80036c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e047      	b.n	8003750 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2202      	movs	r2, #2
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a23      	ldr	r2, [pc, #140]	; (800375c <HAL_TIM_Base_Start+0xb4>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d01d      	beq.n	800370e <HAL_TIM_Base_Start+0x66>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036da:	d018      	beq.n	800370e <HAL_TIM_Base_Start+0x66>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a1f      	ldr	r2, [pc, #124]	; (8003760 <HAL_TIM_Base_Start+0xb8>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d013      	beq.n	800370e <HAL_TIM_Base_Start+0x66>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a1e      	ldr	r2, [pc, #120]	; (8003764 <HAL_TIM_Base_Start+0xbc>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d00e      	beq.n	800370e <HAL_TIM_Base_Start+0x66>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a1c      	ldr	r2, [pc, #112]	; (8003768 <HAL_TIM_Base_Start+0xc0>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d009      	beq.n	800370e <HAL_TIM_Base_Start+0x66>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a1b      	ldr	r2, [pc, #108]	; (800376c <HAL_TIM_Base_Start+0xc4>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d004      	beq.n	800370e <HAL_TIM_Base_Start+0x66>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a19      	ldr	r2, [pc, #100]	; (8003770 <HAL_TIM_Base_Start+0xc8>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d115      	bne.n	800373a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	4b17      	ldr	r3, [pc, #92]	; (8003774 <HAL_TIM_Base_Start+0xcc>)
 8003716:	4013      	ands	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2b06      	cmp	r3, #6
 800371e:	d015      	beq.n	800374c <HAL_TIM_Base_Start+0xa4>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003726:	d011      	beq.n	800374c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0201 	orr.w	r2, r2, #1
 8003736:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003738:	e008      	b.n	800374c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 0201 	orr.w	r2, r2, #1
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	e000      	b.n	800374e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800374c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	40012c00 	.word	0x40012c00
 8003760:	40000400 	.word	0x40000400
 8003764:	40000800 	.word	0x40000800
 8003768:	40000c00 	.word	0x40000c00
 800376c:	40013400 	.word	0x40013400
 8003770:	40014000 	.word	0x40014000
 8003774:	00010007 	.word	0x00010007

08003778 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6a1a      	ldr	r2, [r3, #32]
 8003786:	f241 1311 	movw	r3, #4369	; 0x1111
 800378a:	4013      	ands	r3, r2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10f      	bne.n	80037b0 <HAL_TIM_Base_Stop+0x38>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6a1a      	ldr	r2, [r3, #32]
 8003796:	f240 4344 	movw	r3, #1092	; 0x444
 800379a:	4013      	ands	r3, r2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d107      	bne.n	80037b0 <HAL_TIM_Base_Stop+0x38>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0201 	bic.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
	...

080037c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d001      	beq.n	80037e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e04f      	b.n	8003880 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68da      	ldr	r2, [r3, #12]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0201 	orr.w	r2, r2, #1
 80037f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a23      	ldr	r2, [pc, #140]	; (800388c <HAL_TIM_Base_Start_IT+0xc4>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d01d      	beq.n	800383e <HAL_TIM_Base_Start_IT+0x76>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800380a:	d018      	beq.n	800383e <HAL_TIM_Base_Start_IT+0x76>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a1f      	ldr	r2, [pc, #124]	; (8003890 <HAL_TIM_Base_Start_IT+0xc8>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d013      	beq.n	800383e <HAL_TIM_Base_Start_IT+0x76>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a1e      	ldr	r2, [pc, #120]	; (8003894 <HAL_TIM_Base_Start_IT+0xcc>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d00e      	beq.n	800383e <HAL_TIM_Base_Start_IT+0x76>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a1c      	ldr	r2, [pc, #112]	; (8003898 <HAL_TIM_Base_Start_IT+0xd0>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d009      	beq.n	800383e <HAL_TIM_Base_Start_IT+0x76>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a1b      	ldr	r2, [pc, #108]	; (800389c <HAL_TIM_Base_Start_IT+0xd4>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d004      	beq.n	800383e <HAL_TIM_Base_Start_IT+0x76>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a19      	ldr	r2, [pc, #100]	; (80038a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d115      	bne.n	800386a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	4b17      	ldr	r3, [pc, #92]	; (80038a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003846:	4013      	ands	r3, r2
 8003848:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2b06      	cmp	r3, #6
 800384e:	d015      	beq.n	800387c <HAL_TIM_Base_Start_IT+0xb4>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003856:	d011      	beq.n	800387c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0201 	orr.w	r2, r2, #1
 8003866:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003868:	e008      	b.n	800387c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f042 0201 	orr.w	r2, r2, #1
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	e000      	b.n	800387e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800387c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	40012c00 	.word	0x40012c00
 8003890:	40000400 	.word	0x40000400
 8003894:	40000800 	.word	0x40000800
 8003898:	40000c00 	.word	0x40000c00
 800389c:	40013400 	.word	0x40013400
 80038a0:	40014000 	.word	0x40014000
 80038a4:	00010007 	.word	0x00010007

080038a8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0201 	bic.w	r2, r2, #1
 80038be:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6a1a      	ldr	r2, [r3, #32]
 80038c6:	f241 1311 	movw	r3, #4369	; 0x1111
 80038ca:	4013      	ands	r3, r2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10f      	bne.n	80038f0 <HAL_TIM_Base_Stop_IT+0x48>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6a1a      	ldr	r2, [r3, #32]
 80038d6:	f240 4344 	movw	r3, #1092	; 0x444
 80038da:	4013      	ands	r3, r2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d107      	bne.n	80038f0 <HAL_TIM_Base_Stop_IT+0x48>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0201 	bic.w	r2, r2, #1
 80038ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b082      	sub	sp, #8
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e049      	b.n	80039ac <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	d106      	bne.n	8003932 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7fd fd33 	bl	8001398 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2202      	movs	r2, #2
 8003936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3304      	adds	r3, #4
 8003942:	4619      	mov	r1, r3
 8003944:	4610      	mov	r0, r2
 8003946:	f000 fe5b 	bl	8004600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d109      	bne.n	80039d8 <HAL_TIM_PWM_Start+0x24>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	bf14      	ite	ne
 80039d0:	2301      	movne	r3, #1
 80039d2:	2300      	moveq	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	e03c      	b.n	8003a52 <HAL_TIM_PWM_Start+0x9e>
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d109      	bne.n	80039f2 <HAL_TIM_PWM_Start+0x3e>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	bf14      	ite	ne
 80039ea:	2301      	movne	r3, #1
 80039ec:	2300      	moveq	r3, #0
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	e02f      	b.n	8003a52 <HAL_TIM_PWM_Start+0x9e>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d109      	bne.n	8003a0c <HAL_TIM_PWM_Start+0x58>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	bf14      	ite	ne
 8003a04:	2301      	movne	r3, #1
 8003a06:	2300      	moveq	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	e022      	b.n	8003a52 <HAL_TIM_PWM_Start+0x9e>
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	2b0c      	cmp	r3, #12
 8003a10:	d109      	bne.n	8003a26 <HAL_TIM_PWM_Start+0x72>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	bf14      	ite	ne
 8003a1e:	2301      	movne	r3, #1
 8003a20:	2300      	moveq	r3, #0
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	e015      	b.n	8003a52 <HAL_TIM_PWM_Start+0x9e>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2b10      	cmp	r3, #16
 8003a2a:	d109      	bne.n	8003a40 <HAL_TIM_PWM_Start+0x8c>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	bf14      	ite	ne
 8003a38:	2301      	movne	r3, #1
 8003a3a:	2300      	moveq	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	e008      	b.n	8003a52 <HAL_TIM_PWM_Start+0x9e>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	bf14      	ite	ne
 8003a4c:	2301      	movne	r3, #1
 8003a4e:	2300      	moveq	r3, #0
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e09c      	b.n	8003b94 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d104      	bne.n	8003a6a <HAL_TIM_PWM_Start+0xb6>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a68:	e023      	b.n	8003ab2 <HAL_TIM_PWM_Start+0xfe>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2b04      	cmp	r3, #4
 8003a6e:	d104      	bne.n	8003a7a <HAL_TIM_PWM_Start+0xc6>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a78:	e01b      	b.n	8003ab2 <HAL_TIM_PWM_Start+0xfe>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b08      	cmp	r3, #8
 8003a7e:	d104      	bne.n	8003a8a <HAL_TIM_PWM_Start+0xd6>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a88:	e013      	b.n	8003ab2 <HAL_TIM_PWM_Start+0xfe>
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	2b0c      	cmp	r3, #12
 8003a8e:	d104      	bne.n	8003a9a <HAL_TIM_PWM_Start+0xe6>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2202      	movs	r2, #2
 8003a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a98:	e00b      	b.n	8003ab2 <HAL_TIM_PWM_Start+0xfe>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b10      	cmp	r3, #16
 8003a9e:	d104      	bne.n	8003aaa <HAL_TIM_PWM_Start+0xf6>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aa8:	e003      	b.n	8003ab2 <HAL_TIM_PWM_Start+0xfe>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2202      	movs	r2, #2
 8003aae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	6839      	ldr	r1, [r7, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f001 f910 	bl	8004ce0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a35      	ldr	r2, [pc, #212]	; (8003b9c <HAL_TIM_PWM_Start+0x1e8>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d013      	beq.n	8003af2 <HAL_TIM_PWM_Start+0x13e>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a34      	ldr	r2, [pc, #208]	; (8003ba0 <HAL_TIM_PWM_Start+0x1ec>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d00e      	beq.n	8003af2 <HAL_TIM_PWM_Start+0x13e>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a32      	ldr	r2, [pc, #200]	; (8003ba4 <HAL_TIM_PWM_Start+0x1f0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d009      	beq.n	8003af2 <HAL_TIM_PWM_Start+0x13e>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a31      	ldr	r2, [pc, #196]	; (8003ba8 <HAL_TIM_PWM_Start+0x1f4>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d004      	beq.n	8003af2 <HAL_TIM_PWM_Start+0x13e>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a2f      	ldr	r2, [pc, #188]	; (8003bac <HAL_TIM_PWM_Start+0x1f8>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d101      	bne.n	8003af6 <HAL_TIM_PWM_Start+0x142>
 8003af2:	2301      	movs	r3, #1
 8003af4:	e000      	b.n	8003af8 <HAL_TIM_PWM_Start+0x144>
 8003af6:	2300      	movs	r3, #0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d007      	beq.n	8003b0c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b0a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a22      	ldr	r2, [pc, #136]	; (8003b9c <HAL_TIM_PWM_Start+0x1e8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d01d      	beq.n	8003b52 <HAL_TIM_PWM_Start+0x19e>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b1e:	d018      	beq.n	8003b52 <HAL_TIM_PWM_Start+0x19e>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a22      	ldr	r2, [pc, #136]	; (8003bb0 <HAL_TIM_PWM_Start+0x1fc>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d013      	beq.n	8003b52 <HAL_TIM_PWM_Start+0x19e>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a21      	ldr	r2, [pc, #132]	; (8003bb4 <HAL_TIM_PWM_Start+0x200>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d00e      	beq.n	8003b52 <HAL_TIM_PWM_Start+0x19e>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a1f      	ldr	r2, [pc, #124]	; (8003bb8 <HAL_TIM_PWM_Start+0x204>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d009      	beq.n	8003b52 <HAL_TIM_PWM_Start+0x19e>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a17      	ldr	r2, [pc, #92]	; (8003ba0 <HAL_TIM_PWM_Start+0x1ec>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d004      	beq.n	8003b52 <HAL_TIM_PWM_Start+0x19e>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a15      	ldr	r2, [pc, #84]	; (8003ba4 <HAL_TIM_PWM_Start+0x1f0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d115      	bne.n	8003b7e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	4b18      	ldr	r3, [pc, #96]	; (8003bbc <HAL_TIM_PWM_Start+0x208>)
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2b06      	cmp	r3, #6
 8003b62:	d015      	beq.n	8003b90 <HAL_TIM_PWM_Start+0x1dc>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b6a:	d011      	beq.n	8003b90 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0201 	orr.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b7c:	e008      	b.n	8003b90 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f042 0201 	orr.w	r2, r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	e000      	b.n	8003b92 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b90:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40012c00 	.word	0x40012c00
 8003ba0:	40013400 	.word	0x40013400
 8003ba4:	40014000 	.word	0x40014000
 8003ba8:	40014400 	.word	0x40014400
 8003bac:	40014800 	.word	0x40014800
 8003bb0:	40000400 	.word	0x40000400
 8003bb4:	40000800 	.word	0x40000800
 8003bb8:	40000c00 	.word	0x40000c00
 8003bbc:	00010007 	.word	0x00010007

08003bc0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	6839      	ldr	r1, [r7, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f001 f884 	bl	8004ce0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a3e      	ldr	r2, [pc, #248]	; (8003cd8 <HAL_TIM_PWM_Stop+0x118>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d013      	beq.n	8003c0a <HAL_TIM_PWM_Stop+0x4a>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a3d      	ldr	r2, [pc, #244]	; (8003cdc <HAL_TIM_PWM_Stop+0x11c>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d00e      	beq.n	8003c0a <HAL_TIM_PWM_Stop+0x4a>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a3b      	ldr	r2, [pc, #236]	; (8003ce0 <HAL_TIM_PWM_Stop+0x120>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d009      	beq.n	8003c0a <HAL_TIM_PWM_Stop+0x4a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a3a      	ldr	r2, [pc, #232]	; (8003ce4 <HAL_TIM_PWM_Stop+0x124>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d004      	beq.n	8003c0a <HAL_TIM_PWM_Stop+0x4a>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a38      	ldr	r2, [pc, #224]	; (8003ce8 <HAL_TIM_PWM_Stop+0x128>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d101      	bne.n	8003c0e <HAL_TIM_PWM_Stop+0x4e>
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e000      	b.n	8003c10 <HAL_TIM_PWM_Stop+0x50>
 8003c0e:	2300      	movs	r3, #0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d017      	beq.n	8003c44 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6a1a      	ldr	r2, [r3, #32]
 8003c1a:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c1e:	4013      	ands	r3, r2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10f      	bne.n	8003c44 <HAL_TIM_PWM_Stop+0x84>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6a1a      	ldr	r2, [r3, #32]
 8003c2a:	f240 4344 	movw	r3, #1092	; 0x444
 8003c2e:	4013      	ands	r3, r2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d107      	bne.n	8003c44 <HAL_TIM_PWM_Stop+0x84>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c42:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6a1a      	ldr	r2, [r3, #32]
 8003c4a:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c4e:	4013      	ands	r3, r2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10f      	bne.n	8003c74 <HAL_TIM_PWM_Stop+0xb4>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6a1a      	ldr	r2, [r3, #32]
 8003c5a:	f240 4344 	movw	r3, #1092	; 0x444
 8003c5e:	4013      	ands	r3, r2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d107      	bne.n	8003c74 <HAL_TIM_PWM_Stop+0xb4>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0201 	bic.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d104      	bne.n	8003c84 <HAL_TIM_PWM_Stop+0xc4>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c82:	e023      	b.n	8003ccc <HAL_TIM_PWM_Stop+0x10c>
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d104      	bne.n	8003c94 <HAL_TIM_PWM_Stop+0xd4>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c92:	e01b      	b.n	8003ccc <HAL_TIM_PWM_Stop+0x10c>
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	2b08      	cmp	r3, #8
 8003c98:	d104      	bne.n	8003ca4 <HAL_TIM_PWM_Stop+0xe4>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ca2:	e013      	b.n	8003ccc <HAL_TIM_PWM_Stop+0x10c>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	2b0c      	cmp	r3, #12
 8003ca8:	d104      	bne.n	8003cb4 <HAL_TIM_PWM_Stop+0xf4>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cb2:	e00b      	b.n	8003ccc <HAL_TIM_PWM_Stop+0x10c>
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2b10      	cmp	r3, #16
 8003cb8:	d104      	bne.n	8003cc4 <HAL_TIM_PWM_Stop+0x104>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cc2:	e003      	b.n	8003ccc <HAL_TIM_PWM_Stop+0x10c>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	40012c00 	.word	0x40012c00
 8003cdc:	40013400 	.word	0x40013400
 8003ce0:	40014000 	.word	0x40014000
 8003ce4:	40014400 	.word	0x40014400
 8003ce8:	40014800 	.word	0x40014800

08003cec <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d109      	bne.n	8003d14 <HAL_TIM_PWM_Start_IT+0x28>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	bf14      	ite	ne
 8003d0c:	2301      	movne	r3, #1
 8003d0e:	2300      	moveq	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	e03c      	b.n	8003d8e <HAL_TIM_PWM_Start_IT+0xa2>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d109      	bne.n	8003d2e <HAL_TIM_PWM_Start_IT+0x42>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	bf14      	ite	ne
 8003d26:	2301      	movne	r3, #1
 8003d28:	2300      	moveq	r3, #0
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	e02f      	b.n	8003d8e <HAL_TIM_PWM_Start_IT+0xa2>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	d109      	bne.n	8003d48 <HAL_TIM_PWM_Start_IT+0x5c>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	bf14      	ite	ne
 8003d40:	2301      	movne	r3, #1
 8003d42:	2300      	moveq	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	e022      	b.n	8003d8e <HAL_TIM_PWM_Start_IT+0xa2>
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	2b0c      	cmp	r3, #12
 8003d4c:	d109      	bne.n	8003d62 <HAL_TIM_PWM_Start_IT+0x76>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	bf14      	ite	ne
 8003d5a:	2301      	movne	r3, #1
 8003d5c:	2300      	moveq	r3, #0
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	e015      	b.n	8003d8e <HAL_TIM_PWM_Start_IT+0xa2>
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	2b10      	cmp	r3, #16
 8003d66:	d109      	bne.n	8003d7c <HAL_TIM_PWM_Start_IT+0x90>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	bf14      	ite	ne
 8003d74:	2301      	movne	r3, #1
 8003d76:	2300      	moveq	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	e008      	b.n	8003d8e <HAL_TIM_PWM_Start_IT+0xa2>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	bf14      	ite	ne
 8003d88:	2301      	movne	r3, #1
 8003d8a:	2300      	moveq	r3, #0
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e0e7      	b.n	8003f66 <HAL_TIM_PWM_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d104      	bne.n	8003da6 <HAL_TIM_PWM_Start_IT+0xba>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003da4:	e023      	b.n	8003dee <HAL_TIM_PWM_Start_IT+0x102>
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	2b04      	cmp	r3, #4
 8003daa:	d104      	bne.n	8003db6 <HAL_TIM_PWM_Start_IT+0xca>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003db4:	e01b      	b.n	8003dee <HAL_TIM_PWM_Start_IT+0x102>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d104      	bne.n	8003dc6 <HAL_TIM_PWM_Start_IT+0xda>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dc4:	e013      	b.n	8003dee <HAL_TIM_PWM_Start_IT+0x102>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b0c      	cmp	r3, #12
 8003dca:	d104      	bne.n	8003dd6 <HAL_TIM_PWM_Start_IT+0xea>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003dd4:	e00b      	b.n	8003dee <HAL_TIM_PWM_Start_IT+0x102>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b10      	cmp	r3, #16
 8003dda:	d104      	bne.n	8003de6 <HAL_TIM_PWM_Start_IT+0xfa>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003de4:	e003      	b.n	8003dee <HAL_TIM_PWM_Start_IT+0x102>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2202      	movs	r2, #2
 8003dea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	2b0c      	cmp	r3, #12
 8003df2:	d841      	bhi.n	8003e78 <HAL_TIM_PWM_Start_IT+0x18c>
 8003df4:	a201      	add	r2, pc, #4	; (adr r2, 8003dfc <HAL_TIM_PWM_Start_IT+0x110>)
 8003df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfa:	bf00      	nop
 8003dfc:	08003e31 	.word	0x08003e31
 8003e00:	08003e79 	.word	0x08003e79
 8003e04:	08003e79 	.word	0x08003e79
 8003e08:	08003e79 	.word	0x08003e79
 8003e0c:	08003e43 	.word	0x08003e43
 8003e10:	08003e79 	.word	0x08003e79
 8003e14:	08003e79 	.word	0x08003e79
 8003e18:	08003e79 	.word	0x08003e79
 8003e1c:	08003e55 	.word	0x08003e55
 8003e20:	08003e79 	.word	0x08003e79
 8003e24:	08003e79 	.word	0x08003e79
 8003e28:	08003e79 	.word	0x08003e79
 8003e2c:	08003e67 	.word	0x08003e67
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68da      	ldr	r2, [r3, #12]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0202 	orr.w	r2, r2, #2
 8003e3e:	60da      	str	r2, [r3, #12]
      break;
 8003e40:	e01d      	b.n	8003e7e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f042 0204 	orr.w	r2, r2, #4
 8003e50:	60da      	str	r2, [r3, #12]
      break;
 8003e52:	e014      	b.n	8003e7e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f042 0208 	orr.w	r2, r2, #8
 8003e62:	60da      	str	r2, [r3, #12]
      break;
 8003e64:	e00b      	b.n	8003e7e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68da      	ldr	r2, [r3, #12]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f042 0210 	orr.w	r2, r2, #16
 8003e74:	60da      	str	r2, [r3, #12]
      break;
 8003e76:	e002      	b.n	8003e7e <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e7c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d16f      	bne.n	8003f64 <HAL_TIM_PWM_Start_IT+0x278>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	6839      	ldr	r1, [r7, #0]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 ff27 	bl	8004ce0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a36      	ldr	r2, [pc, #216]	; (8003f70 <HAL_TIM_PWM_Start_IT+0x284>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d013      	beq.n	8003ec4 <HAL_TIM_PWM_Start_IT+0x1d8>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a34      	ldr	r2, [pc, #208]	; (8003f74 <HAL_TIM_PWM_Start_IT+0x288>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d00e      	beq.n	8003ec4 <HAL_TIM_PWM_Start_IT+0x1d8>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a33      	ldr	r2, [pc, #204]	; (8003f78 <HAL_TIM_PWM_Start_IT+0x28c>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d009      	beq.n	8003ec4 <HAL_TIM_PWM_Start_IT+0x1d8>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a31      	ldr	r2, [pc, #196]	; (8003f7c <HAL_TIM_PWM_Start_IT+0x290>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d004      	beq.n	8003ec4 <HAL_TIM_PWM_Start_IT+0x1d8>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a30      	ldr	r2, [pc, #192]	; (8003f80 <HAL_TIM_PWM_Start_IT+0x294>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d101      	bne.n	8003ec8 <HAL_TIM_PWM_Start_IT+0x1dc>
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e000      	b.n	8003eca <HAL_TIM_PWM_Start_IT+0x1de>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d007      	beq.n	8003ede <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003edc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a23      	ldr	r2, [pc, #140]	; (8003f70 <HAL_TIM_PWM_Start_IT+0x284>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d01d      	beq.n	8003f24 <HAL_TIM_PWM_Start_IT+0x238>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef0:	d018      	beq.n	8003f24 <HAL_TIM_PWM_Start_IT+0x238>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a23      	ldr	r2, [pc, #140]	; (8003f84 <HAL_TIM_PWM_Start_IT+0x298>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d013      	beq.n	8003f24 <HAL_TIM_PWM_Start_IT+0x238>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a21      	ldr	r2, [pc, #132]	; (8003f88 <HAL_TIM_PWM_Start_IT+0x29c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d00e      	beq.n	8003f24 <HAL_TIM_PWM_Start_IT+0x238>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a20      	ldr	r2, [pc, #128]	; (8003f8c <HAL_TIM_PWM_Start_IT+0x2a0>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d009      	beq.n	8003f24 <HAL_TIM_PWM_Start_IT+0x238>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a17      	ldr	r2, [pc, #92]	; (8003f74 <HAL_TIM_PWM_Start_IT+0x288>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d004      	beq.n	8003f24 <HAL_TIM_PWM_Start_IT+0x238>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a16      	ldr	r2, [pc, #88]	; (8003f78 <HAL_TIM_PWM_Start_IT+0x28c>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d115      	bne.n	8003f50 <HAL_TIM_PWM_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	4b19      	ldr	r3, [pc, #100]	; (8003f90 <HAL_TIM_PWM_Start_IT+0x2a4>)
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	2b06      	cmp	r3, #6
 8003f34:	d015      	beq.n	8003f62 <HAL_TIM_PWM_Start_IT+0x276>
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f3c:	d011      	beq.n	8003f62 <HAL_TIM_PWM_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f042 0201 	orr.w	r2, r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f4e:	e008      	b.n	8003f62 <HAL_TIM_PWM_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0201 	orr.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	e000      	b.n	8003f64 <HAL_TIM_PWM_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f62:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	40012c00 	.word	0x40012c00
 8003f74:	40013400 	.word	0x40013400
 8003f78:	40014000 	.word	0x40014000
 8003f7c:	40014400 	.word	0x40014400
 8003f80:	40014800 	.word	0x40014800
 8003f84:	40000400 	.word	0x40000400
 8003f88:	40000800 	.word	0x40000800
 8003f8c:	40000c00 	.word	0x40000c00
 8003f90:	00010007 	.word	0x00010007

08003f94 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b0c      	cmp	r3, #12
 8003fa6:	d841      	bhi.n	800402c <HAL_TIM_PWM_Stop_IT+0x98>
 8003fa8:	a201      	add	r2, pc, #4	; (adr r2, 8003fb0 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8003faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fae:	bf00      	nop
 8003fb0:	08003fe5 	.word	0x08003fe5
 8003fb4:	0800402d 	.word	0x0800402d
 8003fb8:	0800402d 	.word	0x0800402d
 8003fbc:	0800402d 	.word	0x0800402d
 8003fc0:	08003ff7 	.word	0x08003ff7
 8003fc4:	0800402d 	.word	0x0800402d
 8003fc8:	0800402d 	.word	0x0800402d
 8003fcc:	0800402d 	.word	0x0800402d
 8003fd0:	08004009 	.word	0x08004009
 8003fd4:	0800402d 	.word	0x0800402d
 8003fd8:	0800402d 	.word	0x0800402d
 8003fdc:	0800402d 	.word	0x0800402d
 8003fe0:	0800401b 	.word	0x0800401b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68da      	ldr	r2, [r3, #12]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0202 	bic.w	r2, r2, #2
 8003ff2:	60da      	str	r2, [r3, #12]
      break;
 8003ff4:	e01d      	b.n	8004032 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0204 	bic.w	r2, r2, #4
 8004004:	60da      	str	r2, [r3, #12]
      break;
 8004006:	e014      	b.n	8004032 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68da      	ldr	r2, [r3, #12]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0208 	bic.w	r2, r2, #8
 8004016:	60da      	str	r2, [r3, #12]
      break;
 8004018:	e00b      	b.n	8004032 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68da      	ldr	r2, [r3, #12]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 0210 	bic.w	r2, r2, #16
 8004028:	60da      	str	r2, [r3, #12]
      break;
 800402a:	e002      	b.n	8004032 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	73fb      	strb	r3, [r7, #15]
      break;
 8004030:	bf00      	nop
  }

  if (status == HAL_OK)
 8004032:	7bfb      	ldrb	r3, [r7, #15]
 8004034:	2b00      	cmp	r3, #0
 8004036:	f040 8081 	bne.w	800413c <HAL_TIM_PWM_Stop_IT+0x1a8>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2200      	movs	r2, #0
 8004040:	6839      	ldr	r1, [r7, #0]
 8004042:	4618      	mov	r0, r3
 8004044:	f000 fe4c 	bl	8004ce0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a3e      	ldr	r2, [pc, #248]	; (8004148 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d013      	beq.n	800407a <HAL_TIM_PWM_Stop_IT+0xe6>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a3d      	ldr	r2, [pc, #244]	; (800414c <HAL_TIM_PWM_Stop_IT+0x1b8>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d00e      	beq.n	800407a <HAL_TIM_PWM_Stop_IT+0xe6>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a3b      	ldr	r2, [pc, #236]	; (8004150 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d009      	beq.n	800407a <HAL_TIM_PWM_Stop_IT+0xe6>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a3a      	ldr	r2, [pc, #232]	; (8004154 <HAL_TIM_PWM_Stop_IT+0x1c0>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d004      	beq.n	800407a <HAL_TIM_PWM_Stop_IT+0xe6>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a38      	ldr	r2, [pc, #224]	; (8004158 <HAL_TIM_PWM_Stop_IT+0x1c4>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d101      	bne.n	800407e <HAL_TIM_PWM_Stop_IT+0xea>
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <HAL_TIM_PWM_Stop_IT+0xec>
 800407e:	2300      	movs	r3, #0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d017      	beq.n	80040b4 <HAL_TIM_PWM_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6a1a      	ldr	r2, [r3, #32]
 800408a:	f241 1311 	movw	r3, #4369	; 0x1111
 800408e:	4013      	ands	r3, r2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10f      	bne.n	80040b4 <HAL_TIM_PWM_Stop_IT+0x120>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6a1a      	ldr	r2, [r3, #32]
 800409a:	f240 4344 	movw	r3, #1092	; 0x444
 800409e:	4013      	ands	r3, r2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d107      	bne.n	80040b4 <HAL_TIM_PWM_Stop_IT+0x120>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040b2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6a1a      	ldr	r2, [r3, #32]
 80040ba:	f241 1311 	movw	r3, #4369	; 0x1111
 80040be:	4013      	ands	r3, r2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10f      	bne.n	80040e4 <HAL_TIM_PWM_Stop_IT+0x150>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6a1a      	ldr	r2, [r3, #32]
 80040ca:	f240 4344 	movw	r3, #1092	; 0x444
 80040ce:	4013      	ands	r3, r2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d107      	bne.n	80040e4 <HAL_TIM_PWM_Stop_IT+0x150>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0201 	bic.w	r2, r2, #1
 80040e2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d104      	bne.n	80040f4 <HAL_TIM_PWM_Stop_IT+0x160>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040f2:	e023      	b.n	800413c <HAL_TIM_PWM_Stop_IT+0x1a8>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	d104      	bne.n	8004104 <HAL_TIM_PWM_Stop_IT+0x170>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004102:	e01b      	b.n	800413c <HAL_TIM_PWM_Stop_IT+0x1a8>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	2b08      	cmp	r3, #8
 8004108:	d104      	bne.n	8004114 <HAL_TIM_PWM_Stop_IT+0x180>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004112:	e013      	b.n	800413c <HAL_TIM_PWM_Stop_IT+0x1a8>
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	2b0c      	cmp	r3, #12
 8004118:	d104      	bne.n	8004124 <HAL_TIM_PWM_Stop_IT+0x190>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004122:	e00b      	b.n	800413c <HAL_TIM_PWM_Stop_IT+0x1a8>
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	2b10      	cmp	r3, #16
 8004128:	d104      	bne.n	8004134 <HAL_TIM_PWM_Stop_IT+0x1a0>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004132:	e003      	b.n	800413c <HAL_TIM_PWM_Stop_IT+0x1a8>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800413c:	7bfb      	ldrb	r3, [r7, #15]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	40012c00 	.word	0x40012c00
 800414c:	40013400 	.word	0x40013400
 8004150:	40014000 	.word	0x40014000
 8004154:	40014400 	.word	0x40014400
 8004158:	40014800 	.word	0x40014800

0800415c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b02      	cmp	r3, #2
 8004170:	d122      	bne.n	80041b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b02      	cmp	r3, #2
 800417e:	d11b      	bne.n	80041b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f06f 0202 	mvn.w	r2, #2
 8004188:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 fa1a 	bl	80045d8 <HAL_TIM_IC_CaptureCallback>
 80041a4:	e005      	b.n	80041b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 fa0c 	bl	80045c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7fc fe13 	bl	8000dd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	f003 0304 	and.w	r3, r3, #4
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d122      	bne.n	800420c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d11b      	bne.n	800420c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f06f 0204 	mvn.w	r2, #4
 80041dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2202      	movs	r2, #2
 80041e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f9f0 	bl	80045d8 <HAL_TIM_IC_CaptureCallback>
 80041f8:	e005      	b.n	8004206 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f9e2 	bl	80045c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7fc fde9 	bl	8000dd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f003 0308 	and.w	r3, r3, #8
 8004216:	2b08      	cmp	r3, #8
 8004218:	d122      	bne.n	8004260 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f003 0308 	and.w	r3, r3, #8
 8004224:	2b08      	cmp	r3, #8
 8004226:	d11b      	bne.n	8004260 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f06f 0208 	mvn.w	r2, #8
 8004230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2204      	movs	r2, #4
 8004236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f9c6 	bl	80045d8 <HAL_TIM_IC_CaptureCallback>
 800424c:	e005      	b.n	800425a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f9b8 	bl	80045c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7fc fdbf 	bl	8000dd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	f003 0310 	and.w	r3, r3, #16
 800426a:	2b10      	cmp	r3, #16
 800426c:	d122      	bne.n	80042b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f003 0310 	and.w	r3, r3, #16
 8004278:	2b10      	cmp	r3, #16
 800427a:	d11b      	bne.n	80042b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f06f 0210 	mvn.w	r2, #16
 8004284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2208      	movs	r2, #8
 800428a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f99c 	bl	80045d8 <HAL_TIM_IC_CaptureCallback>
 80042a0:	e005      	b.n	80042ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f98e 	bl	80045c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7fc fd95 	bl	8000dd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d10e      	bne.n	80042e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d107      	bne.n	80042e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f06f 0201 	mvn.w	r2, #1
 80042d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7fc fd42 	bl	8000d64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ea:	2b80      	cmp	r3, #128	; 0x80
 80042ec:	d10e      	bne.n	800430c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f8:	2b80      	cmp	r3, #128	; 0x80
 80042fa:	d107      	bne.n	800430c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 fda2 	bl	8004e50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800431a:	d10e      	bne.n	800433a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004326:	2b80      	cmp	r3, #128	; 0x80
 8004328:	d107      	bne.n	800433a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 fd95 	bl	8004e64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004344:	2b40      	cmp	r3, #64	; 0x40
 8004346:	d10e      	bne.n	8004366 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004352:	2b40      	cmp	r3, #64	; 0x40
 8004354:	d107      	bne.n	8004366 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800435e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f943 	bl	80045ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	f003 0320 	and.w	r3, r3, #32
 8004370:	2b20      	cmp	r3, #32
 8004372:	d10e      	bne.n	8004392 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f003 0320 	and.w	r3, r3, #32
 800437e:	2b20      	cmp	r3, #32
 8004380:	d107      	bne.n	8004392 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f06f 0220 	mvn.w	r2, #32
 800438a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fd55 	bl	8004e3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004392:	bf00      	nop
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
	...

0800439c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043a8:	2300      	movs	r3, #0
 80043aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d101      	bne.n	80043ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043b6:	2302      	movs	r3, #2
 80043b8:	e0ff      	b.n	80045ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2b14      	cmp	r3, #20
 80043c6:	f200 80f0 	bhi.w	80045aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80043ca:	a201      	add	r2, pc, #4	; (adr r2, 80043d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d0:	08004425 	.word	0x08004425
 80043d4:	080045ab 	.word	0x080045ab
 80043d8:	080045ab 	.word	0x080045ab
 80043dc:	080045ab 	.word	0x080045ab
 80043e0:	08004465 	.word	0x08004465
 80043e4:	080045ab 	.word	0x080045ab
 80043e8:	080045ab 	.word	0x080045ab
 80043ec:	080045ab 	.word	0x080045ab
 80043f0:	080044a7 	.word	0x080044a7
 80043f4:	080045ab 	.word	0x080045ab
 80043f8:	080045ab 	.word	0x080045ab
 80043fc:	080045ab 	.word	0x080045ab
 8004400:	080044e7 	.word	0x080044e7
 8004404:	080045ab 	.word	0x080045ab
 8004408:	080045ab 	.word	0x080045ab
 800440c:	080045ab 	.word	0x080045ab
 8004410:	08004529 	.word	0x08004529
 8004414:	080045ab 	.word	0x080045ab
 8004418:	080045ab 	.word	0x080045ab
 800441c:	080045ab 	.word	0x080045ab
 8004420:	08004569 	.word	0x08004569
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	4618      	mov	r0, r3
 800442c:	f000 f982 	bl	8004734 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699a      	ldr	r2, [r3, #24]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0208 	orr.w	r2, r2, #8
 800443e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699a      	ldr	r2, [r3, #24]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0204 	bic.w	r2, r2, #4
 800444e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6999      	ldr	r1, [r3, #24]
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	691a      	ldr	r2, [r3, #16]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	619a      	str	r2, [r3, #24]
      break;
 8004462:	e0a5      	b.n	80045b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68b9      	ldr	r1, [r7, #8]
 800446a:	4618      	mov	r0, r3
 800446c:	f000 f9f2 	bl	8004854 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699a      	ldr	r2, [r3, #24]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800447e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	699a      	ldr	r2, [r3, #24]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800448e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6999      	ldr	r1, [r3, #24]
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	021a      	lsls	r2, r3, #8
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	619a      	str	r2, [r3, #24]
      break;
 80044a4:	e084      	b.n	80045b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68b9      	ldr	r1, [r7, #8]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f000 fa5b 	bl	8004968 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	69da      	ldr	r2, [r3, #28]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f042 0208 	orr.w	r2, r2, #8
 80044c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	69da      	ldr	r2, [r3, #28]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0204 	bic.w	r2, r2, #4
 80044d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	69d9      	ldr	r1, [r3, #28]
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	691a      	ldr	r2, [r3, #16]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	430a      	orrs	r2, r1
 80044e2:	61da      	str	r2, [r3, #28]
      break;
 80044e4:	e064      	b.n	80045b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68b9      	ldr	r1, [r7, #8]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f000 fac3 	bl	8004a78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	69da      	ldr	r2, [r3, #28]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004500:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69da      	ldr	r2, [r3, #28]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004510:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	69d9      	ldr	r1, [r3, #28]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	021a      	lsls	r2, r3, #8
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	61da      	str	r2, [r3, #28]
      break;
 8004526:	e043      	b.n	80045b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68b9      	ldr	r1, [r7, #8]
 800452e:	4618      	mov	r0, r3
 8004530:	f000 fb0c 	bl	8004b4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0208 	orr.w	r2, r2, #8
 8004542:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 0204 	bic.w	r2, r2, #4
 8004552:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	691a      	ldr	r2, [r3, #16]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004566:	e023      	b.n	80045b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68b9      	ldr	r1, [r7, #8]
 800456e:	4618      	mov	r0, r3
 8004570:	f000 fb50 	bl	8004c14 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004582:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004592:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	021a      	lsls	r2, r3, #8
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80045a8:	e002      	b.n	80045b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	75fb      	strb	r3, [r7, #23]
      break;
 80045ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop

080045c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a40      	ldr	r2, [pc, #256]	; (8004714 <TIM_Base_SetConfig+0x114>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d013      	beq.n	8004640 <TIM_Base_SetConfig+0x40>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800461e:	d00f      	beq.n	8004640 <TIM_Base_SetConfig+0x40>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a3d      	ldr	r2, [pc, #244]	; (8004718 <TIM_Base_SetConfig+0x118>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d00b      	beq.n	8004640 <TIM_Base_SetConfig+0x40>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a3c      	ldr	r2, [pc, #240]	; (800471c <TIM_Base_SetConfig+0x11c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d007      	beq.n	8004640 <TIM_Base_SetConfig+0x40>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a3b      	ldr	r2, [pc, #236]	; (8004720 <TIM_Base_SetConfig+0x120>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d003      	beq.n	8004640 <TIM_Base_SetConfig+0x40>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a3a      	ldr	r2, [pc, #232]	; (8004724 <TIM_Base_SetConfig+0x124>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d108      	bne.n	8004652 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004646:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	4313      	orrs	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a2f      	ldr	r2, [pc, #188]	; (8004714 <TIM_Base_SetConfig+0x114>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d01f      	beq.n	800469a <TIM_Base_SetConfig+0x9a>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004660:	d01b      	beq.n	800469a <TIM_Base_SetConfig+0x9a>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a2c      	ldr	r2, [pc, #176]	; (8004718 <TIM_Base_SetConfig+0x118>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d017      	beq.n	800469a <TIM_Base_SetConfig+0x9a>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a2b      	ldr	r2, [pc, #172]	; (800471c <TIM_Base_SetConfig+0x11c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d013      	beq.n	800469a <TIM_Base_SetConfig+0x9a>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a2a      	ldr	r2, [pc, #168]	; (8004720 <TIM_Base_SetConfig+0x120>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d00f      	beq.n	800469a <TIM_Base_SetConfig+0x9a>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a29      	ldr	r2, [pc, #164]	; (8004724 <TIM_Base_SetConfig+0x124>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d00b      	beq.n	800469a <TIM_Base_SetConfig+0x9a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a28      	ldr	r2, [pc, #160]	; (8004728 <TIM_Base_SetConfig+0x128>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d007      	beq.n	800469a <TIM_Base_SetConfig+0x9a>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a27      	ldr	r2, [pc, #156]	; (800472c <TIM_Base_SetConfig+0x12c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d003      	beq.n	800469a <TIM_Base_SetConfig+0x9a>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a26      	ldr	r2, [pc, #152]	; (8004730 <TIM_Base_SetConfig+0x130>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d108      	bne.n	80046ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a10      	ldr	r2, [pc, #64]	; (8004714 <TIM_Base_SetConfig+0x114>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d00f      	beq.n	80046f8 <TIM_Base_SetConfig+0xf8>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a12      	ldr	r2, [pc, #72]	; (8004724 <TIM_Base_SetConfig+0x124>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d00b      	beq.n	80046f8 <TIM_Base_SetConfig+0xf8>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a11      	ldr	r2, [pc, #68]	; (8004728 <TIM_Base_SetConfig+0x128>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d007      	beq.n	80046f8 <TIM_Base_SetConfig+0xf8>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a10      	ldr	r2, [pc, #64]	; (800472c <TIM_Base_SetConfig+0x12c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d003      	beq.n	80046f8 <TIM_Base_SetConfig+0xf8>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a0f      	ldr	r2, [pc, #60]	; (8004730 <TIM_Base_SetConfig+0x130>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d103      	bne.n	8004700 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	691a      	ldr	r2, [r3, #16]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	615a      	str	r2, [r3, #20]
}
 8004706:	bf00      	nop
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	40012c00 	.word	0x40012c00
 8004718:	40000400 	.word	0x40000400
 800471c:	40000800 	.word	0x40000800
 8004720:	40000c00 	.word	0x40000c00
 8004724:	40013400 	.word	0x40013400
 8004728:	40014000 	.word	0x40014000
 800472c:	40014400 	.word	0x40014400
 8004730:	40014800 	.word	0x40014800

08004734 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004734:	b480      	push	{r7}
 8004736:	b087      	sub	sp, #28
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	f023 0201 	bic.w	r2, r3, #1
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f023 0303 	bic.w	r3, r3, #3
 800476e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	4313      	orrs	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f023 0302 	bic.w	r3, r3, #2
 8004780:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	4313      	orrs	r3, r2
 800478a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a2c      	ldr	r2, [pc, #176]	; (8004840 <TIM_OC1_SetConfig+0x10c>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d00f      	beq.n	80047b4 <TIM_OC1_SetConfig+0x80>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a2b      	ldr	r2, [pc, #172]	; (8004844 <TIM_OC1_SetConfig+0x110>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d00b      	beq.n	80047b4 <TIM_OC1_SetConfig+0x80>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a2a      	ldr	r2, [pc, #168]	; (8004848 <TIM_OC1_SetConfig+0x114>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d007      	beq.n	80047b4 <TIM_OC1_SetConfig+0x80>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a29      	ldr	r2, [pc, #164]	; (800484c <TIM_OC1_SetConfig+0x118>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d003      	beq.n	80047b4 <TIM_OC1_SetConfig+0x80>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a28      	ldr	r2, [pc, #160]	; (8004850 <TIM_OC1_SetConfig+0x11c>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d10c      	bne.n	80047ce <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f023 0308 	bic.w	r3, r3, #8
 80047ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f023 0304 	bic.w	r3, r3, #4
 80047cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a1b      	ldr	r2, [pc, #108]	; (8004840 <TIM_OC1_SetConfig+0x10c>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d00f      	beq.n	80047f6 <TIM_OC1_SetConfig+0xc2>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a1a      	ldr	r2, [pc, #104]	; (8004844 <TIM_OC1_SetConfig+0x110>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d00b      	beq.n	80047f6 <TIM_OC1_SetConfig+0xc2>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a19      	ldr	r2, [pc, #100]	; (8004848 <TIM_OC1_SetConfig+0x114>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d007      	beq.n	80047f6 <TIM_OC1_SetConfig+0xc2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a18      	ldr	r2, [pc, #96]	; (800484c <TIM_OC1_SetConfig+0x118>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d003      	beq.n	80047f6 <TIM_OC1_SetConfig+0xc2>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a17      	ldr	r2, [pc, #92]	; (8004850 <TIM_OC1_SetConfig+0x11c>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d111      	bne.n	800481a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	4313      	orrs	r3, r2
 800480e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	4313      	orrs	r3, r2
 8004818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	621a      	str	r2, [r3, #32]
}
 8004834:	bf00      	nop
 8004836:	371c      	adds	r7, #28
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	40012c00 	.word	0x40012c00
 8004844:	40013400 	.word	0x40013400
 8004848:	40014000 	.word	0x40014000
 800484c:	40014400 	.word	0x40014400
 8004850:	40014800 	.word	0x40014800

08004854 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004854:	b480      	push	{r7}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	f023 0210 	bic.w	r2, r3, #16
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800488e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	021b      	lsls	r3, r3, #8
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	4313      	orrs	r3, r2
 800489a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f023 0320 	bic.w	r3, r3, #32
 80048a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	011b      	lsls	r3, r3, #4
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a28      	ldr	r2, [pc, #160]	; (8004954 <TIM_OC2_SetConfig+0x100>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d003      	beq.n	80048c0 <TIM_OC2_SetConfig+0x6c>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a27      	ldr	r2, [pc, #156]	; (8004958 <TIM_OC2_SetConfig+0x104>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d10d      	bne.n	80048dc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a1d      	ldr	r2, [pc, #116]	; (8004954 <TIM_OC2_SetConfig+0x100>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d00f      	beq.n	8004904 <TIM_OC2_SetConfig+0xb0>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a1c      	ldr	r2, [pc, #112]	; (8004958 <TIM_OC2_SetConfig+0x104>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d00b      	beq.n	8004904 <TIM_OC2_SetConfig+0xb0>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a1b      	ldr	r2, [pc, #108]	; (800495c <TIM_OC2_SetConfig+0x108>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d007      	beq.n	8004904 <TIM_OC2_SetConfig+0xb0>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a1a      	ldr	r2, [pc, #104]	; (8004960 <TIM_OC2_SetConfig+0x10c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d003      	beq.n	8004904 <TIM_OC2_SetConfig+0xb0>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a19      	ldr	r2, [pc, #100]	; (8004964 <TIM_OC2_SetConfig+0x110>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d113      	bne.n	800492c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800490a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004912:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	4313      	orrs	r3, r2
 800491e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	621a      	str	r2, [r3, #32]
}
 8004946:	bf00      	nop
 8004948:	371c      	adds	r7, #28
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	40012c00 	.word	0x40012c00
 8004958:	40013400 	.word	0x40013400
 800495c:	40014000 	.word	0x40014000
 8004960:	40014400 	.word	0x40014400
 8004964:	40014800 	.word	0x40014800

08004968 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004968:	b480      	push	{r7}
 800496a:	b087      	sub	sp, #28
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800499a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f023 0303 	bic.w	r3, r3, #3
 80049a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	021b      	lsls	r3, r3, #8
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	4313      	orrs	r3, r2
 80049c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a27      	ldr	r2, [pc, #156]	; (8004a64 <TIM_OC3_SetConfig+0xfc>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d003      	beq.n	80049d2 <TIM_OC3_SetConfig+0x6a>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a26      	ldr	r2, [pc, #152]	; (8004a68 <TIM_OC3_SetConfig+0x100>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d10d      	bne.n	80049ee <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	021b      	lsls	r3, r3, #8
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a1c      	ldr	r2, [pc, #112]	; (8004a64 <TIM_OC3_SetConfig+0xfc>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00f      	beq.n	8004a16 <TIM_OC3_SetConfig+0xae>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a1b      	ldr	r2, [pc, #108]	; (8004a68 <TIM_OC3_SetConfig+0x100>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d00b      	beq.n	8004a16 <TIM_OC3_SetConfig+0xae>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a1a      	ldr	r2, [pc, #104]	; (8004a6c <TIM_OC3_SetConfig+0x104>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d007      	beq.n	8004a16 <TIM_OC3_SetConfig+0xae>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a19      	ldr	r2, [pc, #100]	; (8004a70 <TIM_OC3_SetConfig+0x108>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d003      	beq.n	8004a16 <TIM_OC3_SetConfig+0xae>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a18      	ldr	r2, [pc, #96]	; (8004a74 <TIM_OC3_SetConfig+0x10c>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d113      	bne.n	8004a3e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	011b      	lsls	r3, r3, #4
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	011b      	lsls	r3, r3, #4
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	621a      	str	r2, [r3, #32]
}
 8004a58:	bf00      	nop
 8004a5a:	371c      	adds	r7, #28
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	40012c00 	.word	0x40012c00
 8004a68:	40013400 	.word	0x40013400
 8004a6c:	40014000 	.word	0x40014000
 8004a70:	40014400 	.word	0x40014400
 8004a74:	40014800 	.word	0x40014800

08004a78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	021b      	lsls	r3, r3, #8
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ac6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	031b      	lsls	r3, r3, #12
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a18      	ldr	r2, [pc, #96]	; (8004b38 <TIM_OC4_SetConfig+0xc0>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d00f      	beq.n	8004afc <TIM_OC4_SetConfig+0x84>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a17      	ldr	r2, [pc, #92]	; (8004b3c <TIM_OC4_SetConfig+0xc4>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d00b      	beq.n	8004afc <TIM_OC4_SetConfig+0x84>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a16      	ldr	r2, [pc, #88]	; (8004b40 <TIM_OC4_SetConfig+0xc8>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d007      	beq.n	8004afc <TIM_OC4_SetConfig+0x84>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a15      	ldr	r2, [pc, #84]	; (8004b44 <TIM_OC4_SetConfig+0xcc>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d003      	beq.n	8004afc <TIM_OC4_SetConfig+0x84>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a14      	ldr	r2, [pc, #80]	; (8004b48 <TIM_OC4_SetConfig+0xd0>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d109      	bne.n	8004b10 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	019b      	lsls	r3, r3, #6
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	621a      	str	r2, [r3, #32]
}
 8004b2a:	bf00      	nop
 8004b2c:	371c      	adds	r7, #28
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	40012c00 	.word	0x40012c00
 8004b3c:	40013400 	.word	0x40013400
 8004b40:	40014000 	.word	0x40014000
 8004b44:	40014400 	.word	0x40014400
 8004b48:	40014800 	.word	0x40014800

08004b4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004b90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	041b      	lsls	r3, r3, #16
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a17      	ldr	r2, [pc, #92]	; (8004c00 <TIM_OC5_SetConfig+0xb4>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d00f      	beq.n	8004bc6 <TIM_OC5_SetConfig+0x7a>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a16      	ldr	r2, [pc, #88]	; (8004c04 <TIM_OC5_SetConfig+0xb8>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d00b      	beq.n	8004bc6 <TIM_OC5_SetConfig+0x7a>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a15      	ldr	r2, [pc, #84]	; (8004c08 <TIM_OC5_SetConfig+0xbc>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d007      	beq.n	8004bc6 <TIM_OC5_SetConfig+0x7a>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a14      	ldr	r2, [pc, #80]	; (8004c0c <TIM_OC5_SetConfig+0xc0>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d003      	beq.n	8004bc6 <TIM_OC5_SetConfig+0x7a>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a13      	ldr	r2, [pc, #76]	; (8004c10 <TIM_OC5_SetConfig+0xc4>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d109      	bne.n	8004bda <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bcc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	021b      	lsls	r3, r3, #8
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	621a      	str	r2, [r3, #32]
}
 8004bf4:	bf00      	nop
 8004bf6:	371c      	adds	r7, #28
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	40012c00 	.word	0x40012c00
 8004c04:	40013400 	.word	0x40013400
 8004c08:	40014000 	.word	0x40014000
 8004c0c:	40014400 	.word	0x40014400
 8004c10:	40014800 	.word	0x40014800

08004c14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b087      	sub	sp, #28
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	021b      	lsls	r3, r3, #8
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	051b      	lsls	r3, r3, #20
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a18      	ldr	r2, [pc, #96]	; (8004ccc <TIM_OC6_SetConfig+0xb8>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d00f      	beq.n	8004c90 <TIM_OC6_SetConfig+0x7c>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a17      	ldr	r2, [pc, #92]	; (8004cd0 <TIM_OC6_SetConfig+0xbc>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d00b      	beq.n	8004c90 <TIM_OC6_SetConfig+0x7c>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a16      	ldr	r2, [pc, #88]	; (8004cd4 <TIM_OC6_SetConfig+0xc0>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d007      	beq.n	8004c90 <TIM_OC6_SetConfig+0x7c>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a15      	ldr	r2, [pc, #84]	; (8004cd8 <TIM_OC6_SetConfig+0xc4>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d003      	beq.n	8004c90 <TIM_OC6_SetConfig+0x7c>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a14      	ldr	r2, [pc, #80]	; (8004cdc <TIM_OC6_SetConfig+0xc8>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d109      	bne.n	8004ca4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	029b      	lsls	r3, r3, #10
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	621a      	str	r2, [r3, #32]
}
 8004cbe:	bf00      	nop
 8004cc0:	371c      	adds	r7, #28
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	40012c00 	.word	0x40012c00
 8004cd0:	40013400 	.word	0x40013400
 8004cd4:	40014000 	.word	0x40014000
 8004cd8:	40014400 	.word	0x40014400
 8004cdc:	40014800 	.word	0x40014800

08004ce0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	f003 031f 	and.w	r3, r3, #31
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6a1a      	ldr	r2, [r3, #32]
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	43db      	mvns	r3, r3
 8004d02:	401a      	ands	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6a1a      	ldr	r2, [r3, #32]
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f003 031f 	and.w	r3, r3, #31
 8004d12:	6879      	ldr	r1, [r7, #4]
 8004d14:	fa01 f303 	lsl.w	r3, r1, r3
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	621a      	str	r2, [r3, #32]
}
 8004d1e:	bf00      	nop
 8004d20:	371c      	adds	r7, #28
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
	...

08004d2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d101      	bne.n	8004d44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d40:	2302      	movs	r3, #2
 8004d42:	e068      	b.n	8004e16 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a2e      	ldr	r2, [pc, #184]	; (8004e24 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d004      	beq.n	8004d78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a2d      	ldr	r2, [pc, #180]	; (8004e28 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d108      	bne.n	8004d8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004d7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a1e      	ldr	r2, [pc, #120]	; (8004e24 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d01d      	beq.n	8004dea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db6:	d018      	beq.n	8004dea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a1b      	ldr	r2, [pc, #108]	; (8004e2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d013      	beq.n	8004dea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a1a      	ldr	r2, [pc, #104]	; (8004e30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d00e      	beq.n	8004dea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a18      	ldr	r2, [pc, #96]	; (8004e34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d009      	beq.n	8004dea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a13      	ldr	r2, [pc, #76]	; (8004e28 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d004      	beq.n	8004dea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a14      	ldr	r2, [pc, #80]	; (8004e38 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d10c      	bne.n	8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004df0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	40012c00 	.word	0x40012c00
 8004e28:	40013400 	.word	0x40013400
 8004e2c:	40000400 	.word	0x40000400
 8004e30:	40000800 	.word	0x40000800
 8004e34:	40000c00 	.word	0x40000c00
 8004e38:	40014000 	.word	0x40014000

08004e3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d101      	bne.n	8004e8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e040      	b.n	8004f0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d106      	bne.n	8004ea0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7fc fb54 	bl	8001548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2224      	movs	r2, #36	; 0x24
 8004ea4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0201 	bic.w	r2, r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f992 	bl	80051e0 <UART_SetConfig>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d101      	bne.n	8004ec6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e022      	b.n	8004f0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d002      	beq.n	8004ed4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 fc3e 	bl	8005750 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ee2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ef2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0201 	orr.w	r2, r2, #1
 8004f02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 fcc5 	bl	8005894 <UART_CheckIdleState>
 8004f0a:	4603      	mov	r3, r0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08a      	sub	sp, #40	; 0x28
 8004f18:	af02      	add	r7, sp, #8
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	603b      	str	r3, [r7, #0]
 8004f20:	4613      	mov	r3, r2
 8004f22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f28:	2b20      	cmp	r3, #32
 8004f2a:	f040 8082 	bne.w	8005032 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d002      	beq.n	8004f3a <HAL_UART_Transmit+0x26>
 8004f34:	88fb      	ldrh	r3, [r7, #6]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e07a      	b.n	8005034 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d101      	bne.n	8004f4c <HAL_UART_Transmit+0x38>
 8004f48:	2302      	movs	r3, #2
 8004f4a:	e073      	b.n	8005034 <HAL_UART_Transmit+0x120>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2221      	movs	r2, #33	; 0x21
 8004f60:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f62:	f7fc fcff 	bl	8001964 <HAL_GetTick>
 8004f66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	88fa      	ldrh	r2, [r7, #6]
 8004f6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	88fa      	ldrh	r2, [r7, #6]
 8004f74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f80:	d108      	bne.n	8004f94 <HAL_UART_Transmit+0x80>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d104      	bne.n	8004f94 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	61bb      	str	r3, [r7, #24]
 8004f92:	e003      	b.n	8004f9c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004fa4:	e02d      	b.n	8005002 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	2200      	movs	r2, #0
 8004fae:	2180      	movs	r1, #128	; 0x80
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f000 fcb8 	bl	8005926 <UART_WaitOnFlagUntilTimeout>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d001      	beq.n	8004fc0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e039      	b.n	8005034 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10b      	bne.n	8004fde <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	881a      	ldrh	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fd2:	b292      	uxth	r2, r2
 8004fd4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	3302      	adds	r3, #2
 8004fda:	61bb      	str	r3, [r7, #24]
 8004fdc:	e008      	b.n	8004ff0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	781a      	ldrb	r2, [r3, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	b292      	uxth	r2, r2
 8004fe8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	3301      	adds	r3, #1
 8004fee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005008:	b29b      	uxth	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1cb      	bne.n	8004fa6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	2200      	movs	r2, #0
 8005016:	2140      	movs	r1, #64	; 0x40
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f000 fc84 	bl	8005926 <UART_WaitOnFlagUntilTimeout>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d001      	beq.n	8005028 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e005      	b.n	8005034 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2220      	movs	r2, #32
 800502c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800502e:	2300      	movs	r3, #0
 8005030:	e000      	b.n	8005034 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005032:	2302      	movs	r3, #2
  }
}
 8005034:	4618      	mov	r0, r3
 8005036:	3720      	adds	r7, #32
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b08a      	sub	sp, #40	; 0x28
 8005040:	af02      	add	r7, sp, #8
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	603b      	str	r3, [r7, #0]
 8005048:	4613      	mov	r3, r2
 800504a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005050:	2b20      	cmp	r3, #32
 8005052:	f040 80bf 	bne.w	80051d4 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d002      	beq.n	8005062 <HAL_UART_Receive+0x26>
 800505c:	88fb      	ldrh	r3, [r7, #6]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e0b7      	b.n	80051d6 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800506c:	2b01      	cmp	r3, #1
 800506e:	d101      	bne.n	8005074 <HAL_UART_Receive+0x38>
 8005070:	2302      	movs	r3, #2
 8005072:	e0b0      	b.n	80051d6 <HAL_UART_Receive+0x19a>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2222      	movs	r2, #34	; 0x22
 8005088:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005090:	f7fc fc68 	bl	8001964 <HAL_GetTick>
 8005094:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	88fa      	ldrh	r2, [r7, #6]
 800509a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	88fa      	ldrh	r2, [r7, #6]
 80050a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ae:	d10e      	bne.n	80050ce <HAL_UART_Receive+0x92>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d105      	bne.n	80050c4 <HAL_UART_Receive+0x88>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f240 12ff 	movw	r2, #511	; 0x1ff
 80050be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80050c2:	e02d      	b.n	8005120 <HAL_UART_Receive+0xe4>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	22ff      	movs	r2, #255	; 0xff
 80050c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80050cc:	e028      	b.n	8005120 <HAL_UART_Receive+0xe4>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10d      	bne.n	80050f2 <HAL_UART_Receive+0xb6>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d104      	bne.n	80050e8 <HAL_UART_Receive+0xac>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	22ff      	movs	r2, #255	; 0xff
 80050e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80050e6:	e01b      	b.n	8005120 <HAL_UART_Receive+0xe4>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	227f      	movs	r2, #127	; 0x7f
 80050ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80050f0:	e016      	b.n	8005120 <HAL_UART_Receive+0xe4>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050fa:	d10d      	bne.n	8005118 <HAL_UART_Receive+0xdc>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d104      	bne.n	800510e <HAL_UART_Receive+0xd2>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	227f      	movs	r2, #127	; 0x7f
 8005108:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800510c:	e008      	b.n	8005120 <HAL_UART_Receive+0xe4>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	223f      	movs	r2, #63	; 0x3f
 8005112:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005116:	e003      	b.n	8005120 <HAL_UART_Receive+0xe4>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005126:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005130:	d108      	bne.n	8005144 <HAL_UART_Receive+0x108>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d104      	bne.n	8005144 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800513a:	2300      	movs	r3, #0
 800513c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	61bb      	str	r3, [r7, #24]
 8005142:	e003      	b.n	800514c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005148:	2300      	movs	r3, #0
 800514a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005154:	e033      	b.n	80051be <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	2200      	movs	r2, #0
 800515e:	2120      	movs	r1, #32
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 fbe0 	bl	8005926 <UART_WaitOnFlagUntilTimeout>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e032      	b.n	80051d6 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10c      	bne.n	8005190 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800517c:	b29a      	uxth	r2, r3
 800517e:	8a7b      	ldrh	r3, [r7, #18]
 8005180:	4013      	ands	r3, r2
 8005182:	b29a      	uxth	r2, r3
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	3302      	adds	r3, #2
 800518c:	61bb      	str	r3, [r7, #24]
 800518e:	e00d      	b.n	80051ac <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005196:	b29b      	uxth	r3, r3
 8005198:	b2da      	uxtb	r2, r3
 800519a:	8a7b      	ldrh	r3, [r7, #18]
 800519c:	b2db      	uxtb	r3, r3
 800519e:	4013      	ands	r3, r2
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	3301      	adds	r3, #1
 80051aa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	3b01      	subs	r3, #1
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1c5      	bne.n	8005156 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2220      	movs	r2, #32
 80051ce:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80051d0:	2300      	movs	r3, #0
 80051d2:	e000      	b.n	80051d6 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80051d4:	2302      	movs	r3, #2
  }
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3720      	adds	r7, #32
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
	...

080051e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051e4:	b08a      	sub	sp, #40	; 0x28
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051ea:	2300      	movs	r3, #0
 80051ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	431a      	orrs	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	431a      	orrs	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	4313      	orrs	r3, r2
 8005206:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	4ba4      	ldr	r3, [pc, #656]	; (80054a0 <UART_SetConfig+0x2c0>)
 8005210:	4013      	ands	r3, r2
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	6812      	ldr	r2, [r2, #0]
 8005216:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005218:	430b      	orrs	r3, r1
 800521a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	68da      	ldr	r2, [r3, #12]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a99      	ldr	r2, [pc, #612]	; (80054a4 <UART_SetConfig+0x2c4>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d004      	beq.n	800524c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005248:	4313      	orrs	r3, r2
 800524a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800525c:	430a      	orrs	r2, r1
 800525e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a90      	ldr	r2, [pc, #576]	; (80054a8 <UART_SetConfig+0x2c8>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d126      	bne.n	80052b8 <UART_SetConfig+0xd8>
 800526a:	4b90      	ldr	r3, [pc, #576]	; (80054ac <UART_SetConfig+0x2cc>)
 800526c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005270:	f003 0303 	and.w	r3, r3, #3
 8005274:	2b03      	cmp	r3, #3
 8005276:	d81b      	bhi.n	80052b0 <UART_SetConfig+0xd0>
 8005278:	a201      	add	r2, pc, #4	; (adr r2, 8005280 <UART_SetConfig+0xa0>)
 800527a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527e:	bf00      	nop
 8005280:	08005291 	.word	0x08005291
 8005284:	080052a1 	.word	0x080052a1
 8005288:	08005299 	.word	0x08005299
 800528c:	080052a9 	.word	0x080052a9
 8005290:	2301      	movs	r3, #1
 8005292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005296:	e116      	b.n	80054c6 <UART_SetConfig+0x2e6>
 8005298:	2302      	movs	r3, #2
 800529a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800529e:	e112      	b.n	80054c6 <UART_SetConfig+0x2e6>
 80052a0:	2304      	movs	r3, #4
 80052a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052a6:	e10e      	b.n	80054c6 <UART_SetConfig+0x2e6>
 80052a8:	2308      	movs	r3, #8
 80052aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ae:	e10a      	b.n	80054c6 <UART_SetConfig+0x2e6>
 80052b0:	2310      	movs	r3, #16
 80052b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052b6:	e106      	b.n	80054c6 <UART_SetConfig+0x2e6>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a7c      	ldr	r2, [pc, #496]	; (80054b0 <UART_SetConfig+0x2d0>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d138      	bne.n	8005334 <UART_SetConfig+0x154>
 80052c2:	4b7a      	ldr	r3, [pc, #488]	; (80054ac <UART_SetConfig+0x2cc>)
 80052c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c8:	f003 030c 	and.w	r3, r3, #12
 80052cc:	2b0c      	cmp	r3, #12
 80052ce:	d82d      	bhi.n	800532c <UART_SetConfig+0x14c>
 80052d0:	a201      	add	r2, pc, #4	; (adr r2, 80052d8 <UART_SetConfig+0xf8>)
 80052d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d6:	bf00      	nop
 80052d8:	0800530d 	.word	0x0800530d
 80052dc:	0800532d 	.word	0x0800532d
 80052e0:	0800532d 	.word	0x0800532d
 80052e4:	0800532d 	.word	0x0800532d
 80052e8:	0800531d 	.word	0x0800531d
 80052ec:	0800532d 	.word	0x0800532d
 80052f0:	0800532d 	.word	0x0800532d
 80052f4:	0800532d 	.word	0x0800532d
 80052f8:	08005315 	.word	0x08005315
 80052fc:	0800532d 	.word	0x0800532d
 8005300:	0800532d 	.word	0x0800532d
 8005304:	0800532d 	.word	0x0800532d
 8005308:	08005325 	.word	0x08005325
 800530c:	2300      	movs	r3, #0
 800530e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005312:	e0d8      	b.n	80054c6 <UART_SetConfig+0x2e6>
 8005314:	2302      	movs	r3, #2
 8005316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800531a:	e0d4      	b.n	80054c6 <UART_SetConfig+0x2e6>
 800531c:	2304      	movs	r3, #4
 800531e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005322:	e0d0      	b.n	80054c6 <UART_SetConfig+0x2e6>
 8005324:	2308      	movs	r3, #8
 8005326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800532a:	e0cc      	b.n	80054c6 <UART_SetConfig+0x2e6>
 800532c:	2310      	movs	r3, #16
 800532e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005332:	e0c8      	b.n	80054c6 <UART_SetConfig+0x2e6>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a5e      	ldr	r2, [pc, #376]	; (80054b4 <UART_SetConfig+0x2d4>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d125      	bne.n	800538a <UART_SetConfig+0x1aa>
 800533e:	4b5b      	ldr	r3, [pc, #364]	; (80054ac <UART_SetConfig+0x2cc>)
 8005340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005344:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005348:	2b30      	cmp	r3, #48	; 0x30
 800534a:	d016      	beq.n	800537a <UART_SetConfig+0x19a>
 800534c:	2b30      	cmp	r3, #48	; 0x30
 800534e:	d818      	bhi.n	8005382 <UART_SetConfig+0x1a2>
 8005350:	2b20      	cmp	r3, #32
 8005352:	d00a      	beq.n	800536a <UART_SetConfig+0x18a>
 8005354:	2b20      	cmp	r3, #32
 8005356:	d814      	bhi.n	8005382 <UART_SetConfig+0x1a2>
 8005358:	2b00      	cmp	r3, #0
 800535a:	d002      	beq.n	8005362 <UART_SetConfig+0x182>
 800535c:	2b10      	cmp	r3, #16
 800535e:	d008      	beq.n	8005372 <UART_SetConfig+0x192>
 8005360:	e00f      	b.n	8005382 <UART_SetConfig+0x1a2>
 8005362:	2300      	movs	r3, #0
 8005364:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005368:	e0ad      	b.n	80054c6 <UART_SetConfig+0x2e6>
 800536a:	2302      	movs	r3, #2
 800536c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005370:	e0a9      	b.n	80054c6 <UART_SetConfig+0x2e6>
 8005372:	2304      	movs	r3, #4
 8005374:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005378:	e0a5      	b.n	80054c6 <UART_SetConfig+0x2e6>
 800537a:	2308      	movs	r3, #8
 800537c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005380:	e0a1      	b.n	80054c6 <UART_SetConfig+0x2e6>
 8005382:	2310      	movs	r3, #16
 8005384:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005388:	e09d      	b.n	80054c6 <UART_SetConfig+0x2e6>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a4a      	ldr	r2, [pc, #296]	; (80054b8 <UART_SetConfig+0x2d8>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d125      	bne.n	80053e0 <UART_SetConfig+0x200>
 8005394:	4b45      	ldr	r3, [pc, #276]	; (80054ac <UART_SetConfig+0x2cc>)
 8005396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800539e:	2bc0      	cmp	r3, #192	; 0xc0
 80053a0:	d016      	beq.n	80053d0 <UART_SetConfig+0x1f0>
 80053a2:	2bc0      	cmp	r3, #192	; 0xc0
 80053a4:	d818      	bhi.n	80053d8 <UART_SetConfig+0x1f8>
 80053a6:	2b80      	cmp	r3, #128	; 0x80
 80053a8:	d00a      	beq.n	80053c0 <UART_SetConfig+0x1e0>
 80053aa:	2b80      	cmp	r3, #128	; 0x80
 80053ac:	d814      	bhi.n	80053d8 <UART_SetConfig+0x1f8>
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d002      	beq.n	80053b8 <UART_SetConfig+0x1d8>
 80053b2:	2b40      	cmp	r3, #64	; 0x40
 80053b4:	d008      	beq.n	80053c8 <UART_SetConfig+0x1e8>
 80053b6:	e00f      	b.n	80053d8 <UART_SetConfig+0x1f8>
 80053b8:	2300      	movs	r3, #0
 80053ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053be:	e082      	b.n	80054c6 <UART_SetConfig+0x2e6>
 80053c0:	2302      	movs	r3, #2
 80053c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053c6:	e07e      	b.n	80054c6 <UART_SetConfig+0x2e6>
 80053c8:	2304      	movs	r3, #4
 80053ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ce:	e07a      	b.n	80054c6 <UART_SetConfig+0x2e6>
 80053d0:	2308      	movs	r3, #8
 80053d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053d6:	e076      	b.n	80054c6 <UART_SetConfig+0x2e6>
 80053d8:	2310      	movs	r3, #16
 80053da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053de:	e072      	b.n	80054c6 <UART_SetConfig+0x2e6>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a35      	ldr	r2, [pc, #212]	; (80054bc <UART_SetConfig+0x2dc>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d12a      	bne.n	8005440 <UART_SetConfig+0x260>
 80053ea:	4b30      	ldr	r3, [pc, #192]	; (80054ac <UART_SetConfig+0x2cc>)
 80053ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053f8:	d01a      	beq.n	8005430 <UART_SetConfig+0x250>
 80053fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053fe:	d81b      	bhi.n	8005438 <UART_SetConfig+0x258>
 8005400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005404:	d00c      	beq.n	8005420 <UART_SetConfig+0x240>
 8005406:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800540a:	d815      	bhi.n	8005438 <UART_SetConfig+0x258>
 800540c:	2b00      	cmp	r3, #0
 800540e:	d003      	beq.n	8005418 <UART_SetConfig+0x238>
 8005410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005414:	d008      	beq.n	8005428 <UART_SetConfig+0x248>
 8005416:	e00f      	b.n	8005438 <UART_SetConfig+0x258>
 8005418:	2300      	movs	r3, #0
 800541a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800541e:	e052      	b.n	80054c6 <UART_SetConfig+0x2e6>
 8005420:	2302      	movs	r3, #2
 8005422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005426:	e04e      	b.n	80054c6 <UART_SetConfig+0x2e6>
 8005428:	2304      	movs	r3, #4
 800542a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800542e:	e04a      	b.n	80054c6 <UART_SetConfig+0x2e6>
 8005430:	2308      	movs	r3, #8
 8005432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005436:	e046      	b.n	80054c6 <UART_SetConfig+0x2e6>
 8005438:	2310      	movs	r3, #16
 800543a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800543e:	e042      	b.n	80054c6 <UART_SetConfig+0x2e6>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a17      	ldr	r2, [pc, #92]	; (80054a4 <UART_SetConfig+0x2c4>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d13a      	bne.n	80054c0 <UART_SetConfig+0x2e0>
 800544a:	4b18      	ldr	r3, [pc, #96]	; (80054ac <UART_SetConfig+0x2cc>)
 800544c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005450:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005454:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005458:	d01a      	beq.n	8005490 <UART_SetConfig+0x2b0>
 800545a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800545e:	d81b      	bhi.n	8005498 <UART_SetConfig+0x2b8>
 8005460:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005464:	d00c      	beq.n	8005480 <UART_SetConfig+0x2a0>
 8005466:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800546a:	d815      	bhi.n	8005498 <UART_SetConfig+0x2b8>
 800546c:	2b00      	cmp	r3, #0
 800546e:	d003      	beq.n	8005478 <UART_SetConfig+0x298>
 8005470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005474:	d008      	beq.n	8005488 <UART_SetConfig+0x2a8>
 8005476:	e00f      	b.n	8005498 <UART_SetConfig+0x2b8>
 8005478:	2300      	movs	r3, #0
 800547a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800547e:	e022      	b.n	80054c6 <UART_SetConfig+0x2e6>
 8005480:	2302      	movs	r3, #2
 8005482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005486:	e01e      	b.n	80054c6 <UART_SetConfig+0x2e6>
 8005488:	2304      	movs	r3, #4
 800548a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800548e:	e01a      	b.n	80054c6 <UART_SetConfig+0x2e6>
 8005490:	2308      	movs	r3, #8
 8005492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005496:	e016      	b.n	80054c6 <UART_SetConfig+0x2e6>
 8005498:	2310      	movs	r3, #16
 800549a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800549e:	e012      	b.n	80054c6 <UART_SetConfig+0x2e6>
 80054a0:	efff69f3 	.word	0xefff69f3
 80054a4:	40008000 	.word	0x40008000
 80054a8:	40013800 	.word	0x40013800
 80054ac:	40021000 	.word	0x40021000
 80054b0:	40004400 	.word	0x40004400
 80054b4:	40004800 	.word	0x40004800
 80054b8:	40004c00 	.word	0x40004c00
 80054bc:	40005000 	.word	0x40005000
 80054c0:	2310      	movs	r3, #16
 80054c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a9f      	ldr	r2, [pc, #636]	; (8005748 <UART_SetConfig+0x568>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d17a      	bne.n	80055c6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054d4:	2b08      	cmp	r3, #8
 80054d6:	d824      	bhi.n	8005522 <UART_SetConfig+0x342>
 80054d8:	a201      	add	r2, pc, #4	; (adr r2, 80054e0 <UART_SetConfig+0x300>)
 80054da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054de:	bf00      	nop
 80054e0:	08005505 	.word	0x08005505
 80054e4:	08005523 	.word	0x08005523
 80054e8:	0800550d 	.word	0x0800550d
 80054ec:	08005523 	.word	0x08005523
 80054f0:	08005513 	.word	0x08005513
 80054f4:	08005523 	.word	0x08005523
 80054f8:	08005523 	.word	0x08005523
 80054fc:	08005523 	.word	0x08005523
 8005500:	0800551b 	.word	0x0800551b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005504:	f7fd fb30 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 8005508:	61f8      	str	r0, [r7, #28]
        break;
 800550a:	e010      	b.n	800552e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800550c:	4b8f      	ldr	r3, [pc, #572]	; (800574c <UART_SetConfig+0x56c>)
 800550e:	61fb      	str	r3, [r7, #28]
        break;
 8005510:	e00d      	b.n	800552e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005512:	f7fd fa91 	bl	8002a38 <HAL_RCC_GetSysClockFreq>
 8005516:	61f8      	str	r0, [r7, #28]
        break;
 8005518:	e009      	b.n	800552e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800551a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800551e:	61fb      	str	r3, [r7, #28]
        break;
 8005520:	e005      	b.n	800552e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005522:	2300      	movs	r3, #0
 8005524:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800552c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	2b00      	cmp	r3, #0
 8005532:	f000 80fb 	beq.w	800572c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	685a      	ldr	r2, [r3, #4]
 800553a:	4613      	mov	r3, r2
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	4413      	add	r3, r2
 8005540:	69fa      	ldr	r2, [r7, #28]
 8005542:	429a      	cmp	r2, r3
 8005544:	d305      	bcc.n	8005552 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800554c:	69fa      	ldr	r2, [r7, #28]
 800554e:	429a      	cmp	r2, r3
 8005550:	d903      	bls.n	800555a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005558:	e0e8      	b.n	800572c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	2200      	movs	r2, #0
 800555e:	461c      	mov	r4, r3
 8005560:	4615      	mov	r5, r2
 8005562:	f04f 0200 	mov.w	r2, #0
 8005566:	f04f 0300 	mov.w	r3, #0
 800556a:	022b      	lsls	r3, r5, #8
 800556c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005570:	0222      	lsls	r2, r4, #8
 8005572:	68f9      	ldr	r1, [r7, #12]
 8005574:	6849      	ldr	r1, [r1, #4]
 8005576:	0849      	lsrs	r1, r1, #1
 8005578:	2000      	movs	r0, #0
 800557a:	4688      	mov	r8, r1
 800557c:	4681      	mov	r9, r0
 800557e:	eb12 0a08 	adds.w	sl, r2, r8
 8005582:	eb43 0b09 	adc.w	fp, r3, r9
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	603b      	str	r3, [r7, #0]
 800558e:	607a      	str	r2, [r7, #4]
 8005590:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005594:	4650      	mov	r0, sl
 8005596:	4659      	mov	r1, fp
 8005598:	f7fa fe7a 	bl	8000290 <__aeabi_uldivmod>
 800559c:	4602      	mov	r2, r0
 800559e:	460b      	mov	r3, r1
 80055a0:	4613      	mov	r3, r2
 80055a2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055aa:	d308      	bcc.n	80055be <UART_SetConfig+0x3de>
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055b2:	d204      	bcs.n	80055be <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	60da      	str	r2, [r3, #12]
 80055bc:	e0b6      	b.n	800572c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80055c4:	e0b2      	b.n	800572c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ce:	d15e      	bne.n	800568e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80055d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055d4:	2b08      	cmp	r3, #8
 80055d6:	d828      	bhi.n	800562a <UART_SetConfig+0x44a>
 80055d8:	a201      	add	r2, pc, #4	; (adr r2, 80055e0 <UART_SetConfig+0x400>)
 80055da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055de:	bf00      	nop
 80055e0:	08005605 	.word	0x08005605
 80055e4:	0800560d 	.word	0x0800560d
 80055e8:	08005615 	.word	0x08005615
 80055ec:	0800562b 	.word	0x0800562b
 80055f0:	0800561b 	.word	0x0800561b
 80055f4:	0800562b 	.word	0x0800562b
 80055f8:	0800562b 	.word	0x0800562b
 80055fc:	0800562b 	.word	0x0800562b
 8005600:	08005623 	.word	0x08005623
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005604:	f7fd fab0 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 8005608:	61f8      	str	r0, [r7, #28]
        break;
 800560a:	e014      	b.n	8005636 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800560c:	f7fd fac2 	bl	8002b94 <HAL_RCC_GetPCLK2Freq>
 8005610:	61f8      	str	r0, [r7, #28]
        break;
 8005612:	e010      	b.n	8005636 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005614:	4b4d      	ldr	r3, [pc, #308]	; (800574c <UART_SetConfig+0x56c>)
 8005616:	61fb      	str	r3, [r7, #28]
        break;
 8005618:	e00d      	b.n	8005636 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800561a:	f7fd fa0d 	bl	8002a38 <HAL_RCC_GetSysClockFreq>
 800561e:	61f8      	str	r0, [r7, #28]
        break;
 8005620:	e009      	b.n	8005636 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005626:	61fb      	str	r3, [r7, #28]
        break;
 8005628:	e005      	b.n	8005636 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800562a:	2300      	movs	r3, #0
 800562c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005634:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d077      	beq.n	800572c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	005a      	lsls	r2, r3, #1
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	085b      	lsrs	r3, r3, #1
 8005646:	441a      	add	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005650:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	2b0f      	cmp	r3, #15
 8005656:	d916      	bls.n	8005686 <UART_SetConfig+0x4a6>
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800565e:	d212      	bcs.n	8005686 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	b29b      	uxth	r3, r3
 8005664:	f023 030f 	bic.w	r3, r3, #15
 8005668:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	085b      	lsrs	r3, r3, #1
 800566e:	b29b      	uxth	r3, r3
 8005670:	f003 0307 	and.w	r3, r3, #7
 8005674:	b29a      	uxth	r2, r3
 8005676:	8afb      	ldrh	r3, [r7, #22]
 8005678:	4313      	orrs	r3, r2
 800567a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	8afa      	ldrh	r2, [r7, #22]
 8005682:	60da      	str	r2, [r3, #12]
 8005684:	e052      	b.n	800572c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800568c:	e04e      	b.n	800572c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800568e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005692:	2b08      	cmp	r3, #8
 8005694:	d827      	bhi.n	80056e6 <UART_SetConfig+0x506>
 8005696:	a201      	add	r2, pc, #4	; (adr r2, 800569c <UART_SetConfig+0x4bc>)
 8005698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569c:	080056c1 	.word	0x080056c1
 80056a0:	080056c9 	.word	0x080056c9
 80056a4:	080056d1 	.word	0x080056d1
 80056a8:	080056e7 	.word	0x080056e7
 80056ac:	080056d7 	.word	0x080056d7
 80056b0:	080056e7 	.word	0x080056e7
 80056b4:	080056e7 	.word	0x080056e7
 80056b8:	080056e7 	.word	0x080056e7
 80056bc:	080056df 	.word	0x080056df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056c0:	f7fd fa52 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 80056c4:	61f8      	str	r0, [r7, #28]
        break;
 80056c6:	e014      	b.n	80056f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056c8:	f7fd fa64 	bl	8002b94 <HAL_RCC_GetPCLK2Freq>
 80056cc:	61f8      	str	r0, [r7, #28]
        break;
 80056ce:	e010      	b.n	80056f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056d0:	4b1e      	ldr	r3, [pc, #120]	; (800574c <UART_SetConfig+0x56c>)
 80056d2:	61fb      	str	r3, [r7, #28]
        break;
 80056d4:	e00d      	b.n	80056f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056d6:	f7fd f9af 	bl	8002a38 <HAL_RCC_GetSysClockFreq>
 80056da:	61f8      	str	r0, [r7, #28]
        break;
 80056dc:	e009      	b.n	80056f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056e2:	61fb      	str	r3, [r7, #28]
        break;
 80056e4:	e005      	b.n	80056f2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80056e6:	2300      	movs	r3, #0
 80056e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80056f0:	bf00      	nop
    }

    if (pclk != 0U)
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d019      	beq.n	800572c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	085a      	lsrs	r2, r3, #1
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	441a      	add	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	fbb2 f3f3 	udiv	r3, r2, r3
 800570a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	2b0f      	cmp	r3, #15
 8005710:	d909      	bls.n	8005726 <UART_SetConfig+0x546>
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005718:	d205      	bcs.n	8005726 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	b29a      	uxth	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	60da      	str	r2, [r3, #12]
 8005724:	e002      	b.n	800572c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005738:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800573c:	4618      	mov	r0, r3
 800573e:	3728      	adds	r7, #40	; 0x28
 8005740:	46bd      	mov	sp, r7
 8005742:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005746:	bf00      	nop
 8005748:	40008000 	.word	0x40008000
 800574c:	00f42400 	.word	0x00f42400

08005750 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575c:	f003 0301 	and.w	r3, r3, #1
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00a      	beq.n	800577a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	430a      	orrs	r2, r1
 8005778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00a      	beq.n	800579c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	430a      	orrs	r2, r1
 800579a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a0:	f003 0304 	and.w	r3, r3, #4
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00a      	beq.n	80057be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	430a      	orrs	r2, r1
 80057bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c2:	f003 0308 	and.w	r3, r3, #8
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00a      	beq.n	80057e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	430a      	orrs	r2, r1
 80057de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e4:	f003 0310 	and.w	r3, r3, #16
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00a      	beq.n	8005802 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	430a      	orrs	r2, r1
 8005800:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005806:	f003 0320 	and.w	r3, r3, #32
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00a      	beq.n	8005824 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	430a      	orrs	r2, r1
 8005822:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582c:	2b00      	cmp	r3, #0
 800582e:	d01a      	beq.n	8005866 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800584e:	d10a      	bne.n	8005866 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	430a      	orrs	r2, r1
 8005864:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00a      	beq.n	8005888 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	605a      	str	r2, [r3, #4]
  }
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af02      	add	r7, sp, #8
 800589a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058a4:	f7fc f85e 	bl	8001964 <HAL_GetTick>
 80058a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0308 	and.w	r3, r3, #8
 80058b4:	2b08      	cmp	r3, #8
 80058b6:	d10e      	bne.n	80058d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058bc:	9300      	str	r3, [sp, #0]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f82d 	bl	8005926 <UART_WaitOnFlagUntilTimeout>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d001      	beq.n	80058d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e023      	b.n	800591e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0304 	and.w	r3, r3, #4
 80058e0:	2b04      	cmp	r3, #4
 80058e2:	d10e      	bne.n	8005902 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f817 	bl	8005926 <UART_WaitOnFlagUntilTimeout>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d001      	beq.n	8005902 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e00d      	b.n	800591e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2220      	movs	r2, #32
 8005906:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2220      	movs	r2, #32
 800590c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b09c      	sub	sp, #112	; 0x70
 800592a:	af00      	add	r7, sp, #0
 800592c:	60f8      	str	r0, [r7, #12]
 800592e:	60b9      	str	r1, [r7, #8]
 8005930:	603b      	str	r3, [r7, #0]
 8005932:	4613      	mov	r3, r2
 8005934:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005936:	e0a5      	b.n	8005a84 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005938:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800593a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593e:	f000 80a1 	beq.w	8005a84 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005942:	f7fc f80f 	bl	8001964 <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800594e:	429a      	cmp	r2, r3
 8005950:	d302      	bcc.n	8005958 <UART_WaitOnFlagUntilTimeout+0x32>
 8005952:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005954:	2b00      	cmp	r3, #0
 8005956:	d13e      	bne.n	80059d6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005960:	e853 3f00 	ldrex	r3, [r3]
 8005964:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005968:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800596c:	667b      	str	r3, [r7, #100]	; 0x64
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	461a      	mov	r2, r3
 8005974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005976:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005978:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800597c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800597e:	e841 2300 	strex	r3, r2, [r1]
 8005982:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1e6      	bne.n	8005958 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	3308      	adds	r3, #8
 8005990:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005994:	e853 3f00 	ldrex	r3, [r3]
 8005998:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800599a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599c:	f023 0301 	bic.w	r3, r3, #1
 80059a0:	663b      	str	r3, [r7, #96]	; 0x60
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	3308      	adds	r3, #8
 80059a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80059aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80059ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059b2:	e841 2300 	strex	r3, r2, [r1]
 80059b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80059b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1e5      	bne.n	800598a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2220      	movs	r2, #32
 80059c2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2220      	movs	r2, #32
 80059c8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e067      	b.n	8005aa6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0304 	and.w	r3, r3, #4
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d04f      	beq.n	8005a84 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	69db      	ldr	r3, [r3, #28]
 80059ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059f2:	d147      	bne.n	8005a84 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059fc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a06:	e853 3f00 	ldrex	r3, [r3]
 8005a0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	461a      	mov	r2, r3
 8005a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a1e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a24:	e841 2300 	strex	r3, r2, [r1]
 8005a28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1e6      	bne.n	80059fe <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	3308      	adds	r3, #8
 8005a36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	e853 3f00 	ldrex	r3, [r3]
 8005a3e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	f023 0301 	bic.w	r3, r3, #1
 8005a46:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	3308      	adds	r3, #8
 8005a4e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a50:	623a      	str	r2, [r7, #32]
 8005a52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a54:	69f9      	ldr	r1, [r7, #28]
 8005a56:	6a3a      	ldr	r2, [r7, #32]
 8005a58:	e841 2300 	strex	r3, r2, [r1]
 8005a5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1e5      	bne.n	8005a30 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2220      	movs	r2, #32
 8005a68:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2220      	movs	r2, #32
 8005a74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e010      	b.n	8005aa6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	69da      	ldr	r2, [r3, #28]
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	bf0c      	ite	eq
 8005a94:	2301      	moveq	r3, #1
 8005a96:	2300      	movne	r3, #0
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	79fb      	ldrb	r3, [r7, #7]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	f43f af4a 	beq.w	8005938 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3770      	adds	r7, #112	; 0x70
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <atoi>:
 8005aae:	220a      	movs	r2, #10
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	f000 b9a7 	b.w	8005e04 <strtol>
	...

08005ab8 <__errno>:
 8005ab8:	4b01      	ldr	r3, [pc, #4]	; (8005ac0 <__errno+0x8>)
 8005aba:	6818      	ldr	r0, [r3, #0]
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	20000194 	.word	0x20000194

08005ac4 <__libc_init_array>:
 8005ac4:	b570      	push	{r4, r5, r6, lr}
 8005ac6:	4d0d      	ldr	r5, [pc, #52]	; (8005afc <__libc_init_array+0x38>)
 8005ac8:	4c0d      	ldr	r4, [pc, #52]	; (8005b00 <__libc_init_array+0x3c>)
 8005aca:	1b64      	subs	r4, r4, r5
 8005acc:	10a4      	asrs	r4, r4, #2
 8005ace:	2600      	movs	r6, #0
 8005ad0:	42a6      	cmp	r6, r4
 8005ad2:	d109      	bne.n	8005ae8 <__libc_init_array+0x24>
 8005ad4:	4d0b      	ldr	r5, [pc, #44]	; (8005b04 <__libc_init_array+0x40>)
 8005ad6:	4c0c      	ldr	r4, [pc, #48]	; (8005b08 <__libc_init_array+0x44>)
 8005ad8:	f001 f998 	bl	8006e0c <_init>
 8005adc:	1b64      	subs	r4, r4, r5
 8005ade:	10a4      	asrs	r4, r4, #2
 8005ae0:	2600      	movs	r6, #0
 8005ae2:	42a6      	cmp	r6, r4
 8005ae4:	d105      	bne.n	8005af2 <__libc_init_array+0x2e>
 8005ae6:	bd70      	pop	{r4, r5, r6, pc}
 8005ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aec:	4798      	blx	r3
 8005aee:	3601      	adds	r6, #1
 8005af0:	e7ee      	b.n	8005ad0 <__libc_init_array+0xc>
 8005af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005af6:	4798      	blx	r3
 8005af8:	3601      	adds	r6, #1
 8005afa:	e7f2      	b.n	8005ae2 <__libc_init_array+0x1e>
 8005afc:	08007154 	.word	0x08007154
 8005b00:	08007154 	.word	0x08007154
 8005b04:	08007154 	.word	0x08007154
 8005b08:	08007158 	.word	0x08007158

08005b0c <memset>:
 8005b0c:	4402      	add	r2, r0
 8005b0e:	4603      	mov	r3, r0
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d100      	bne.n	8005b16 <memset+0xa>
 8005b14:	4770      	bx	lr
 8005b16:	f803 1b01 	strb.w	r1, [r3], #1
 8005b1a:	e7f9      	b.n	8005b10 <memset+0x4>

08005b1c <iprintf>:
 8005b1c:	b40f      	push	{r0, r1, r2, r3}
 8005b1e:	4b0a      	ldr	r3, [pc, #40]	; (8005b48 <iprintf+0x2c>)
 8005b20:	b513      	push	{r0, r1, r4, lr}
 8005b22:	681c      	ldr	r4, [r3, #0]
 8005b24:	b124      	cbz	r4, 8005b30 <iprintf+0x14>
 8005b26:	69a3      	ldr	r3, [r4, #24]
 8005b28:	b913      	cbnz	r3, 8005b30 <iprintf+0x14>
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	f000 fb6c 	bl	8006208 <__sinit>
 8005b30:	ab05      	add	r3, sp, #20
 8005b32:	9a04      	ldr	r2, [sp, #16]
 8005b34:	68a1      	ldr	r1, [r4, #8]
 8005b36:	9301      	str	r3, [sp, #4]
 8005b38:	4620      	mov	r0, r4
 8005b3a:	f000 fd8f 	bl	800665c <_vfiprintf_r>
 8005b3e:	b002      	add	sp, #8
 8005b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b44:	b004      	add	sp, #16
 8005b46:	4770      	bx	lr
 8005b48:	20000194 	.word	0x20000194

08005b4c <_puts_r>:
 8005b4c:	b570      	push	{r4, r5, r6, lr}
 8005b4e:	460e      	mov	r6, r1
 8005b50:	4605      	mov	r5, r0
 8005b52:	b118      	cbz	r0, 8005b5c <_puts_r+0x10>
 8005b54:	6983      	ldr	r3, [r0, #24]
 8005b56:	b90b      	cbnz	r3, 8005b5c <_puts_r+0x10>
 8005b58:	f000 fb56 	bl	8006208 <__sinit>
 8005b5c:	69ab      	ldr	r3, [r5, #24]
 8005b5e:	68ac      	ldr	r4, [r5, #8]
 8005b60:	b913      	cbnz	r3, 8005b68 <_puts_r+0x1c>
 8005b62:	4628      	mov	r0, r5
 8005b64:	f000 fb50 	bl	8006208 <__sinit>
 8005b68:	4b2c      	ldr	r3, [pc, #176]	; (8005c1c <_puts_r+0xd0>)
 8005b6a:	429c      	cmp	r4, r3
 8005b6c:	d120      	bne.n	8005bb0 <_puts_r+0x64>
 8005b6e:	686c      	ldr	r4, [r5, #4]
 8005b70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b72:	07db      	lsls	r3, r3, #31
 8005b74:	d405      	bmi.n	8005b82 <_puts_r+0x36>
 8005b76:	89a3      	ldrh	r3, [r4, #12]
 8005b78:	0598      	lsls	r0, r3, #22
 8005b7a:	d402      	bmi.n	8005b82 <_puts_r+0x36>
 8005b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b7e:	f000 fbf3 	bl	8006368 <__retarget_lock_acquire_recursive>
 8005b82:	89a3      	ldrh	r3, [r4, #12]
 8005b84:	0719      	lsls	r1, r3, #28
 8005b86:	d51d      	bpl.n	8005bc4 <_puts_r+0x78>
 8005b88:	6923      	ldr	r3, [r4, #16]
 8005b8a:	b1db      	cbz	r3, 8005bc4 <_puts_r+0x78>
 8005b8c:	3e01      	subs	r6, #1
 8005b8e:	68a3      	ldr	r3, [r4, #8]
 8005b90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b94:	3b01      	subs	r3, #1
 8005b96:	60a3      	str	r3, [r4, #8]
 8005b98:	bb39      	cbnz	r1, 8005bea <_puts_r+0x9e>
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	da38      	bge.n	8005c10 <_puts_r+0xc4>
 8005b9e:	4622      	mov	r2, r4
 8005ba0:	210a      	movs	r1, #10
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	f000 f938 	bl	8005e18 <__swbuf_r>
 8005ba8:	3001      	adds	r0, #1
 8005baa:	d011      	beq.n	8005bd0 <_puts_r+0x84>
 8005bac:	250a      	movs	r5, #10
 8005bae:	e011      	b.n	8005bd4 <_puts_r+0x88>
 8005bb0:	4b1b      	ldr	r3, [pc, #108]	; (8005c20 <_puts_r+0xd4>)
 8005bb2:	429c      	cmp	r4, r3
 8005bb4:	d101      	bne.n	8005bba <_puts_r+0x6e>
 8005bb6:	68ac      	ldr	r4, [r5, #8]
 8005bb8:	e7da      	b.n	8005b70 <_puts_r+0x24>
 8005bba:	4b1a      	ldr	r3, [pc, #104]	; (8005c24 <_puts_r+0xd8>)
 8005bbc:	429c      	cmp	r4, r3
 8005bbe:	bf08      	it	eq
 8005bc0:	68ec      	ldreq	r4, [r5, #12]
 8005bc2:	e7d5      	b.n	8005b70 <_puts_r+0x24>
 8005bc4:	4621      	mov	r1, r4
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	f000 f978 	bl	8005ebc <__swsetup_r>
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	d0dd      	beq.n	8005b8c <_puts_r+0x40>
 8005bd0:	f04f 35ff 	mov.w	r5, #4294967295
 8005bd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bd6:	07da      	lsls	r2, r3, #31
 8005bd8:	d405      	bmi.n	8005be6 <_puts_r+0x9a>
 8005bda:	89a3      	ldrh	r3, [r4, #12]
 8005bdc:	059b      	lsls	r3, r3, #22
 8005bde:	d402      	bmi.n	8005be6 <_puts_r+0x9a>
 8005be0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005be2:	f000 fbc2 	bl	800636a <__retarget_lock_release_recursive>
 8005be6:	4628      	mov	r0, r5
 8005be8:	bd70      	pop	{r4, r5, r6, pc}
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	da04      	bge.n	8005bf8 <_puts_r+0xac>
 8005bee:	69a2      	ldr	r2, [r4, #24]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	dc06      	bgt.n	8005c02 <_puts_r+0xb6>
 8005bf4:	290a      	cmp	r1, #10
 8005bf6:	d004      	beq.n	8005c02 <_puts_r+0xb6>
 8005bf8:	6823      	ldr	r3, [r4, #0]
 8005bfa:	1c5a      	adds	r2, r3, #1
 8005bfc:	6022      	str	r2, [r4, #0]
 8005bfe:	7019      	strb	r1, [r3, #0]
 8005c00:	e7c5      	b.n	8005b8e <_puts_r+0x42>
 8005c02:	4622      	mov	r2, r4
 8005c04:	4628      	mov	r0, r5
 8005c06:	f000 f907 	bl	8005e18 <__swbuf_r>
 8005c0a:	3001      	adds	r0, #1
 8005c0c:	d1bf      	bne.n	8005b8e <_puts_r+0x42>
 8005c0e:	e7df      	b.n	8005bd0 <_puts_r+0x84>
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	250a      	movs	r5, #10
 8005c14:	1c5a      	adds	r2, r3, #1
 8005c16:	6022      	str	r2, [r4, #0]
 8005c18:	701d      	strb	r5, [r3, #0]
 8005c1a:	e7db      	b.n	8005bd4 <_puts_r+0x88>
 8005c1c:	080070d8 	.word	0x080070d8
 8005c20:	080070f8 	.word	0x080070f8
 8005c24:	080070b8 	.word	0x080070b8

08005c28 <puts>:
 8005c28:	4b02      	ldr	r3, [pc, #8]	; (8005c34 <puts+0xc>)
 8005c2a:	4601      	mov	r1, r0
 8005c2c:	6818      	ldr	r0, [r3, #0]
 8005c2e:	f7ff bf8d 	b.w	8005b4c <_puts_r>
 8005c32:	bf00      	nop
 8005c34:	20000194 	.word	0x20000194

08005c38 <strcpy>:
 8005c38:	4603      	mov	r3, r0
 8005c3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c3e:	f803 2b01 	strb.w	r2, [r3], #1
 8005c42:	2a00      	cmp	r2, #0
 8005c44:	d1f9      	bne.n	8005c3a <strcpy+0x2>
 8005c46:	4770      	bx	lr

08005c48 <strtok>:
 8005c48:	4b16      	ldr	r3, [pc, #88]	; (8005ca4 <strtok+0x5c>)
 8005c4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c4c:	681e      	ldr	r6, [r3, #0]
 8005c4e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8005c50:	4605      	mov	r5, r0
 8005c52:	b9fc      	cbnz	r4, 8005c94 <strtok+0x4c>
 8005c54:	2050      	movs	r0, #80	; 0x50
 8005c56:	9101      	str	r1, [sp, #4]
 8005c58:	f000 fbee 	bl	8006438 <malloc>
 8005c5c:	9901      	ldr	r1, [sp, #4]
 8005c5e:	65b0      	str	r0, [r6, #88]	; 0x58
 8005c60:	4602      	mov	r2, r0
 8005c62:	b920      	cbnz	r0, 8005c6e <strtok+0x26>
 8005c64:	4b10      	ldr	r3, [pc, #64]	; (8005ca8 <strtok+0x60>)
 8005c66:	4811      	ldr	r0, [pc, #68]	; (8005cac <strtok+0x64>)
 8005c68:	2157      	movs	r1, #87	; 0x57
 8005c6a:	f000 f995 	bl	8005f98 <__assert_func>
 8005c6e:	e9c0 4400 	strd	r4, r4, [r0]
 8005c72:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005c76:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005c7a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005c7e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005c82:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005c86:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005c8a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005c8e:	6184      	str	r4, [r0, #24]
 8005c90:	7704      	strb	r4, [r0, #28]
 8005c92:	6244      	str	r4, [r0, #36]	; 0x24
 8005c94:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8005c96:	2301      	movs	r3, #1
 8005c98:	4628      	mov	r0, r5
 8005c9a:	b002      	add	sp, #8
 8005c9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005ca0:	f000 b806 	b.w	8005cb0 <__strtok_r>
 8005ca4:	20000194 	.word	0x20000194
 8005ca8:	08006f04 	.word	0x08006f04
 8005cac:	08006f1b 	.word	0x08006f1b

08005cb0 <__strtok_r>:
 8005cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cb2:	b908      	cbnz	r0, 8005cb8 <__strtok_r+0x8>
 8005cb4:	6810      	ldr	r0, [r2, #0]
 8005cb6:	b188      	cbz	r0, 8005cdc <__strtok_r+0x2c>
 8005cb8:	4604      	mov	r4, r0
 8005cba:	4620      	mov	r0, r4
 8005cbc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005cc0:	460f      	mov	r7, r1
 8005cc2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005cc6:	b91e      	cbnz	r6, 8005cd0 <__strtok_r+0x20>
 8005cc8:	b965      	cbnz	r5, 8005ce4 <__strtok_r+0x34>
 8005cca:	6015      	str	r5, [r2, #0]
 8005ccc:	4628      	mov	r0, r5
 8005cce:	e005      	b.n	8005cdc <__strtok_r+0x2c>
 8005cd0:	42b5      	cmp	r5, r6
 8005cd2:	d1f6      	bne.n	8005cc2 <__strtok_r+0x12>
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1f0      	bne.n	8005cba <__strtok_r+0xa>
 8005cd8:	6014      	str	r4, [r2, #0]
 8005cda:	7003      	strb	r3, [r0, #0]
 8005cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cde:	461c      	mov	r4, r3
 8005ce0:	e00c      	b.n	8005cfc <__strtok_r+0x4c>
 8005ce2:	b915      	cbnz	r5, 8005cea <__strtok_r+0x3a>
 8005ce4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005ce8:	460e      	mov	r6, r1
 8005cea:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005cee:	42ab      	cmp	r3, r5
 8005cf0:	d1f7      	bne.n	8005ce2 <__strtok_r+0x32>
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d0f3      	beq.n	8005cde <__strtok_r+0x2e>
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005cfc:	6014      	str	r4, [r2, #0]
 8005cfe:	e7ed      	b.n	8005cdc <__strtok_r+0x2c>

08005d00 <_strtol_l.constprop.0>:
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d06:	d001      	beq.n	8005d0c <_strtol_l.constprop.0+0xc>
 8005d08:	2b24      	cmp	r3, #36	; 0x24
 8005d0a:	d906      	bls.n	8005d1a <_strtol_l.constprop.0+0x1a>
 8005d0c:	f7ff fed4 	bl	8005ab8 <__errno>
 8005d10:	2316      	movs	r3, #22
 8005d12:	6003      	str	r3, [r0, #0]
 8005d14:	2000      	movs	r0, #0
 8005d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d1a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005e00 <_strtol_l.constprop.0+0x100>
 8005d1e:	460d      	mov	r5, r1
 8005d20:	462e      	mov	r6, r5
 8005d22:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d26:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005d2a:	f017 0708 	ands.w	r7, r7, #8
 8005d2e:	d1f7      	bne.n	8005d20 <_strtol_l.constprop.0+0x20>
 8005d30:	2c2d      	cmp	r4, #45	; 0x2d
 8005d32:	d132      	bne.n	8005d9a <_strtol_l.constprop.0+0x9a>
 8005d34:	782c      	ldrb	r4, [r5, #0]
 8005d36:	2701      	movs	r7, #1
 8005d38:	1cb5      	adds	r5, r6, #2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d05b      	beq.n	8005df6 <_strtol_l.constprop.0+0xf6>
 8005d3e:	2b10      	cmp	r3, #16
 8005d40:	d109      	bne.n	8005d56 <_strtol_l.constprop.0+0x56>
 8005d42:	2c30      	cmp	r4, #48	; 0x30
 8005d44:	d107      	bne.n	8005d56 <_strtol_l.constprop.0+0x56>
 8005d46:	782c      	ldrb	r4, [r5, #0]
 8005d48:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005d4c:	2c58      	cmp	r4, #88	; 0x58
 8005d4e:	d14d      	bne.n	8005dec <_strtol_l.constprop.0+0xec>
 8005d50:	786c      	ldrb	r4, [r5, #1]
 8005d52:	2310      	movs	r3, #16
 8005d54:	3502      	adds	r5, #2
 8005d56:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005d5a:	f108 38ff 	add.w	r8, r8, #4294967295
 8005d5e:	f04f 0c00 	mov.w	ip, #0
 8005d62:	fbb8 f9f3 	udiv	r9, r8, r3
 8005d66:	4666      	mov	r6, ip
 8005d68:	fb03 8a19 	mls	sl, r3, r9, r8
 8005d6c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005d70:	f1be 0f09 	cmp.w	lr, #9
 8005d74:	d816      	bhi.n	8005da4 <_strtol_l.constprop.0+0xa4>
 8005d76:	4674      	mov	r4, lr
 8005d78:	42a3      	cmp	r3, r4
 8005d7a:	dd24      	ble.n	8005dc6 <_strtol_l.constprop.0+0xc6>
 8005d7c:	f1bc 0f00 	cmp.w	ip, #0
 8005d80:	db1e      	blt.n	8005dc0 <_strtol_l.constprop.0+0xc0>
 8005d82:	45b1      	cmp	r9, r6
 8005d84:	d31c      	bcc.n	8005dc0 <_strtol_l.constprop.0+0xc0>
 8005d86:	d101      	bne.n	8005d8c <_strtol_l.constprop.0+0x8c>
 8005d88:	45a2      	cmp	sl, r4
 8005d8a:	db19      	blt.n	8005dc0 <_strtol_l.constprop.0+0xc0>
 8005d8c:	fb06 4603 	mla	r6, r6, r3, r4
 8005d90:	f04f 0c01 	mov.w	ip, #1
 8005d94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d98:	e7e8      	b.n	8005d6c <_strtol_l.constprop.0+0x6c>
 8005d9a:	2c2b      	cmp	r4, #43	; 0x2b
 8005d9c:	bf04      	itt	eq
 8005d9e:	782c      	ldrbeq	r4, [r5, #0]
 8005da0:	1cb5      	addeq	r5, r6, #2
 8005da2:	e7ca      	b.n	8005d3a <_strtol_l.constprop.0+0x3a>
 8005da4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005da8:	f1be 0f19 	cmp.w	lr, #25
 8005dac:	d801      	bhi.n	8005db2 <_strtol_l.constprop.0+0xb2>
 8005dae:	3c37      	subs	r4, #55	; 0x37
 8005db0:	e7e2      	b.n	8005d78 <_strtol_l.constprop.0+0x78>
 8005db2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005db6:	f1be 0f19 	cmp.w	lr, #25
 8005dba:	d804      	bhi.n	8005dc6 <_strtol_l.constprop.0+0xc6>
 8005dbc:	3c57      	subs	r4, #87	; 0x57
 8005dbe:	e7db      	b.n	8005d78 <_strtol_l.constprop.0+0x78>
 8005dc0:	f04f 3cff 	mov.w	ip, #4294967295
 8005dc4:	e7e6      	b.n	8005d94 <_strtol_l.constprop.0+0x94>
 8005dc6:	f1bc 0f00 	cmp.w	ip, #0
 8005dca:	da05      	bge.n	8005dd8 <_strtol_l.constprop.0+0xd8>
 8005dcc:	2322      	movs	r3, #34	; 0x22
 8005dce:	6003      	str	r3, [r0, #0]
 8005dd0:	4646      	mov	r6, r8
 8005dd2:	b942      	cbnz	r2, 8005de6 <_strtol_l.constprop.0+0xe6>
 8005dd4:	4630      	mov	r0, r6
 8005dd6:	e79e      	b.n	8005d16 <_strtol_l.constprop.0+0x16>
 8005dd8:	b107      	cbz	r7, 8005ddc <_strtol_l.constprop.0+0xdc>
 8005dda:	4276      	negs	r6, r6
 8005ddc:	2a00      	cmp	r2, #0
 8005dde:	d0f9      	beq.n	8005dd4 <_strtol_l.constprop.0+0xd4>
 8005de0:	f1bc 0f00 	cmp.w	ip, #0
 8005de4:	d000      	beq.n	8005de8 <_strtol_l.constprop.0+0xe8>
 8005de6:	1e69      	subs	r1, r5, #1
 8005de8:	6011      	str	r1, [r2, #0]
 8005dea:	e7f3      	b.n	8005dd4 <_strtol_l.constprop.0+0xd4>
 8005dec:	2430      	movs	r4, #48	; 0x30
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1b1      	bne.n	8005d56 <_strtol_l.constprop.0+0x56>
 8005df2:	2308      	movs	r3, #8
 8005df4:	e7af      	b.n	8005d56 <_strtol_l.constprop.0+0x56>
 8005df6:	2c30      	cmp	r4, #48	; 0x30
 8005df8:	d0a5      	beq.n	8005d46 <_strtol_l.constprop.0+0x46>
 8005dfa:	230a      	movs	r3, #10
 8005dfc:	e7ab      	b.n	8005d56 <_strtol_l.constprop.0+0x56>
 8005dfe:	bf00      	nop
 8005e00:	08006fb5 	.word	0x08006fb5

08005e04 <strtol>:
 8005e04:	4613      	mov	r3, r2
 8005e06:	460a      	mov	r2, r1
 8005e08:	4601      	mov	r1, r0
 8005e0a:	4802      	ldr	r0, [pc, #8]	; (8005e14 <strtol+0x10>)
 8005e0c:	6800      	ldr	r0, [r0, #0]
 8005e0e:	f7ff bf77 	b.w	8005d00 <_strtol_l.constprop.0>
 8005e12:	bf00      	nop
 8005e14:	20000194 	.word	0x20000194

08005e18 <__swbuf_r>:
 8005e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1a:	460e      	mov	r6, r1
 8005e1c:	4614      	mov	r4, r2
 8005e1e:	4605      	mov	r5, r0
 8005e20:	b118      	cbz	r0, 8005e2a <__swbuf_r+0x12>
 8005e22:	6983      	ldr	r3, [r0, #24]
 8005e24:	b90b      	cbnz	r3, 8005e2a <__swbuf_r+0x12>
 8005e26:	f000 f9ef 	bl	8006208 <__sinit>
 8005e2a:	4b21      	ldr	r3, [pc, #132]	; (8005eb0 <__swbuf_r+0x98>)
 8005e2c:	429c      	cmp	r4, r3
 8005e2e:	d12b      	bne.n	8005e88 <__swbuf_r+0x70>
 8005e30:	686c      	ldr	r4, [r5, #4]
 8005e32:	69a3      	ldr	r3, [r4, #24]
 8005e34:	60a3      	str	r3, [r4, #8]
 8005e36:	89a3      	ldrh	r3, [r4, #12]
 8005e38:	071a      	lsls	r2, r3, #28
 8005e3a:	d52f      	bpl.n	8005e9c <__swbuf_r+0x84>
 8005e3c:	6923      	ldr	r3, [r4, #16]
 8005e3e:	b36b      	cbz	r3, 8005e9c <__swbuf_r+0x84>
 8005e40:	6923      	ldr	r3, [r4, #16]
 8005e42:	6820      	ldr	r0, [r4, #0]
 8005e44:	1ac0      	subs	r0, r0, r3
 8005e46:	6963      	ldr	r3, [r4, #20]
 8005e48:	b2f6      	uxtb	r6, r6
 8005e4a:	4283      	cmp	r3, r0
 8005e4c:	4637      	mov	r7, r6
 8005e4e:	dc04      	bgt.n	8005e5a <__swbuf_r+0x42>
 8005e50:	4621      	mov	r1, r4
 8005e52:	4628      	mov	r0, r5
 8005e54:	f000 f944 	bl	80060e0 <_fflush_r>
 8005e58:	bb30      	cbnz	r0, 8005ea8 <__swbuf_r+0x90>
 8005e5a:	68a3      	ldr	r3, [r4, #8]
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	60a3      	str	r3, [r4, #8]
 8005e60:	6823      	ldr	r3, [r4, #0]
 8005e62:	1c5a      	adds	r2, r3, #1
 8005e64:	6022      	str	r2, [r4, #0]
 8005e66:	701e      	strb	r6, [r3, #0]
 8005e68:	6963      	ldr	r3, [r4, #20]
 8005e6a:	3001      	adds	r0, #1
 8005e6c:	4283      	cmp	r3, r0
 8005e6e:	d004      	beq.n	8005e7a <__swbuf_r+0x62>
 8005e70:	89a3      	ldrh	r3, [r4, #12]
 8005e72:	07db      	lsls	r3, r3, #31
 8005e74:	d506      	bpl.n	8005e84 <__swbuf_r+0x6c>
 8005e76:	2e0a      	cmp	r6, #10
 8005e78:	d104      	bne.n	8005e84 <__swbuf_r+0x6c>
 8005e7a:	4621      	mov	r1, r4
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	f000 f92f 	bl	80060e0 <_fflush_r>
 8005e82:	b988      	cbnz	r0, 8005ea8 <__swbuf_r+0x90>
 8005e84:	4638      	mov	r0, r7
 8005e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e88:	4b0a      	ldr	r3, [pc, #40]	; (8005eb4 <__swbuf_r+0x9c>)
 8005e8a:	429c      	cmp	r4, r3
 8005e8c:	d101      	bne.n	8005e92 <__swbuf_r+0x7a>
 8005e8e:	68ac      	ldr	r4, [r5, #8]
 8005e90:	e7cf      	b.n	8005e32 <__swbuf_r+0x1a>
 8005e92:	4b09      	ldr	r3, [pc, #36]	; (8005eb8 <__swbuf_r+0xa0>)
 8005e94:	429c      	cmp	r4, r3
 8005e96:	bf08      	it	eq
 8005e98:	68ec      	ldreq	r4, [r5, #12]
 8005e9a:	e7ca      	b.n	8005e32 <__swbuf_r+0x1a>
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	f000 f80c 	bl	8005ebc <__swsetup_r>
 8005ea4:	2800      	cmp	r0, #0
 8005ea6:	d0cb      	beq.n	8005e40 <__swbuf_r+0x28>
 8005ea8:	f04f 37ff 	mov.w	r7, #4294967295
 8005eac:	e7ea      	b.n	8005e84 <__swbuf_r+0x6c>
 8005eae:	bf00      	nop
 8005eb0:	080070d8 	.word	0x080070d8
 8005eb4:	080070f8 	.word	0x080070f8
 8005eb8:	080070b8 	.word	0x080070b8

08005ebc <__swsetup_r>:
 8005ebc:	4b32      	ldr	r3, [pc, #200]	; (8005f88 <__swsetup_r+0xcc>)
 8005ebe:	b570      	push	{r4, r5, r6, lr}
 8005ec0:	681d      	ldr	r5, [r3, #0]
 8005ec2:	4606      	mov	r6, r0
 8005ec4:	460c      	mov	r4, r1
 8005ec6:	b125      	cbz	r5, 8005ed2 <__swsetup_r+0x16>
 8005ec8:	69ab      	ldr	r3, [r5, #24]
 8005eca:	b913      	cbnz	r3, 8005ed2 <__swsetup_r+0x16>
 8005ecc:	4628      	mov	r0, r5
 8005ece:	f000 f99b 	bl	8006208 <__sinit>
 8005ed2:	4b2e      	ldr	r3, [pc, #184]	; (8005f8c <__swsetup_r+0xd0>)
 8005ed4:	429c      	cmp	r4, r3
 8005ed6:	d10f      	bne.n	8005ef8 <__swsetup_r+0x3c>
 8005ed8:	686c      	ldr	r4, [r5, #4]
 8005eda:	89a3      	ldrh	r3, [r4, #12]
 8005edc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ee0:	0719      	lsls	r1, r3, #28
 8005ee2:	d42c      	bmi.n	8005f3e <__swsetup_r+0x82>
 8005ee4:	06dd      	lsls	r5, r3, #27
 8005ee6:	d411      	bmi.n	8005f0c <__swsetup_r+0x50>
 8005ee8:	2309      	movs	r3, #9
 8005eea:	6033      	str	r3, [r6, #0]
 8005eec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ef0:	81a3      	strh	r3, [r4, #12]
 8005ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef6:	e03e      	b.n	8005f76 <__swsetup_r+0xba>
 8005ef8:	4b25      	ldr	r3, [pc, #148]	; (8005f90 <__swsetup_r+0xd4>)
 8005efa:	429c      	cmp	r4, r3
 8005efc:	d101      	bne.n	8005f02 <__swsetup_r+0x46>
 8005efe:	68ac      	ldr	r4, [r5, #8]
 8005f00:	e7eb      	b.n	8005eda <__swsetup_r+0x1e>
 8005f02:	4b24      	ldr	r3, [pc, #144]	; (8005f94 <__swsetup_r+0xd8>)
 8005f04:	429c      	cmp	r4, r3
 8005f06:	bf08      	it	eq
 8005f08:	68ec      	ldreq	r4, [r5, #12]
 8005f0a:	e7e6      	b.n	8005eda <__swsetup_r+0x1e>
 8005f0c:	0758      	lsls	r0, r3, #29
 8005f0e:	d512      	bpl.n	8005f36 <__swsetup_r+0x7a>
 8005f10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f12:	b141      	cbz	r1, 8005f26 <__swsetup_r+0x6a>
 8005f14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f18:	4299      	cmp	r1, r3
 8005f1a:	d002      	beq.n	8005f22 <__swsetup_r+0x66>
 8005f1c:	4630      	mov	r0, r6
 8005f1e:	f000 fa93 	bl	8006448 <_free_r>
 8005f22:	2300      	movs	r3, #0
 8005f24:	6363      	str	r3, [r4, #52]	; 0x34
 8005f26:	89a3      	ldrh	r3, [r4, #12]
 8005f28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f2c:	81a3      	strh	r3, [r4, #12]
 8005f2e:	2300      	movs	r3, #0
 8005f30:	6063      	str	r3, [r4, #4]
 8005f32:	6923      	ldr	r3, [r4, #16]
 8005f34:	6023      	str	r3, [r4, #0]
 8005f36:	89a3      	ldrh	r3, [r4, #12]
 8005f38:	f043 0308 	orr.w	r3, r3, #8
 8005f3c:	81a3      	strh	r3, [r4, #12]
 8005f3e:	6923      	ldr	r3, [r4, #16]
 8005f40:	b94b      	cbnz	r3, 8005f56 <__swsetup_r+0x9a>
 8005f42:	89a3      	ldrh	r3, [r4, #12]
 8005f44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f4c:	d003      	beq.n	8005f56 <__swsetup_r+0x9a>
 8005f4e:	4621      	mov	r1, r4
 8005f50:	4630      	mov	r0, r6
 8005f52:	f000 fa31 	bl	80063b8 <__smakebuf_r>
 8005f56:	89a0      	ldrh	r0, [r4, #12]
 8005f58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f5c:	f010 0301 	ands.w	r3, r0, #1
 8005f60:	d00a      	beq.n	8005f78 <__swsetup_r+0xbc>
 8005f62:	2300      	movs	r3, #0
 8005f64:	60a3      	str	r3, [r4, #8]
 8005f66:	6963      	ldr	r3, [r4, #20]
 8005f68:	425b      	negs	r3, r3
 8005f6a:	61a3      	str	r3, [r4, #24]
 8005f6c:	6923      	ldr	r3, [r4, #16]
 8005f6e:	b943      	cbnz	r3, 8005f82 <__swsetup_r+0xc6>
 8005f70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f74:	d1ba      	bne.n	8005eec <__swsetup_r+0x30>
 8005f76:	bd70      	pop	{r4, r5, r6, pc}
 8005f78:	0781      	lsls	r1, r0, #30
 8005f7a:	bf58      	it	pl
 8005f7c:	6963      	ldrpl	r3, [r4, #20]
 8005f7e:	60a3      	str	r3, [r4, #8]
 8005f80:	e7f4      	b.n	8005f6c <__swsetup_r+0xb0>
 8005f82:	2000      	movs	r0, #0
 8005f84:	e7f7      	b.n	8005f76 <__swsetup_r+0xba>
 8005f86:	bf00      	nop
 8005f88:	20000194 	.word	0x20000194
 8005f8c:	080070d8 	.word	0x080070d8
 8005f90:	080070f8 	.word	0x080070f8
 8005f94:	080070b8 	.word	0x080070b8

08005f98 <__assert_func>:
 8005f98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f9a:	4614      	mov	r4, r2
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	4b09      	ldr	r3, [pc, #36]	; (8005fc4 <__assert_func+0x2c>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4605      	mov	r5, r0
 8005fa4:	68d8      	ldr	r0, [r3, #12]
 8005fa6:	b14c      	cbz	r4, 8005fbc <__assert_func+0x24>
 8005fa8:	4b07      	ldr	r3, [pc, #28]	; (8005fc8 <__assert_func+0x30>)
 8005faa:	9100      	str	r1, [sp, #0]
 8005fac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005fb0:	4906      	ldr	r1, [pc, #24]	; (8005fcc <__assert_func+0x34>)
 8005fb2:	462b      	mov	r3, r5
 8005fb4:	f000 f9a6 	bl	8006304 <fiprintf>
 8005fb8:	f000 fe7a 	bl	8006cb0 <abort>
 8005fbc:	4b04      	ldr	r3, [pc, #16]	; (8005fd0 <__assert_func+0x38>)
 8005fbe:	461c      	mov	r4, r3
 8005fc0:	e7f3      	b.n	8005faa <__assert_func+0x12>
 8005fc2:	bf00      	nop
 8005fc4:	20000194 	.word	0x20000194
 8005fc8:	08006f78 	.word	0x08006f78
 8005fcc:	08006f85 	.word	0x08006f85
 8005fd0:	08006fb3 	.word	0x08006fb3

08005fd4 <__sflush_r>:
 8005fd4:	898a      	ldrh	r2, [r1, #12]
 8005fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fda:	4605      	mov	r5, r0
 8005fdc:	0710      	lsls	r0, r2, #28
 8005fde:	460c      	mov	r4, r1
 8005fe0:	d458      	bmi.n	8006094 <__sflush_r+0xc0>
 8005fe2:	684b      	ldr	r3, [r1, #4]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	dc05      	bgt.n	8005ff4 <__sflush_r+0x20>
 8005fe8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	dc02      	bgt.n	8005ff4 <__sflush_r+0x20>
 8005fee:	2000      	movs	r0, #0
 8005ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ff4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ff6:	2e00      	cmp	r6, #0
 8005ff8:	d0f9      	beq.n	8005fee <__sflush_r+0x1a>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006000:	682f      	ldr	r7, [r5, #0]
 8006002:	602b      	str	r3, [r5, #0]
 8006004:	d032      	beq.n	800606c <__sflush_r+0x98>
 8006006:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006008:	89a3      	ldrh	r3, [r4, #12]
 800600a:	075a      	lsls	r2, r3, #29
 800600c:	d505      	bpl.n	800601a <__sflush_r+0x46>
 800600e:	6863      	ldr	r3, [r4, #4]
 8006010:	1ac0      	subs	r0, r0, r3
 8006012:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006014:	b10b      	cbz	r3, 800601a <__sflush_r+0x46>
 8006016:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006018:	1ac0      	subs	r0, r0, r3
 800601a:	2300      	movs	r3, #0
 800601c:	4602      	mov	r2, r0
 800601e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006020:	6a21      	ldr	r1, [r4, #32]
 8006022:	4628      	mov	r0, r5
 8006024:	47b0      	blx	r6
 8006026:	1c43      	adds	r3, r0, #1
 8006028:	89a3      	ldrh	r3, [r4, #12]
 800602a:	d106      	bne.n	800603a <__sflush_r+0x66>
 800602c:	6829      	ldr	r1, [r5, #0]
 800602e:	291d      	cmp	r1, #29
 8006030:	d82c      	bhi.n	800608c <__sflush_r+0xb8>
 8006032:	4a2a      	ldr	r2, [pc, #168]	; (80060dc <__sflush_r+0x108>)
 8006034:	40ca      	lsrs	r2, r1
 8006036:	07d6      	lsls	r6, r2, #31
 8006038:	d528      	bpl.n	800608c <__sflush_r+0xb8>
 800603a:	2200      	movs	r2, #0
 800603c:	6062      	str	r2, [r4, #4]
 800603e:	04d9      	lsls	r1, r3, #19
 8006040:	6922      	ldr	r2, [r4, #16]
 8006042:	6022      	str	r2, [r4, #0]
 8006044:	d504      	bpl.n	8006050 <__sflush_r+0x7c>
 8006046:	1c42      	adds	r2, r0, #1
 8006048:	d101      	bne.n	800604e <__sflush_r+0x7a>
 800604a:	682b      	ldr	r3, [r5, #0]
 800604c:	b903      	cbnz	r3, 8006050 <__sflush_r+0x7c>
 800604e:	6560      	str	r0, [r4, #84]	; 0x54
 8006050:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006052:	602f      	str	r7, [r5, #0]
 8006054:	2900      	cmp	r1, #0
 8006056:	d0ca      	beq.n	8005fee <__sflush_r+0x1a>
 8006058:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800605c:	4299      	cmp	r1, r3
 800605e:	d002      	beq.n	8006066 <__sflush_r+0x92>
 8006060:	4628      	mov	r0, r5
 8006062:	f000 f9f1 	bl	8006448 <_free_r>
 8006066:	2000      	movs	r0, #0
 8006068:	6360      	str	r0, [r4, #52]	; 0x34
 800606a:	e7c1      	b.n	8005ff0 <__sflush_r+0x1c>
 800606c:	6a21      	ldr	r1, [r4, #32]
 800606e:	2301      	movs	r3, #1
 8006070:	4628      	mov	r0, r5
 8006072:	47b0      	blx	r6
 8006074:	1c41      	adds	r1, r0, #1
 8006076:	d1c7      	bne.n	8006008 <__sflush_r+0x34>
 8006078:	682b      	ldr	r3, [r5, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d0c4      	beq.n	8006008 <__sflush_r+0x34>
 800607e:	2b1d      	cmp	r3, #29
 8006080:	d001      	beq.n	8006086 <__sflush_r+0xb2>
 8006082:	2b16      	cmp	r3, #22
 8006084:	d101      	bne.n	800608a <__sflush_r+0xb6>
 8006086:	602f      	str	r7, [r5, #0]
 8006088:	e7b1      	b.n	8005fee <__sflush_r+0x1a>
 800608a:	89a3      	ldrh	r3, [r4, #12]
 800608c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006090:	81a3      	strh	r3, [r4, #12]
 8006092:	e7ad      	b.n	8005ff0 <__sflush_r+0x1c>
 8006094:	690f      	ldr	r7, [r1, #16]
 8006096:	2f00      	cmp	r7, #0
 8006098:	d0a9      	beq.n	8005fee <__sflush_r+0x1a>
 800609a:	0793      	lsls	r3, r2, #30
 800609c:	680e      	ldr	r6, [r1, #0]
 800609e:	bf08      	it	eq
 80060a0:	694b      	ldreq	r3, [r1, #20]
 80060a2:	600f      	str	r7, [r1, #0]
 80060a4:	bf18      	it	ne
 80060a6:	2300      	movne	r3, #0
 80060a8:	eba6 0807 	sub.w	r8, r6, r7
 80060ac:	608b      	str	r3, [r1, #8]
 80060ae:	f1b8 0f00 	cmp.w	r8, #0
 80060b2:	dd9c      	ble.n	8005fee <__sflush_r+0x1a>
 80060b4:	6a21      	ldr	r1, [r4, #32]
 80060b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80060b8:	4643      	mov	r3, r8
 80060ba:	463a      	mov	r2, r7
 80060bc:	4628      	mov	r0, r5
 80060be:	47b0      	blx	r6
 80060c0:	2800      	cmp	r0, #0
 80060c2:	dc06      	bgt.n	80060d2 <__sflush_r+0xfe>
 80060c4:	89a3      	ldrh	r3, [r4, #12]
 80060c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060ca:	81a3      	strh	r3, [r4, #12]
 80060cc:	f04f 30ff 	mov.w	r0, #4294967295
 80060d0:	e78e      	b.n	8005ff0 <__sflush_r+0x1c>
 80060d2:	4407      	add	r7, r0
 80060d4:	eba8 0800 	sub.w	r8, r8, r0
 80060d8:	e7e9      	b.n	80060ae <__sflush_r+0xda>
 80060da:	bf00      	nop
 80060dc:	20400001 	.word	0x20400001

080060e0 <_fflush_r>:
 80060e0:	b538      	push	{r3, r4, r5, lr}
 80060e2:	690b      	ldr	r3, [r1, #16]
 80060e4:	4605      	mov	r5, r0
 80060e6:	460c      	mov	r4, r1
 80060e8:	b913      	cbnz	r3, 80060f0 <_fflush_r+0x10>
 80060ea:	2500      	movs	r5, #0
 80060ec:	4628      	mov	r0, r5
 80060ee:	bd38      	pop	{r3, r4, r5, pc}
 80060f0:	b118      	cbz	r0, 80060fa <_fflush_r+0x1a>
 80060f2:	6983      	ldr	r3, [r0, #24]
 80060f4:	b90b      	cbnz	r3, 80060fa <_fflush_r+0x1a>
 80060f6:	f000 f887 	bl	8006208 <__sinit>
 80060fa:	4b14      	ldr	r3, [pc, #80]	; (800614c <_fflush_r+0x6c>)
 80060fc:	429c      	cmp	r4, r3
 80060fe:	d11b      	bne.n	8006138 <_fflush_r+0x58>
 8006100:	686c      	ldr	r4, [r5, #4]
 8006102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d0ef      	beq.n	80060ea <_fflush_r+0xa>
 800610a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800610c:	07d0      	lsls	r0, r2, #31
 800610e:	d404      	bmi.n	800611a <_fflush_r+0x3a>
 8006110:	0599      	lsls	r1, r3, #22
 8006112:	d402      	bmi.n	800611a <_fflush_r+0x3a>
 8006114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006116:	f000 f927 	bl	8006368 <__retarget_lock_acquire_recursive>
 800611a:	4628      	mov	r0, r5
 800611c:	4621      	mov	r1, r4
 800611e:	f7ff ff59 	bl	8005fd4 <__sflush_r>
 8006122:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006124:	07da      	lsls	r2, r3, #31
 8006126:	4605      	mov	r5, r0
 8006128:	d4e0      	bmi.n	80060ec <_fflush_r+0xc>
 800612a:	89a3      	ldrh	r3, [r4, #12]
 800612c:	059b      	lsls	r3, r3, #22
 800612e:	d4dd      	bmi.n	80060ec <_fflush_r+0xc>
 8006130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006132:	f000 f91a 	bl	800636a <__retarget_lock_release_recursive>
 8006136:	e7d9      	b.n	80060ec <_fflush_r+0xc>
 8006138:	4b05      	ldr	r3, [pc, #20]	; (8006150 <_fflush_r+0x70>)
 800613a:	429c      	cmp	r4, r3
 800613c:	d101      	bne.n	8006142 <_fflush_r+0x62>
 800613e:	68ac      	ldr	r4, [r5, #8]
 8006140:	e7df      	b.n	8006102 <_fflush_r+0x22>
 8006142:	4b04      	ldr	r3, [pc, #16]	; (8006154 <_fflush_r+0x74>)
 8006144:	429c      	cmp	r4, r3
 8006146:	bf08      	it	eq
 8006148:	68ec      	ldreq	r4, [r5, #12]
 800614a:	e7da      	b.n	8006102 <_fflush_r+0x22>
 800614c:	080070d8 	.word	0x080070d8
 8006150:	080070f8 	.word	0x080070f8
 8006154:	080070b8 	.word	0x080070b8

08006158 <std>:
 8006158:	2300      	movs	r3, #0
 800615a:	b510      	push	{r4, lr}
 800615c:	4604      	mov	r4, r0
 800615e:	e9c0 3300 	strd	r3, r3, [r0]
 8006162:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006166:	6083      	str	r3, [r0, #8]
 8006168:	8181      	strh	r1, [r0, #12]
 800616a:	6643      	str	r3, [r0, #100]	; 0x64
 800616c:	81c2      	strh	r2, [r0, #14]
 800616e:	6183      	str	r3, [r0, #24]
 8006170:	4619      	mov	r1, r3
 8006172:	2208      	movs	r2, #8
 8006174:	305c      	adds	r0, #92	; 0x5c
 8006176:	f7ff fcc9 	bl	8005b0c <memset>
 800617a:	4b05      	ldr	r3, [pc, #20]	; (8006190 <std+0x38>)
 800617c:	6263      	str	r3, [r4, #36]	; 0x24
 800617e:	4b05      	ldr	r3, [pc, #20]	; (8006194 <std+0x3c>)
 8006180:	62a3      	str	r3, [r4, #40]	; 0x28
 8006182:	4b05      	ldr	r3, [pc, #20]	; (8006198 <std+0x40>)
 8006184:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006186:	4b05      	ldr	r3, [pc, #20]	; (800619c <std+0x44>)
 8006188:	6224      	str	r4, [r4, #32]
 800618a:	6323      	str	r3, [r4, #48]	; 0x30
 800618c:	bd10      	pop	{r4, pc}
 800618e:	bf00      	nop
 8006190:	08006c05 	.word	0x08006c05
 8006194:	08006c27 	.word	0x08006c27
 8006198:	08006c5f 	.word	0x08006c5f
 800619c:	08006c83 	.word	0x08006c83

080061a0 <_cleanup_r>:
 80061a0:	4901      	ldr	r1, [pc, #4]	; (80061a8 <_cleanup_r+0x8>)
 80061a2:	f000 b8c1 	b.w	8006328 <_fwalk_reent>
 80061a6:	bf00      	nop
 80061a8:	080060e1 	.word	0x080060e1

080061ac <__sfmoreglue>:
 80061ac:	b570      	push	{r4, r5, r6, lr}
 80061ae:	2268      	movs	r2, #104	; 0x68
 80061b0:	1e4d      	subs	r5, r1, #1
 80061b2:	4355      	muls	r5, r2
 80061b4:	460e      	mov	r6, r1
 80061b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80061ba:	f000 f9b1 	bl	8006520 <_malloc_r>
 80061be:	4604      	mov	r4, r0
 80061c0:	b140      	cbz	r0, 80061d4 <__sfmoreglue+0x28>
 80061c2:	2100      	movs	r1, #0
 80061c4:	e9c0 1600 	strd	r1, r6, [r0]
 80061c8:	300c      	adds	r0, #12
 80061ca:	60a0      	str	r0, [r4, #8]
 80061cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80061d0:	f7ff fc9c 	bl	8005b0c <memset>
 80061d4:	4620      	mov	r0, r4
 80061d6:	bd70      	pop	{r4, r5, r6, pc}

080061d8 <__sfp_lock_acquire>:
 80061d8:	4801      	ldr	r0, [pc, #4]	; (80061e0 <__sfp_lock_acquire+0x8>)
 80061da:	f000 b8c5 	b.w	8006368 <__retarget_lock_acquire_recursive>
 80061de:	bf00      	nop
 80061e0:	200004a5 	.word	0x200004a5

080061e4 <__sfp_lock_release>:
 80061e4:	4801      	ldr	r0, [pc, #4]	; (80061ec <__sfp_lock_release+0x8>)
 80061e6:	f000 b8c0 	b.w	800636a <__retarget_lock_release_recursive>
 80061ea:	bf00      	nop
 80061ec:	200004a5 	.word	0x200004a5

080061f0 <__sinit_lock_acquire>:
 80061f0:	4801      	ldr	r0, [pc, #4]	; (80061f8 <__sinit_lock_acquire+0x8>)
 80061f2:	f000 b8b9 	b.w	8006368 <__retarget_lock_acquire_recursive>
 80061f6:	bf00      	nop
 80061f8:	200004a6 	.word	0x200004a6

080061fc <__sinit_lock_release>:
 80061fc:	4801      	ldr	r0, [pc, #4]	; (8006204 <__sinit_lock_release+0x8>)
 80061fe:	f000 b8b4 	b.w	800636a <__retarget_lock_release_recursive>
 8006202:	bf00      	nop
 8006204:	200004a6 	.word	0x200004a6

08006208 <__sinit>:
 8006208:	b510      	push	{r4, lr}
 800620a:	4604      	mov	r4, r0
 800620c:	f7ff fff0 	bl	80061f0 <__sinit_lock_acquire>
 8006210:	69a3      	ldr	r3, [r4, #24]
 8006212:	b11b      	cbz	r3, 800621c <__sinit+0x14>
 8006214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006218:	f7ff bff0 	b.w	80061fc <__sinit_lock_release>
 800621c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006220:	6523      	str	r3, [r4, #80]	; 0x50
 8006222:	4b13      	ldr	r3, [pc, #76]	; (8006270 <__sinit+0x68>)
 8006224:	4a13      	ldr	r2, [pc, #76]	; (8006274 <__sinit+0x6c>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	62a2      	str	r2, [r4, #40]	; 0x28
 800622a:	42a3      	cmp	r3, r4
 800622c:	bf04      	itt	eq
 800622e:	2301      	moveq	r3, #1
 8006230:	61a3      	streq	r3, [r4, #24]
 8006232:	4620      	mov	r0, r4
 8006234:	f000 f820 	bl	8006278 <__sfp>
 8006238:	6060      	str	r0, [r4, #4]
 800623a:	4620      	mov	r0, r4
 800623c:	f000 f81c 	bl	8006278 <__sfp>
 8006240:	60a0      	str	r0, [r4, #8]
 8006242:	4620      	mov	r0, r4
 8006244:	f000 f818 	bl	8006278 <__sfp>
 8006248:	2200      	movs	r2, #0
 800624a:	60e0      	str	r0, [r4, #12]
 800624c:	2104      	movs	r1, #4
 800624e:	6860      	ldr	r0, [r4, #4]
 8006250:	f7ff ff82 	bl	8006158 <std>
 8006254:	68a0      	ldr	r0, [r4, #8]
 8006256:	2201      	movs	r2, #1
 8006258:	2109      	movs	r1, #9
 800625a:	f7ff ff7d 	bl	8006158 <std>
 800625e:	68e0      	ldr	r0, [r4, #12]
 8006260:	2202      	movs	r2, #2
 8006262:	2112      	movs	r1, #18
 8006264:	f7ff ff78 	bl	8006158 <std>
 8006268:	2301      	movs	r3, #1
 800626a:	61a3      	str	r3, [r4, #24]
 800626c:	e7d2      	b.n	8006214 <__sinit+0xc>
 800626e:	bf00      	nop
 8006270:	08006f00 	.word	0x08006f00
 8006274:	080061a1 	.word	0x080061a1

08006278 <__sfp>:
 8006278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800627a:	4607      	mov	r7, r0
 800627c:	f7ff ffac 	bl	80061d8 <__sfp_lock_acquire>
 8006280:	4b1e      	ldr	r3, [pc, #120]	; (80062fc <__sfp+0x84>)
 8006282:	681e      	ldr	r6, [r3, #0]
 8006284:	69b3      	ldr	r3, [r6, #24]
 8006286:	b913      	cbnz	r3, 800628e <__sfp+0x16>
 8006288:	4630      	mov	r0, r6
 800628a:	f7ff ffbd 	bl	8006208 <__sinit>
 800628e:	3648      	adds	r6, #72	; 0x48
 8006290:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006294:	3b01      	subs	r3, #1
 8006296:	d503      	bpl.n	80062a0 <__sfp+0x28>
 8006298:	6833      	ldr	r3, [r6, #0]
 800629a:	b30b      	cbz	r3, 80062e0 <__sfp+0x68>
 800629c:	6836      	ldr	r6, [r6, #0]
 800629e:	e7f7      	b.n	8006290 <__sfp+0x18>
 80062a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80062a4:	b9d5      	cbnz	r5, 80062dc <__sfp+0x64>
 80062a6:	4b16      	ldr	r3, [pc, #88]	; (8006300 <__sfp+0x88>)
 80062a8:	60e3      	str	r3, [r4, #12]
 80062aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80062ae:	6665      	str	r5, [r4, #100]	; 0x64
 80062b0:	f000 f859 	bl	8006366 <__retarget_lock_init_recursive>
 80062b4:	f7ff ff96 	bl	80061e4 <__sfp_lock_release>
 80062b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80062bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80062c0:	6025      	str	r5, [r4, #0]
 80062c2:	61a5      	str	r5, [r4, #24]
 80062c4:	2208      	movs	r2, #8
 80062c6:	4629      	mov	r1, r5
 80062c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80062cc:	f7ff fc1e 	bl	8005b0c <memset>
 80062d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80062d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80062d8:	4620      	mov	r0, r4
 80062da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062dc:	3468      	adds	r4, #104	; 0x68
 80062de:	e7d9      	b.n	8006294 <__sfp+0x1c>
 80062e0:	2104      	movs	r1, #4
 80062e2:	4638      	mov	r0, r7
 80062e4:	f7ff ff62 	bl	80061ac <__sfmoreglue>
 80062e8:	4604      	mov	r4, r0
 80062ea:	6030      	str	r0, [r6, #0]
 80062ec:	2800      	cmp	r0, #0
 80062ee:	d1d5      	bne.n	800629c <__sfp+0x24>
 80062f0:	f7ff ff78 	bl	80061e4 <__sfp_lock_release>
 80062f4:	230c      	movs	r3, #12
 80062f6:	603b      	str	r3, [r7, #0]
 80062f8:	e7ee      	b.n	80062d8 <__sfp+0x60>
 80062fa:	bf00      	nop
 80062fc:	08006f00 	.word	0x08006f00
 8006300:	ffff0001 	.word	0xffff0001

08006304 <fiprintf>:
 8006304:	b40e      	push	{r1, r2, r3}
 8006306:	b503      	push	{r0, r1, lr}
 8006308:	4601      	mov	r1, r0
 800630a:	ab03      	add	r3, sp, #12
 800630c:	4805      	ldr	r0, [pc, #20]	; (8006324 <fiprintf+0x20>)
 800630e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006312:	6800      	ldr	r0, [r0, #0]
 8006314:	9301      	str	r3, [sp, #4]
 8006316:	f000 f9a1 	bl	800665c <_vfiprintf_r>
 800631a:	b002      	add	sp, #8
 800631c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006320:	b003      	add	sp, #12
 8006322:	4770      	bx	lr
 8006324:	20000194 	.word	0x20000194

08006328 <_fwalk_reent>:
 8006328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800632c:	4606      	mov	r6, r0
 800632e:	4688      	mov	r8, r1
 8006330:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006334:	2700      	movs	r7, #0
 8006336:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800633a:	f1b9 0901 	subs.w	r9, r9, #1
 800633e:	d505      	bpl.n	800634c <_fwalk_reent+0x24>
 8006340:	6824      	ldr	r4, [r4, #0]
 8006342:	2c00      	cmp	r4, #0
 8006344:	d1f7      	bne.n	8006336 <_fwalk_reent+0xe>
 8006346:	4638      	mov	r0, r7
 8006348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800634c:	89ab      	ldrh	r3, [r5, #12]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d907      	bls.n	8006362 <_fwalk_reent+0x3a>
 8006352:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006356:	3301      	adds	r3, #1
 8006358:	d003      	beq.n	8006362 <_fwalk_reent+0x3a>
 800635a:	4629      	mov	r1, r5
 800635c:	4630      	mov	r0, r6
 800635e:	47c0      	blx	r8
 8006360:	4307      	orrs	r7, r0
 8006362:	3568      	adds	r5, #104	; 0x68
 8006364:	e7e9      	b.n	800633a <_fwalk_reent+0x12>

08006366 <__retarget_lock_init_recursive>:
 8006366:	4770      	bx	lr

08006368 <__retarget_lock_acquire_recursive>:
 8006368:	4770      	bx	lr

0800636a <__retarget_lock_release_recursive>:
 800636a:	4770      	bx	lr

0800636c <__swhatbuf_r>:
 800636c:	b570      	push	{r4, r5, r6, lr}
 800636e:	460e      	mov	r6, r1
 8006370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006374:	2900      	cmp	r1, #0
 8006376:	b096      	sub	sp, #88	; 0x58
 8006378:	4614      	mov	r4, r2
 800637a:	461d      	mov	r5, r3
 800637c:	da08      	bge.n	8006390 <__swhatbuf_r+0x24>
 800637e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	602a      	str	r2, [r5, #0]
 8006386:	061a      	lsls	r2, r3, #24
 8006388:	d410      	bmi.n	80063ac <__swhatbuf_r+0x40>
 800638a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800638e:	e00e      	b.n	80063ae <__swhatbuf_r+0x42>
 8006390:	466a      	mov	r2, sp
 8006392:	f000 fca5 	bl	8006ce0 <_fstat_r>
 8006396:	2800      	cmp	r0, #0
 8006398:	dbf1      	blt.n	800637e <__swhatbuf_r+0x12>
 800639a:	9a01      	ldr	r2, [sp, #4]
 800639c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80063a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80063a4:	425a      	negs	r2, r3
 80063a6:	415a      	adcs	r2, r3
 80063a8:	602a      	str	r2, [r5, #0]
 80063aa:	e7ee      	b.n	800638a <__swhatbuf_r+0x1e>
 80063ac:	2340      	movs	r3, #64	; 0x40
 80063ae:	2000      	movs	r0, #0
 80063b0:	6023      	str	r3, [r4, #0]
 80063b2:	b016      	add	sp, #88	; 0x58
 80063b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080063b8 <__smakebuf_r>:
 80063b8:	898b      	ldrh	r3, [r1, #12]
 80063ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80063bc:	079d      	lsls	r5, r3, #30
 80063be:	4606      	mov	r6, r0
 80063c0:	460c      	mov	r4, r1
 80063c2:	d507      	bpl.n	80063d4 <__smakebuf_r+0x1c>
 80063c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80063c8:	6023      	str	r3, [r4, #0]
 80063ca:	6123      	str	r3, [r4, #16]
 80063cc:	2301      	movs	r3, #1
 80063ce:	6163      	str	r3, [r4, #20]
 80063d0:	b002      	add	sp, #8
 80063d2:	bd70      	pop	{r4, r5, r6, pc}
 80063d4:	ab01      	add	r3, sp, #4
 80063d6:	466a      	mov	r2, sp
 80063d8:	f7ff ffc8 	bl	800636c <__swhatbuf_r>
 80063dc:	9900      	ldr	r1, [sp, #0]
 80063de:	4605      	mov	r5, r0
 80063e0:	4630      	mov	r0, r6
 80063e2:	f000 f89d 	bl	8006520 <_malloc_r>
 80063e6:	b948      	cbnz	r0, 80063fc <__smakebuf_r+0x44>
 80063e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063ec:	059a      	lsls	r2, r3, #22
 80063ee:	d4ef      	bmi.n	80063d0 <__smakebuf_r+0x18>
 80063f0:	f023 0303 	bic.w	r3, r3, #3
 80063f4:	f043 0302 	orr.w	r3, r3, #2
 80063f8:	81a3      	strh	r3, [r4, #12]
 80063fa:	e7e3      	b.n	80063c4 <__smakebuf_r+0xc>
 80063fc:	4b0d      	ldr	r3, [pc, #52]	; (8006434 <__smakebuf_r+0x7c>)
 80063fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8006400:	89a3      	ldrh	r3, [r4, #12]
 8006402:	6020      	str	r0, [r4, #0]
 8006404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006408:	81a3      	strh	r3, [r4, #12]
 800640a:	9b00      	ldr	r3, [sp, #0]
 800640c:	6163      	str	r3, [r4, #20]
 800640e:	9b01      	ldr	r3, [sp, #4]
 8006410:	6120      	str	r0, [r4, #16]
 8006412:	b15b      	cbz	r3, 800642c <__smakebuf_r+0x74>
 8006414:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006418:	4630      	mov	r0, r6
 800641a:	f000 fc73 	bl	8006d04 <_isatty_r>
 800641e:	b128      	cbz	r0, 800642c <__smakebuf_r+0x74>
 8006420:	89a3      	ldrh	r3, [r4, #12]
 8006422:	f023 0303 	bic.w	r3, r3, #3
 8006426:	f043 0301 	orr.w	r3, r3, #1
 800642a:	81a3      	strh	r3, [r4, #12]
 800642c:	89a0      	ldrh	r0, [r4, #12]
 800642e:	4305      	orrs	r5, r0
 8006430:	81a5      	strh	r5, [r4, #12]
 8006432:	e7cd      	b.n	80063d0 <__smakebuf_r+0x18>
 8006434:	080061a1 	.word	0x080061a1

08006438 <malloc>:
 8006438:	4b02      	ldr	r3, [pc, #8]	; (8006444 <malloc+0xc>)
 800643a:	4601      	mov	r1, r0
 800643c:	6818      	ldr	r0, [r3, #0]
 800643e:	f000 b86f 	b.w	8006520 <_malloc_r>
 8006442:	bf00      	nop
 8006444:	20000194 	.word	0x20000194

08006448 <_free_r>:
 8006448:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800644a:	2900      	cmp	r1, #0
 800644c:	d044      	beq.n	80064d8 <_free_r+0x90>
 800644e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006452:	9001      	str	r0, [sp, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	f1a1 0404 	sub.w	r4, r1, #4
 800645a:	bfb8      	it	lt
 800645c:	18e4      	addlt	r4, r4, r3
 800645e:	f000 fc73 	bl	8006d48 <__malloc_lock>
 8006462:	4a1e      	ldr	r2, [pc, #120]	; (80064dc <_free_r+0x94>)
 8006464:	9801      	ldr	r0, [sp, #4]
 8006466:	6813      	ldr	r3, [r2, #0]
 8006468:	b933      	cbnz	r3, 8006478 <_free_r+0x30>
 800646a:	6063      	str	r3, [r4, #4]
 800646c:	6014      	str	r4, [r2, #0]
 800646e:	b003      	add	sp, #12
 8006470:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006474:	f000 bc6e 	b.w	8006d54 <__malloc_unlock>
 8006478:	42a3      	cmp	r3, r4
 800647a:	d908      	bls.n	800648e <_free_r+0x46>
 800647c:	6825      	ldr	r5, [r4, #0]
 800647e:	1961      	adds	r1, r4, r5
 8006480:	428b      	cmp	r3, r1
 8006482:	bf01      	itttt	eq
 8006484:	6819      	ldreq	r1, [r3, #0]
 8006486:	685b      	ldreq	r3, [r3, #4]
 8006488:	1949      	addeq	r1, r1, r5
 800648a:	6021      	streq	r1, [r4, #0]
 800648c:	e7ed      	b.n	800646a <_free_r+0x22>
 800648e:	461a      	mov	r2, r3
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	b10b      	cbz	r3, 8006498 <_free_r+0x50>
 8006494:	42a3      	cmp	r3, r4
 8006496:	d9fa      	bls.n	800648e <_free_r+0x46>
 8006498:	6811      	ldr	r1, [r2, #0]
 800649a:	1855      	adds	r5, r2, r1
 800649c:	42a5      	cmp	r5, r4
 800649e:	d10b      	bne.n	80064b8 <_free_r+0x70>
 80064a0:	6824      	ldr	r4, [r4, #0]
 80064a2:	4421      	add	r1, r4
 80064a4:	1854      	adds	r4, r2, r1
 80064a6:	42a3      	cmp	r3, r4
 80064a8:	6011      	str	r1, [r2, #0]
 80064aa:	d1e0      	bne.n	800646e <_free_r+0x26>
 80064ac:	681c      	ldr	r4, [r3, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	6053      	str	r3, [r2, #4]
 80064b2:	4421      	add	r1, r4
 80064b4:	6011      	str	r1, [r2, #0]
 80064b6:	e7da      	b.n	800646e <_free_r+0x26>
 80064b8:	d902      	bls.n	80064c0 <_free_r+0x78>
 80064ba:	230c      	movs	r3, #12
 80064bc:	6003      	str	r3, [r0, #0]
 80064be:	e7d6      	b.n	800646e <_free_r+0x26>
 80064c0:	6825      	ldr	r5, [r4, #0]
 80064c2:	1961      	adds	r1, r4, r5
 80064c4:	428b      	cmp	r3, r1
 80064c6:	bf04      	itt	eq
 80064c8:	6819      	ldreq	r1, [r3, #0]
 80064ca:	685b      	ldreq	r3, [r3, #4]
 80064cc:	6063      	str	r3, [r4, #4]
 80064ce:	bf04      	itt	eq
 80064d0:	1949      	addeq	r1, r1, r5
 80064d2:	6021      	streq	r1, [r4, #0]
 80064d4:	6054      	str	r4, [r2, #4]
 80064d6:	e7ca      	b.n	800646e <_free_r+0x26>
 80064d8:	b003      	add	sp, #12
 80064da:	bd30      	pop	{r4, r5, pc}
 80064dc:	200004a8 	.word	0x200004a8

080064e0 <sbrk_aligned>:
 80064e0:	b570      	push	{r4, r5, r6, lr}
 80064e2:	4e0e      	ldr	r6, [pc, #56]	; (800651c <sbrk_aligned+0x3c>)
 80064e4:	460c      	mov	r4, r1
 80064e6:	6831      	ldr	r1, [r6, #0]
 80064e8:	4605      	mov	r5, r0
 80064ea:	b911      	cbnz	r1, 80064f2 <sbrk_aligned+0x12>
 80064ec:	f000 fb7a 	bl	8006be4 <_sbrk_r>
 80064f0:	6030      	str	r0, [r6, #0]
 80064f2:	4621      	mov	r1, r4
 80064f4:	4628      	mov	r0, r5
 80064f6:	f000 fb75 	bl	8006be4 <_sbrk_r>
 80064fa:	1c43      	adds	r3, r0, #1
 80064fc:	d00a      	beq.n	8006514 <sbrk_aligned+0x34>
 80064fe:	1cc4      	adds	r4, r0, #3
 8006500:	f024 0403 	bic.w	r4, r4, #3
 8006504:	42a0      	cmp	r0, r4
 8006506:	d007      	beq.n	8006518 <sbrk_aligned+0x38>
 8006508:	1a21      	subs	r1, r4, r0
 800650a:	4628      	mov	r0, r5
 800650c:	f000 fb6a 	bl	8006be4 <_sbrk_r>
 8006510:	3001      	adds	r0, #1
 8006512:	d101      	bne.n	8006518 <sbrk_aligned+0x38>
 8006514:	f04f 34ff 	mov.w	r4, #4294967295
 8006518:	4620      	mov	r0, r4
 800651a:	bd70      	pop	{r4, r5, r6, pc}
 800651c:	200004ac 	.word	0x200004ac

08006520 <_malloc_r>:
 8006520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006524:	1ccd      	adds	r5, r1, #3
 8006526:	f025 0503 	bic.w	r5, r5, #3
 800652a:	3508      	adds	r5, #8
 800652c:	2d0c      	cmp	r5, #12
 800652e:	bf38      	it	cc
 8006530:	250c      	movcc	r5, #12
 8006532:	2d00      	cmp	r5, #0
 8006534:	4607      	mov	r7, r0
 8006536:	db01      	blt.n	800653c <_malloc_r+0x1c>
 8006538:	42a9      	cmp	r1, r5
 800653a:	d905      	bls.n	8006548 <_malloc_r+0x28>
 800653c:	230c      	movs	r3, #12
 800653e:	603b      	str	r3, [r7, #0]
 8006540:	2600      	movs	r6, #0
 8006542:	4630      	mov	r0, r6
 8006544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006548:	4e2e      	ldr	r6, [pc, #184]	; (8006604 <_malloc_r+0xe4>)
 800654a:	f000 fbfd 	bl	8006d48 <__malloc_lock>
 800654e:	6833      	ldr	r3, [r6, #0]
 8006550:	461c      	mov	r4, r3
 8006552:	bb34      	cbnz	r4, 80065a2 <_malloc_r+0x82>
 8006554:	4629      	mov	r1, r5
 8006556:	4638      	mov	r0, r7
 8006558:	f7ff ffc2 	bl	80064e0 <sbrk_aligned>
 800655c:	1c43      	adds	r3, r0, #1
 800655e:	4604      	mov	r4, r0
 8006560:	d14d      	bne.n	80065fe <_malloc_r+0xde>
 8006562:	6834      	ldr	r4, [r6, #0]
 8006564:	4626      	mov	r6, r4
 8006566:	2e00      	cmp	r6, #0
 8006568:	d140      	bne.n	80065ec <_malloc_r+0xcc>
 800656a:	6823      	ldr	r3, [r4, #0]
 800656c:	4631      	mov	r1, r6
 800656e:	4638      	mov	r0, r7
 8006570:	eb04 0803 	add.w	r8, r4, r3
 8006574:	f000 fb36 	bl	8006be4 <_sbrk_r>
 8006578:	4580      	cmp	r8, r0
 800657a:	d13a      	bne.n	80065f2 <_malloc_r+0xd2>
 800657c:	6821      	ldr	r1, [r4, #0]
 800657e:	3503      	adds	r5, #3
 8006580:	1a6d      	subs	r5, r5, r1
 8006582:	f025 0503 	bic.w	r5, r5, #3
 8006586:	3508      	adds	r5, #8
 8006588:	2d0c      	cmp	r5, #12
 800658a:	bf38      	it	cc
 800658c:	250c      	movcc	r5, #12
 800658e:	4629      	mov	r1, r5
 8006590:	4638      	mov	r0, r7
 8006592:	f7ff ffa5 	bl	80064e0 <sbrk_aligned>
 8006596:	3001      	adds	r0, #1
 8006598:	d02b      	beq.n	80065f2 <_malloc_r+0xd2>
 800659a:	6823      	ldr	r3, [r4, #0]
 800659c:	442b      	add	r3, r5
 800659e:	6023      	str	r3, [r4, #0]
 80065a0:	e00e      	b.n	80065c0 <_malloc_r+0xa0>
 80065a2:	6822      	ldr	r2, [r4, #0]
 80065a4:	1b52      	subs	r2, r2, r5
 80065a6:	d41e      	bmi.n	80065e6 <_malloc_r+0xc6>
 80065a8:	2a0b      	cmp	r2, #11
 80065aa:	d916      	bls.n	80065da <_malloc_r+0xba>
 80065ac:	1961      	adds	r1, r4, r5
 80065ae:	42a3      	cmp	r3, r4
 80065b0:	6025      	str	r5, [r4, #0]
 80065b2:	bf18      	it	ne
 80065b4:	6059      	strne	r1, [r3, #4]
 80065b6:	6863      	ldr	r3, [r4, #4]
 80065b8:	bf08      	it	eq
 80065ba:	6031      	streq	r1, [r6, #0]
 80065bc:	5162      	str	r2, [r4, r5]
 80065be:	604b      	str	r3, [r1, #4]
 80065c0:	4638      	mov	r0, r7
 80065c2:	f104 060b 	add.w	r6, r4, #11
 80065c6:	f000 fbc5 	bl	8006d54 <__malloc_unlock>
 80065ca:	f026 0607 	bic.w	r6, r6, #7
 80065ce:	1d23      	adds	r3, r4, #4
 80065d0:	1af2      	subs	r2, r6, r3
 80065d2:	d0b6      	beq.n	8006542 <_malloc_r+0x22>
 80065d4:	1b9b      	subs	r3, r3, r6
 80065d6:	50a3      	str	r3, [r4, r2]
 80065d8:	e7b3      	b.n	8006542 <_malloc_r+0x22>
 80065da:	6862      	ldr	r2, [r4, #4]
 80065dc:	42a3      	cmp	r3, r4
 80065de:	bf0c      	ite	eq
 80065e0:	6032      	streq	r2, [r6, #0]
 80065e2:	605a      	strne	r2, [r3, #4]
 80065e4:	e7ec      	b.n	80065c0 <_malloc_r+0xa0>
 80065e6:	4623      	mov	r3, r4
 80065e8:	6864      	ldr	r4, [r4, #4]
 80065ea:	e7b2      	b.n	8006552 <_malloc_r+0x32>
 80065ec:	4634      	mov	r4, r6
 80065ee:	6876      	ldr	r6, [r6, #4]
 80065f0:	e7b9      	b.n	8006566 <_malloc_r+0x46>
 80065f2:	230c      	movs	r3, #12
 80065f4:	603b      	str	r3, [r7, #0]
 80065f6:	4638      	mov	r0, r7
 80065f8:	f000 fbac 	bl	8006d54 <__malloc_unlock>
 80065fc:	e7a1      	b.n	8006542 <_malloc_r+0x22>
 80065fe:	6025      	str	r5, [r4, #0]
 8006600:	e7de      	b.n	80065c0 <_malloc_r+0xa0>
 8006602:	bf00      	nop
 8006604:	200004a8 	.word	0x200004a8

08006608 <__sfputc_r>:
 8006608:	6893      	ldr	r3, [r2, #8]
 800660a:	3b01      	subs	r3, #1
 800660c:	2b00      	cmp	r3, #0
 800660e:	b410      	push	{r4}
 8006610:	6093      	str	r3, [r2, #8]
 8006612:	da08      	bge.n	8006626 <__sfputc_r+0x1e>
 8006614:	6994      	ldr	r4, [r2, #24]
 8006616:	42a3      	cmp	r3, r4
 8006618:	db01      	blt.n	800661e <__sfputc_r+0x16>
 800661a:	290a      	cmp	r1, #10
 800661c:	d103      	bne.n	8006626 <__sfputc_r+0x1e>
 800661e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006622:	f7ff bbf9 	b.w	8005e18 <__swbuf_r>
 8006626:	6813      	ldr	r3, [r2, #0]
 8006628:	1c58      	adds	r0, r3, #1
 800662a:	6010      	str	r0, [r2, #0]
 800662c:	7019      	strb	r1, [r3, #0]
 800662e:	4608      	mov	r0, r1
 8006630:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006634:	4770      	bx	lr

08006636 <__sfputs_r>:
 8006636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006638:	4606      	mov	r6, r0
 800663a:	460f      	mov	r7, r1
 800663c:	4614      	mov	r4, r2
 800663e:	18d5      	adds	r5, r2, r3
 8006640:	42ac      	cmp	r4, r5
 8006642:	d101      	bne.n	8006648 <__sfputs_r+0x12>
 8006644:	2000      	movs	r0, #0
 8006646:	e007      	b.n	8006658 <__sfputs_r+0x22>
 8006648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800664c:	463a      	mov	r2, r7
 800664e:	4630      	mov	r0, r6
 8006650:	f7ff ffda 	bl	8006608 <__sfputc_r>
 8006654:	1c43      	adds	r3, r0, #1
 8006656:	d1f3      	bne.n	8006640 <__sfputs_r+0xa>
 8006658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800665c <_vfiprintf_r>:
 800665c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006660:	460d      	mov	r5, r1
 8006662:	b09d      	sub	sp, #116	; 0x74
 8006664:	4614      	mov	r4, r2
 8006666:	4698      	mov	r8, r3
 8006668:	4606      	mov	r6, r0
 800666a:	b118      	cbz	r0, 8006674 <_vfiprintf_r+0x18>
 800666c:	6983      	ldr	r3, [r0, #24]
 800666e:	b90b      	cbnz	r3, 8006674 <_vfiprintf_r+0x18>
 8006670:	f7ff fdca 	bl	8006208 <__sinit>
 8006674:	4b89      	ldr	r3, [pc, #548]	; (800689c <_vfiprintf_r+0x240>)
 8006676:	429d      	cmp	r5, r3
 8006678:	d11b      	bne.n	80066b2 <_vfiprintf_r+0x56>
 800667a:	6875      	ldr	r5, [r6, #4]
 800667c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800667e:	07d9      	lsls	r1, r3, #31
 8006680:	d405      	bmi.n	800668e <_vfiprintf_r+0x32>
 8006682:	89ab      	ldrh	r3, [r5, #12]
 8006684:	059a      	lsls	r2, r3, #22
 8006686:	d402      	bmi.n	800668e <_vfiprintf_r+0x32>
 8006688:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800668a:	f7ff fe6d 	bl	8006368 <__retarget_lock_acquire_recursive>
 800668e:	89ab      	ldrh	r3, [r5, #12]
 8006690:	071b      	lsls	r3, r3, #28
 8006692:	d501      	bpl.n	8006698 <_vfiprintf_r+0x3c>
 8006694:	692b      	ldr	r3, [r5, #16]
 8006696:	b9eb      	cbnz	r3, 80066d4 <_vfiprintf_r+0x78>
 8006698:	4629      	mov	r1, r5
 800669a:	4630      	mov	r0, r6
 800669c:	f7ff fc0e 	bl	8005ebc <__swsetup_r>
 80066a0:	b1c0      	cbz	r0, 80066d4 <_vfiprintf_r+0x78>
 80066a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066a4:	07dc      	lsls	r4, r3, #31
 80066a6:	d50e      	bpl.n	80066c6 <_vfiprintf_r+0x6a>
 80066a8:	f04f 30ff 	mov.w	r0, #4294967295
 80066ac:	b01d      	add	sp, #116	; 0x74
 80066ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066b2:	4b7b      	ldr	r3, [pc, #492]	; (80068a0 <_vfiprintf_r+0x244>)
 80066b4:	429d      	cmp	r5, r3
 80066b6:	d101      	bne.n	80066bc <_vfiprintf_r+0x60>
 80066b8:	68b5      	ldr	r5, [r6, #8]
 80066ba:	e7df      	b.n	800667c <_vfiprintf_r+0x20>
 80066bc:	4b79      	ldr	r3, [pc, #484]	; (80068a4 <_vfiprintf_r+0x248>)
 80066be:	429d      	cmp	r5, r3
 80066c0:	bf08      	it	eq
 80066c2:	68f5      	ldreq	r5, [r6, #12]
 80066c4:	e7da      	b.n	800667c <_vfiprintf_r+0x20>
 80066c6:	89ab      	ldrh	r3, [r5, #12]
 80066c8:	0598      	lsls	r0, r3, #22
 80066ca:	d4ed      	bmi.n	80066a8 <_vfiprintf_r+0x4c>
 80066cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066ce:	f7ff fe4c 	bl	800636a <__retarget_lock_release_recursive>
 80066d2:	e7e9      	b.n	80066a8 <_vfiprintf_r+0x4c>
 80066d4:	2300      	movs	r3, #0
 80066d6:	9309      	str	r3, [sp, #36]	; 0x24
 80066d8:	2320      	movs	r3, #32
 80066da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066de:	f8cd 800c 	str.w	r8, [sp, #12]
 80066e2:	2330      	movs	r3, #48	; 0x30
 80066e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80068a8 <_vfiprintf_r+0x24c>
 80066e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066ec:	f04f 0901 	mov.w	r9, #1
 80066f0:	4623      	mov	r3, r4
 80066f2:	469a      	mov	sl, r3
 80066f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066f8:	b10a      	cbz	r2, 80066fe <_vfiprintf_r+0xa2>
 80066fa:	2a25      	cmp	r2, #37	; 0x25
 80066fc:	d1f9      	bne.n	80066f2 <_vfiprintf_r+0x96>
 80066fe:	ebba 0b04 	subs.w	fp, sl, r4
 8006702:	d00b      	beq.n	800671c <_vfiprintf_r+0xc0>
 8006704:	465b      	mov	r3, fp
 8006706:	4622      	mov	r2, r4
 8006708:	4629      	mov	r1, r5
 800670a:	4630      	mov	r0, r6
 800670c:	f7ff ff93 	bl	8006636 <__sfputs_r>
 8006710:	3001      	adds	r0, #1
 8006712:	f000 80aa 	beq.w	800686a <_vfiprintf_r+0x20e>
 8006716:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006718:	445a      	add	r2, fp
 800671a:	9209      	str	r2, [sp, #36]	; 0x24
 800671c:	f89a 3000 	ldrb.w	r3, [sl]
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 80a2 	beq.w	800686a <_vfiprintf_r+0x20e>
 8006726:	2300      	movs	r3, #0
 8006728:	f04f 32ff 	mov.w	r2, #4294967295
 800672c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006730:	f10a 0a01 	add.w	sl, sl, #1
 8006734:	9304      	str	r3, [sp, #16]
 8006736:	9307      	str	r3, [sp, #28]
 8006738:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800673c:	931a      	str	r3, [sp, #104]	; 0x68
 800673e:	4654      	mov	r4, sl
 8006740:	2205      	movs	r2, #5
 8006742:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006746:	4858      	ldr	r0, [pc, #352]	; (80068a8 <_vfiprintf_r+0x24c>)
 8006748:	f7f9 fd52 	bl	80001f0 <memchr>
 800674c:	9a04      	ldr	r2, [sp, #16]
 800674e:	b9d8      	cbnz	r0, 8006788 <_vfiprintf_r+0x12c>
 8006750:	06d1      	lsls	r1, r2, #27
 8006752:	bf44      	itt	mi
 8006754:	2320      	movmi	r3, #32
 8006756:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800675a:	0713      	lsls	r3, r2, #28
 800675c:	bf44      	itt	mi
 800675e:	232b      	movmi	r3, #43	; 0x2b
 8006760:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006764:	f89a 3000 	ldrb.w	r3, [sl]
 8006768:	2b2a      	cmp	r3, #42	; 0x2a
 800676a:	d015      	beq.n	8006798 <_vfiprintf_r+0x13c>
 800676c:	9a07      	ldr	r2, [sp, #28]
 800676e:	4654      	mov	r4, sl
 8006770:	2000      	movs	r0, #0
 8006772:	f04f 0c0a 	mov.w	ip, #10
 8006776:	4621      	mov	r1, r4
 8006778:	f811 3b01 	ldrb.w	r3, [r1], #1
 800677c:	3b30      	subs	r3, #48	; 0x30
 800677e:	2b09      	cmp	r3, #9
 8006780:	d94e      	bls.n	8006820 <_vfiprintf_r+0x1c4>
 8006782:	b1b0      	cbz	r0, 80067b2 <_vfiprintf_r+0x156>
 8006784:	9207      	str	r2, [sp, #28]
 8006786:	e014      	b.n	80067b2 <_vfiprintf_r+0x156>
 8006788:	eba0 0308 	sub.w	r3, r0, r8
 800678c:	fa09 f303 	lsl.w	r3, r9, r3
 8006790:	4313      	orrs	r3, r2
 8006792:	9304      	str	r3, [sp, #16]
 8006794:	46a2      	mov	sl, r4
 8006796:	e7d2      	b.n	800673e <_vfiprintf_r+0xe2>
 8006798:	9b03      	ldr	r3, [sp, #12]
 800679a:	1d19      	adds	r1, r3, #4
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	9103      	str	r1, [sp, #12]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	bfbb      	ittet	lt
 80067a4:	425b      	neglt	r3, r3
 80067a6:	f042 0202 	orrlt.w	r2, r2, #2
 80067aa:	9307      	strge	r3, [sp, #28]
 80067ac:	9307      	strlt	r3, [sp, #28]
 80067ae:	bfb8      	it	lt
 80067b0:	9204      	strlt	r2, [sp, #16]
 80067b2:	7823      	ldrb	r3, [r4, #0]
 80067b4:	2b2e      	cmp	r3, #46	; 0x2e
 80067b6:	d10c      	bne.n	80067d2 <_vfiprintf_r+0x176>
 80067b8:	7863      	ldrb	r3, [r4, #1]
 80067ba:	2b2a      	cmp	r3, #42	; 0x2a
 80067bc:	d135      	bne.n	800682a <_vfiprintf_r+0x1ce>
 80067be:	9b03      	ldr	r3, [sp, #12]
 80067c0:	1d1a      	adds	r2, r3, #4
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	9203      	str	r2, [sp, #12]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	bfb8      	it	lt
 80067ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80067ce:	3402      	adds	r4, #2
 80067d0:	9305      	str	r3, [sp, #20]
 80067d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80068b8 <_vfiprintf_r+0x25c>
 80067d6:	7821      	ldrb	r1, [r4, #0]
 80067d8:	2203      	movs	r2, #3
 80067da:	4650      	mov	r0, sl
 80067dc:	f7f9 fd08 	bl	80001f0 <memchr>
 80067e0:	b140      	cbz	r0, 80067f4 <_vfiprintf_r+0x198>
 80067e2:	2340      	movs	r3, #64	; 0x40
 80067e4:	eba0 000a 	sub.w	r0, r0, sl
 80067e8:	fa03 f000 	lsl.w	r0, r3, r0
 80067ec:	9b04      	ldr	r3, [sp, #16]
 80067ee:	4303      	orrs	r3, r0
 80067f0:	3401      	adds	r4, #1
 80067f2:	9304      	str	r3, [sp, #16]
 80067f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067f8:	482c      	ldr	r0, [pc, #176]	; (80068ac <_vfiprintf_r+0x250>)
 80067fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067fe:	2206      	movs	r2, #6
 8006800:	f7f9 fcf6 	bl	80001f0 <memchr>
 8006804:	2800      	cmp	r0, #0
 8006806:	d03f      	beq.n	8006888 <_vfiprintf_r+0x22c>
 8006808:	4b29      	ldr	r3, [pc, #164]	; (80068b0 <_vfiprintf_r+0x254>)
 800680a:	bb1b      	cbnz	r3, 8006854 <_vfiprintf_r+0x1f8>
 800680c:	9b03      	ldr	r3, [sp, #12]
 800680e:	3307      	adds	r3, #7
 8006810:	f023 0307 	bic.w	r3, r3, #7
 8006814:	3308      	adds	r3, #8
 8006816:	9303      	str	r3, [sp, #12]
 8006818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800681a:	443b      	add	r3, r7
 800681c:	9309      	str	r3, [sp, #36]	; 0x24
 800681e:	e767      	b.n	80066f0 <_vfiprintf_r+0x94>
 8006820:	fb0c 3202 	mla	r2, ip, r2, r3
 8006824:	460c      	mov	r4, r1
 8006826:	2001      	movs	r0, #1
 8006828:	e7a5      	b.n	8006776 <_vfiprintf_r+0x11a>
 800682a:	2300      	movs	r3, #0
 800682c:	3401      	adds	r4, #1
 800682e:	9305      	str	r3, [sp, #20]
 8006830:	4619      	mov	r1, r3
 8006832:	f04f 0c0a 	mov.w	ip, #10
 8006836:	4620      	mov	r0, r4
 8006838:	f810 2b01 	ldrb.w	r2, [r0], #1
 800683c:	3a30      	subs	r2, #48	; 0x30
 800683e:	2a09      	cmp	r2, #9
 8006840:	d903      	bls.n	800684a <_vfiprintf_r+0x1ee>
 8006842:	2b00      	cmp	r3, #0
 8006844:	d0c5      	beq.n	80067d2 <_vfiprintf_r+0x176>
 8006846:	9105      	str	r1, [sp, #20]
 8006848:	e7c3      	b.n	80067d2 <_vfiprintf_r+0x176>
 800684a:	fb0c 2101 	mla	r1, ip, r1, r2
 800684e:	4604      	mov	r4, r0
 8006850:	2301      	movs	r3, #1
 8006852:	e7f0      	b.n	8006836 <_vfiprintf_r+0x1da>
 8006854:	ab03      	add	r3, sp, #12
 8006856:	9300      	str	r3, [sp, #0]
 8006858:	462a      	mov	r2, r5
 800685a:	4b16      	ldr	r3, [pc, #88]	; (80068b4 <_vfiprintf_r+0x258>)
 800685c:	a904      	add	r1, sp, #16
 800685e:	4630      	mov	r0, r6
 8006860:	f3af 8000 	nop.w
 8006864:	4607      	mov	r7, r0
 8006866:	1c78      	adds	r0, r7, #1
 8006868:	d1d6      	bne.n	8006818 <_vfiprintf_r+0x1bc>
 800686a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800686c:	07d9      	lsls	r1, r3, #31
 800686e:	d405      	bmi.n	800687c <_vfiprintf_r+0x220>
 8006870:	89ab      	ldrh	r3, [r5, #12]
 8006872:	059a      	lsls	r2, r3, #22
 8006874:	d402      	bmi.n	800687c <_vfiprintf_r+0x220>
 8006876:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006878:	f7ff fd77 	bl	800636a <__retarget_lock_release_recursive>
 800687c:	89ab      	ldrh	r3, [r5, #12]
 800687e:	065b      	lsls	r3, r3, #25
 8006880:	f53f af12 	bmi.w	80066a8 <_vfiprintf_r+0x4c>
 8006884:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006886:	e711      	b.n	80066ac <_vfiprintf_r+0x50>
 8006888:	ab03      	add	r3, sp, #12
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	462a      	mov	r2, r5
 800688e:	4b09      	ldr	r3, [pc, #36]	; (80068b4 <_vfiprintf_r+0x258>)
 8006890:	a904      	add	r1, sp, #16
 8006892:	4630      	mov	r0, r6
 8006894:	f000 f880 	bl	8006998 <_printf_i>
 8006898:	e7e4      	b.n	8006864 <_vfiprintf_r+0x208>
 800689a:	bf00      	nop
 800689c:	080070d8 	.word	0x080070d8
 80068a0:	080070f8 	.word	0x080070f8
 80068a4:	080070b8 	.word	0x080070b8
 80068a8:	08007118 	.word	0x08007118
 80068ac:	08007122 	.word	0x08007122
 80068b0:	00000000 	.word	0x00000000
 80068b4:	08006637 	.word	0x08006637
 80068b8:	0800711e 	.word	0x0800711e

080068bc <_printf_common>:
 80068bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068c0:	4616      	mov	r6, r2
 80068c2:	4699      	mov	r9, r3
 80068c4:	688a      	ldr	r2, [r1, #8]
 80068c6:	690b      	ldr	r3, [r1, #16]
 80068c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068cc:	4293      	cmp	r3, r2
 80068ce:	bfb8      	it	lt
 80068d0:	4613      	movlt	r3, r2
 80068d2:	6033      	str	r3, [r6, #0]
 80068d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068d8:	4607      	mov	r7, r0
 80068da:	460c      	mov	r4, r1
 80068dc:	b10a      	cbz	r2, 80068e2 <_printf_common+0x26>
 80068de:	3301      	adds	r3, #1
 80068e0:	6033      	str	r3, [r6, #0]
 80068e2:	6823      	ldr	r3, [r4, #0]
 80068e4:	0699      	lsls	r1, r3, #26
 80068e6:	bf42      	ittt	mi
 80068e8:	6833      	ldrmi	r3, [r6, #0]
 80068ea:	3302      	addmi	r3, #2
 80068ec:	6033      	strmi	r3, [r6, #0]
 80068ee:	6825      	ldr	r5, [r4, #0]
 80068f0:	f015 0506 	ands.w	r5, r5, #6
 80068f4:	d106      	bne.n	8006904 <_printf_common+0x48>
 80068f6:	f104 0a19 	add.w	sl, r4, #25
 80068fa:	68e3      	ldr	r3, [r4, #12]
 80068fc:	6832      	ldr	r2, [r6, #0]
 80068fe:	1a9b      	subs	r3, r3, r2
 8006900:	42ab      	cmp	r3, r5
 8006902:	dc26      	bgt.n	8006952 <_printf_common+0x96>
 8006904:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006908:	1e13      	subs	r3, r2, #0
 800690a:	6822      	ldr	r2, [r4, #0]
 800690c:	bf18      	it	ne
 800690e:	2301      	movne	r3, #1
 8006910:	0692      	lsls	r2, r2, #26
 8006912:	d42b      	bmi.n	800696c <_printf_common+0xb0>
 8006914:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006918:	4649      	mov	r1, r9
 800691a:	4638      	mov	r0, r7
 800691c:	47c0      	blx	r8
 800691e:	3001      	adds	r0, #1
 8006920:	d01e      	beq.n	8006960 <_printf_common+0xa4>
 8006922:	6823      	ldr	r3, [r4, #0]
 8006924:	68e5      	ldr	r5, [r4, #12]
 8006926:	6832      	ldr	r2, [r6, #0]
 8006928:	f003 0306 	and.w	r3, r3, #6
 800692c:	2b04      	cmp	r3, #4
 800692e:	bf08      	it	eq
 8006930:	1aad      	subeq	r5, r5, r2
 8006932:	68a3      	ldr	r3, [r4, #8]
 8006934:	6922      	ldr	r2, [r4, #16]
 8006936:	bf0c      	ite	eq
 8006938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800693c:	2500      	movne	r5, #0
 800693e:	4293      	cmp	r3, r2
 8006940:	bfc4      	itt	gt
 8006942:	1a9b      	subgt	r3, r3, r2
 8006944:	18ed      	addgt	r5, r5, r3
 8006946:	2600      	movs	r6, #0
 8006948:	341a      	adds	r4, #26
 800694a:	42b5      	cmp	r5, r6
 800694c:	d11a      	bne.n	8006984 <_printf_common+0xc8>
 800694e:	2000      	movs	r0, #0
 8006950:	e008      	b.n	8006964 <_printf_common+0xa8>
 8006952:	2301      	movs	r3, #1
 8006954:	4652      	mov	r2, sl
 8006956:	4649      	mov	r1, r9
 8006958:	4638      	mov	r0, r7
 800695a:	47c0      	blx	r8
 800695c:	3001      	adds	r0, #1
 800695e:	d103      	bne.n	8006968 <_printf_common+0xac>
 8006960:	f04f 30ff 	mov.w	r0, #4294967295
 8006964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006968:	3501      	adds	r5, #1
 800696a:	e7c6      	b.n	80068fa <_printf_common+0x3e>
 800696c:	18e1      	adds	r1, r4, r3
 800696e:	1c5a      	adds	r2, r3, #1
 8006970:	2030      	movs	r0, #48	; 0x30
 8006972:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006976:	4422      	add	r2, r4
 8006978:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800697c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006980:	3302      	adds	r3, #2
 8006982:	e7c7      	b.n	8006914 <_printf_common+0x58>
 8006984:	2301      	movs	r3, #1
 8006986:	4622      	mov	r2, r4
 8006988:	4649      	mov	r1, r9
 800698a:	4638      	mov	r0, r7
 800698c:	47c0      	blx	r8
 800698e:	3001      	adds	r0, #1
 8006990:	d0e6      	beq.n	8006960 <_printf_common+0xa4>
 8006992:	3601      	adds	r6, #1
 8006994:	e7d9      	b.n	800694a <_printf_common+0x8e>
	...

08006998 <_printf_i>:
 8006998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800699c:	7e0f      	ldrb	r7, [r1, #24]
 800699e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80069a0:	2f78      	cmp	r7, #120	; 0x78
 80069a2:	4691      	mov	r9, r2
 80069a4:	4680      	mov	r8, r0
 80069a6:	460c      	mov	r4, r1
 80069a8:	469a      	mov	sl, r3
 80069aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80069ae:	d807      	bhi.n	80069c0 <_printf_i+0x28>
 80069b0:	2f62      	cmp	r7, #98	; 0x62
 80069b2:	d80a      	bhi.n	80069ca <_printf_i+0x32>
 80069b4:	2f00      	cmp	r7, #0
 80069b6:	f000 80d8 	beq.w	8006b6a <_printf_i+0x1d2>
 80069ba:	2f58      	cmp	r7, #88	; 0x58
 80069bc:	f000 80a3 	beq.w	8006b06 <_printf_i+0x16e>
 80069c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069c8:	e03a      	b.n	8006a40 <_printf_i+0xa8>
 80069ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069ce:	2b15      	cmp	r3, #21
 80069d0:	d8f6      	bhi.n	80069c0 <_printf_i+0x28>
 80069d2:	a101      	add	r1, pc, #4	; (adr r1, 80069d8 <_printf_i+0x40>)
 80069d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069d8:	08006a31 	.word	0x08006a31
 80069dc:	08006a45 	.word	0x08006a45
 80069e0:	080069c1 	.word	0x080069c1
 80069e4:	080069c1 	.word	0x080069c1
 80069e8:	080069c1 	.word	0x080069c1
 80069ec:	080069c1 	.word	0x080069c1
 80069f0:	08006a45 	.word	0x08006a45
 80069f4:	080069c1 	.word	0x080069c1
 80069f8:	080069c1 	.word	0x080069c1
 80069fc:	080069c1 	.word	0x080069c1
 8006a00:	080069c1 	.word	0x080069c1
 8006a04:	08006b51 	.word	0x08006b51
 8006a08:	08006a75 	.word	0x08006a75
 8006a0c:	08006b33 	.word	0x08006b33
 8006a10:	080069c1 	.word	0x080069c1
 8006a14:	080069c1 	.word	0x080069c1
 8006a18:	08006b73 	.word	0x08006b73
 8006a1c:	080069c1 	.word	0x080069c1
 8006a20:	08006a75 	.word	0x08006a75
 8006a24:	080069c1 	.word	0x080069c1
 8006a28:	080069c1 	.word	0x080069c1
 8006a2c:	08006b3b 	.word	0x08006b3b
 8006a30:	682b      	ldr	r3, [r5, #0]
 8006a32:	1d1a      	adds	r2, r3, #4
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	602a      	str	r2, [r5, #0]
 8006a38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a40:	2301      	movs	r3, #1
 8006a42:	e0a3      	b.n	8006b8c <_printf_i+0x1f4>
 8006a44:	6820      	ldr	r0, [r4, #0]
 8006a46:	6829      	ldr	r1, [r5, #0]
 8006a48:	0606      	lsls	r6, r0, #24
 8006a4a:	f101 0304 	add.w	r3, r1, #4
 8006a4e:	d50a      	bpl.n	8006a66 <_printf_i+0xce>
 8006a50:	680e      	ldr	r6, [r1, #0]
 8006a52:	602b      	str	r3, [r5, #0]
 8006a54:	2e00      	cmp	r6, #0
 8006a56:	da03      	bge.n	8006a60 <_printf_i+0xc8>
 8006a58:	232d      	movs	r3, #45	; 0x2d
 8006a5a:	4276      	negs	r6, r6
 8006a5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a60:	485e      	ldr	r0, [pc, #376]	; (8006bdc <_printf_i+0x244>)
 8006a62:	230a      	movs	r3, #10
 8006a64:	e019      	b.n	8006a9a <_printf_i+0x102>
 8006a66:	680e      	ldr	r6, [r1, #0]
 8006a68:	602b      	str	r3, [r5, #0]
 8006a6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a6e:	bf18      	it	ne
 8006a70:	b236      	sxthne	r6, r6
 8006a72:	e7ef      	b.n	8006a54 <_printf_i+0xbc>
 8006a74:	682b      	ldr	r3, [r5, #0]
 8006a76:	6820      	ldr	r0, [r4, #0]
 8006a78:	1d19      	adds	r1, r3, #4
 8006a7a:	6029      	str	r1, [r5, #0]
 8006a7c:	0601      	lsls	r1, r0, #24
 8006a7e:	d501      	bpl.n	8006a84 <_printf_i+0xec>
 8006a80:	681e      	ldr	r6, [r3, #0]
 8006a82:	e002      	b.n	8006a8a <_printf_i+0xf2>
 8006a84:	0646      	lsls	r6, r0, #25
 8006a86:	d5fb      	bpl.n	8006a80 <_printf_i+0xe8>
 8006a88:	881e      	ldrh	r6, [r3, #0]
 8006a8a:	4854      	ldr	r0, [pc, #336]	; (8006bdc <_printf_i+0x244>)
 8006a8c:	2f6f      	cmp	r7, #111	; 0x6f
 8006a8e:	bf0c      	ite	eq
 8006a90:	2308      	moveq	r3, #8
 8006a92:	230a      	movne	r3, #10
 8006a94:	2100      	movs	r1, #0
 8006a96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a9a:	6865      	ldr	r5, [r4, #4]
 8006a9c:	60a5      	str	r5, [r4, #8]
 8006a9e:	2d00      	cmp	r5, #0
 8006aa0:	bfa2      	ittt	ge
 8006aa2:	6821      	ldrge	r1, [r4, #0]
 8006aa4:	f021 0104 	bicge.w	r1, r1, #4
 8006aa8:	6021      	strge	r1, [r4, #0]
 8006aaa:	b90e      	cbnz	r6, 8006ab0 <_printf_i+0x118>
 8006aac:	2d00      	cmp	r5, #0
 8006aae:	d04d      	beq.n	8006b4c <_printf_i+0x1b4>
 8006ab0:	4615      	mov	r5, r2
 8006ab2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ab6:	fb03 6711 	mls	r7, r3, r1, r6
 8006aba:	5dc7      	ldrb	r7, [r0, r7]
 8006abc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ac0:	4637      	mov	r7, r6
 8006ac2:	42bb      	cmp	r3, r7
 8006ac4:	460e      	mov	r6, r1
 8006ac6:	d9f4      	bls.n	8006ab2 <_printf_i+0x11a>
 8006ac8:	2b08      	cmp	r3, #8
 8006aca:	d10b      	bne.n	8006ae4 <_printf_i+0x14c>
 8006acc:	6823      	ldr	r3, [r4, #0]
 8006ace:	07de      	lsls	r6, r3, #31
 8006ad0:	d508      	bpl.n	8006ae4 <_printf_i+0x14c>
 8006ad2:	6923      	ldr	r3, [r4, #16]
 8006ad4:	6861      	ldr	r1, [r4, #4]
 8006ad6:	4299      	cmp	r1, r3
 8006ad8:	bfde      	ittt	le
 8006ada:	2330      	movle	r3, #48	; 0x30
 8006adc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ae0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ae4:	1b52      	subs	r2, r2, r5
 8006ae6:	6122      	str	r2, [r4, #16]
 8006ae8:	f8cd a000 	str.w	sl, [sp]
 8006aec:	464b      	mov	r3, r9
 8006aee:	aa03      	add	r2, sp, #12
 8006af0:	4621      	mov	r1, r4
 8006af2:	4640      	mov	r0, r8
 8006af4:	f7ff fee2 	bl	80068bc <_printf_common>
 8006af8:	3001      	adds	r0, #1
 8006afa:	d14c      	bne.n	8006b96 <_printf_i+0x1fe>
 8006afc:	f04f 30ff 	mov.w	r0, #4294967295
 8006b00:	b004      	add	sp, #16
 8006b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b06:	4835      	ldr	r0, [pc, #212]	; (8006bdc <_printf_i+0x244>)
 8006b08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006b0c:	6829      	ldr	r1, [r5, #0]
 8006b0e:	6823      	ldr	r3, [r4, #0]
 8006b10:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b14:	6029      	str	r1, [r5, #0]
 8006b16:	061d      	lsls	r5, r3, #24
 8006b18:	d514      	bpl.n	8006b44 <_printf_i+0x1ac>
 8006b1a:	07df      	lsls	r7, r3, #31
 8006b1c:	bf44      	itt	mi
 8006b1e:	f043 0320 	orrmi.w	r3, r3, #32
 8006b22:	6023      	strmi	r3, [r4, #0]
 8006b24:	b91e      	cbnz	r6, 8006b2e <_printf_i+0x196>
 8006b26:	6823      	ldr	r3, [r4, #0]
 8006b28:	f023 0320 	bic.w	r3, r3, #32
 8006b2c:	6023      	str	r3, [r4, #0]
 8006b2e:	2310      	movs	r3, #16
 8006b30:	e7b0      	b.n	8006a94 <_printf_i+0xfc>
 8006b32:	6823      	ldr	r3, [r4, #0]
 8006b34:	f043 0320 	orr.w	r3, r3, #32
 8006b38:	6023      	str	r3, [r4, #0]
 8006b3a:	2378      	movs	r3, #120	; 0x78
 8006b3c:	4828      	ldr	r0, [pc, #160]	; (8006be0 <_printf_i+0x248>)
 8006b3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b42:	e7e3      	b.n	8006b0c <_printf_i+0x174>
 8006b44:	0659      	lsls	r1, r3, #25
 8006b46:	bf48      	it	mi
 8006b48:	b2b6      	uxthmi	r6, r6
 8006b4a:	e7e6      	b.n	8006b1a <_printf_i+0x182>
 8006b4c:	4615      	mov	r5, r2
 8006b4e:	e7bb      	b.n	8006ac8 <_printf_i+0x130>
 8006b50:	682b      	ldr	r3, [r5, #0]
 8006b52:	6826      	ldr	r6, [r4, #0]
 8006b54:	6961      	ldr	r1, [r4, #20]
 8006b56:	1d18      	adds	r0, r3, #4
 8006b58:	6028      	str	r0, [r5, #0]
 8006b5a:	0635      	lsls	r5, r6, #24
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	d501      	bpl.n	8006b64 <_printf_i+0x1cc>
 8006b60:	6019      	str	r1, [r3, #0]
 8006b62:	e002      	b.n	8006b6a <_printf_i+0x1d2>
 8006b64:	0670      	lsls	r0, r6, #25
 8006b66:	d5fb      	bpl.n	8006b60 <_printf_i+0x1c8>
 8006b68:	8019      	strh	r1, [r3, #0]
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	6123      	str	r3, [r4, #16]
 8006b6e:	4615      	mov	r5, r2
 8006b70:	e7ba      	b.n	8006ae8 <_printf_i+0x150>
 8006b72:	682b      	ldr	r3, [r5, #0]
 8006b74:	1d1a      	adds	r2, r3, #4
 8006b76:	602a      	str	r2, [r5, #0]
 8006b78:	681d      	ldr	r5, [r3, #0]
 8006b7a:	6862      	ldr	r2, [r4, #4]
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	4628      	mov	r0, r5
 8006b80:	f7f9 fb36 	bl	80001f0 <memchr>
 8006b84:	b108      	cbz	r0, 8006b8a <_printf_i+0x1f2>
 8006b86:	1b40      	subs	r0, r0, r5
 8006b88:	6060      	str	r0, [r4, #4]
 8006b8a:	6863      	ldr	r3, [r4, #4]
 8006b8c:	6123      	str	r3, [r4, #16]
 8006b8e:	2300      	movs	r3, #0
 8006b90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b94:	e7a8      	b.n	8006ae8 <_printf_i+0x150>
 8006b96:	6923      	ldr	r3, [r4, #16]
 8006b98:	462a      	mov	r2, r5
 8006b9a:	4649      	mov	r1, r9
 8006b9c:	4640      	mov	r0, r8
 8006b9e:	47d0      	blx	sl
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	d0ab      	beq.n	8006afc <_printf_i+0x164>
 8006ba4:	6823      	ldr	r3, [r4, #0]
 8006ba6:	079b      	lsls	r3, r3, #30
 8006ba8:	d413      	bmi.n	8006bd2 <_printf_i+0x23a>
 8006baa:	68e0      	ldr	r0, [r4, #12]
 8006bac:	9b03      	ldr	r3, [sp, #12]
 8006bae:	4298      	cmp	r0, r3
 8006bb0:	bfb8      	it	lt
 8006bb2:	4618      	movlt	r0, r3
 8006bb4:	e7a4      	b.n	8006b00 <_printf_i+0x168>
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	4632      	mov	r2, r6
 8006bba:	4649      	mov	r1, r9
 8006bbc:	4640      	mov	r0, r8
 8006bbe:	47d0      	blx	sl
 8006bc0:	3001      	adds	r0, #1
 8006bc2:	d09b      	beq.n	8006afc <_printf_i+0x164>
 8006bc4:	3501      	adds	r5, #1
 8006bc6:	68e3      	ldr	r3, [r4, #12]
 8006bc8:	9903      	ldr	r1, [sp, #12]
 8006bca:	1a5b      	subs	r3, r3, r1
 8006bcc:	42ab      	cmp	r3, r5
 8006bce:	dcf2      	bgt.n	8006bb6 <_printf_i+0x21e>
 8006bd0:	e7eb      	b.n	8006baa <_printf_i+0x212>
 8006bd2:	2500      	movs	r5, #0
 8006bd4:	f104 0619 	add.w	r6, r4, #25
 8006bd8:	e7f5      	b.n	8006bc6 <_printf_i+0x22e>
 8006bda:	bf00      	nop
 8006bdc:	08007129 	.word	0x08007129
 8006be0:	0800713a 	.word	0x0800713a

08006be4 <_sbrk_r>:
 8006be4:	b538      	push	{r3, r4, r5, lr}
 8006be6:	4d06      	ldr	r5, [pc, #24]	; (8006c00 <_sbrk_r+0x1c>)
 8006be8:	2300      	movs	r3, #0
 8006bea:	4604      	mov	r4, r0
 8006bec:	4608      	mov	r0, r1
 8006bee:	602b      	str	r3, [r5, #0]
 8006bf0:	f7fa fdd6 	bl	80017a0 <_sbrk>
 8006bf4:	1c43      	adds	r3, r0, #1
 8006bf6:	d102      	bne.n	8006bfe <_sbrk_r+0x1a>
 8006bf8:	682b      	ldr	r3, [r5, #0]
 8006bfa:	b103      	cbz	r3, 8006bfe <_sbrk_r+0x1a>
 8006bfc:	6023      	str	r3, [r4, #0]
 8006bfe:	bd38      	pop	{r3, r4, r5, pc}
 8006c00:	200004b0 	.word	0x200004b0

08006c04 <__sread>:
 8006c04:	b510      	push	{r4, lr}
 8006c06:	460c      	mov	r4, r1
 8006c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c0c:	f000 f8a8 	bl	8006d60 <_read_r>
 8006c10:	2800      	cmp	r0, #0
 8006c12:	bfab      	itete	ge
 8006c14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c16:	89a3      	ldrhlt	r3, [r4, #12]
 8006c18:	181b      	addge	r3, r3, r0
 8006c1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c1e:	bfac      	ite	ge
 8006c20:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c22:	81a3      	strhlt	r3, [r4, #12]
 8006c24:	bd10      	pop	{r4, pc}

08006c26 <__swrite>:
 8006c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c2a:	461f      	mov	r7, r3
 8006c2c:	898b      	ldrh	r3, [r1, #12]
 8006c2e:	05db      	lsls	r3, r3, #23
 8006c30:	4605      	mov	r5, r0
 8006c32:	460c      	mov	r4, r1
 8006c34:	4616      	mov	r6, r2
 8006c36:	d505      	bpl.n	8006c44 <__swrite+0x1e>
 8006c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f000 f870 	bl	8006d24 <_lseek_r>
 8006c44:	89a3      	ldrh	r3, [r4, #12]
 8006c46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c4e:	81a3      	strh	r3, [r4, #12]
 8006c50:	4632      	mov	r2, r6
 8006c52:	463b      	mov	r3, r7
 8006c54:	4628      	mov	r0, r5
 8006c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c5a:	f000 b817 	b.w	8006c8c <_write_r>

08006c5e <__sseek>:
 8006c5e:	b510      	push	{r4, lr}
 8006c60:	460c      	mov	r4, r1
 8006c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c66:	f000 f85d 	bl	8006d24 <_lseek_r>
 8006c6a:	1c43      	adds	r3, r0, #1
 8006c6c:	89a3      	ldrh	r3, [r4, #12]
 8006c6e:	bf15      	itete	ne
 8006c70:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c7a:	81a3      	strheq	r3, [r4, #12]
 8006c7c:	bf18      	it	ne
 8006c7e:	81a3      	strhne	r3, [r4, #12]
 8006c80:	bd10      	pop	{r4, pc}

08006c82 <__sclose>:
 8006c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c86:	f000 b81b 	b.w	8006cc0 <_close_r>
	...

08006c8c <_write_r>:
 8006c8c:	b538      	push	{r3, r4, r5, lr}
 8006c8e:	4d07      	ldr	r5, [pc, #28]	; (8006cac <_write_r+0x20>)
 8006c90:	4604      	mov	r4, r0
 8006c92:	4608      	mov	r0, r1
 8006c94:	4611      	mov	r1, r2
 8006c96:	2200      	movs	r2, #0
 8006c98:	602a      	str	r2, [r5, #0]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	f7fa f84c 	bl	8000d38 <_write>
 8006ca0:	1c43      	adds	r3, r0, #1
 8006ca2:	d102      	bne.n	8006caa <_write_r+0x1e>
 8006ca4:	682b      	ldr	r3, [r5, #0]
 8006ca6:	b103      	cbz	r3, 8006caa <_write_r+0x1e>
 8006ca8:	6023      	str	r3, [r4, #0]
 8006caa:	bd38      	pop	{r3, r4, r5, pc}
 8006cac:	200004b0 	.word	0x200004b0

08006cb0 <abort>:
 8006cb0:	b508      	push	{r3, lr}
 8006cb2:	2006      	movs	r0, #6
 8006cb4:	f000 f88e 	bl	8006dd4 <raise>
 8006cb8:	2001      	movs	r0, #1
 8006cba:	f7fa fd15 	bl	80016e8 <_exit>
	...

08006cc0 <_close_r>:
 8006cc0:	b538      	push	{r3, r4, r5, lr}
 8006cc2:	4d06      	ldr	r5, [pc, #24]	; (8006cdc <_close_r+0x1c>)
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	4604      	mov	r4, r0
 8006cc8:	4608      	mov	r0, r1
 8006cca:	602b      	str	r3, [r5, #0]
 8006ccc:	f7fa fd33 	bl	8001736 <_close>
 8006cd0:	1c43      	adds	r3, r0, #1
 8006cd2:	d102      	bne.n	8006cda <_close_r+0x1a>
 8006cd4:	682b      	ldr	r3, [r5, #0]
 8006cd6:	b103      	cbz	r3, 8006cda <_close_r+0x1a>
 8006cd8:	6023      	str	r3, [r4, #0]
 8006cda:	bd38      	pop	{r3, r4, r5, pc}
 8006cdc:	200004b0 	.word	0x200004b0

08006ce0 <_fstat_r>:
 8006ce0:	b538      	push	{r3, r4, r5, lr}
 8006ce2:	4d07      	ldr	r5, [pc, #28]	; (8006d00 <_fstat_r+0x20>)
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	4604      	mov	r4, r0
 8006ce8:	4608      	mov	r0, r1
 8006cea:	4611      	mov	r1, r2
 8006cec:	602b      	str	r3, [r5, #0]
 8006cee:	f7fa fd2e 	bl	800174e <_fstat>
 8006cf2:	1c43      	adds	r3, r0, #1
 8006cf4:	d102      	bne.n	8006cfc <_fstat_r+0x1c>
 8006cf6:	682b      	ldr	r3, [r5, #0]
 8006cf8:	b103      	cbz	r3, 8006cfc <_fstat_r+0x1c>
 8006cfa:	6023      	str	r3, [r4, #0]
 8006cfc:	bd38      	pop	{r3, r4, r5, pc}
 8006cfe:	bf00      	nop
 8006d00:	200004b0 	.word	0x200004b0

08006d04 <_isatty_r>:
 8006d04:	b538      	push	{r3, r4, r5, lr}
 8006d06:	4d06      	ldr	r5, [pc, #24]	; (8006d20 <_isatty_r+0x1c>)
 8006d08:	2300      	movs	r3, #0
 8006d0a:	4604      	mov	r4, r0
 8006d0c:	4608      	mov	r0, r1
 8006d0e:	602b      	str	r3, [r5, #0]
 8006d10:	f7fa fd2d 	bl	800176e <_isatty>
 8006d14:	1c43      	adds	r3, r0, #1
 8006d16:	d102      	bne.n	8006d1e <_isatty_r+0x1a>
 8006d18:	682b      	ldr	r3, [r5, #0]
 8006d1a:	b103      	cbz	r3, 8006d1e <_isatty_r+0x1a>
 8006d1c:	6023      	str	r3, [r4, #0]
 8006d1e:	bd38      	pop	{r3, r4, r5, pc}
 8006d20:	200004b0 	.word	0x200004b0

08006d24 <_lseek_r>:
 8006d24:	b538      	push	{r3, r4, r5, lr}
 8006d26:	4d07      	ldr	r5, [pc, #28]	; (8006d44 <_lseek_r+0x20>)
 8006d28:	4604      	mov	r4, r0
 8006d2a:	4608      	mov	r0, r1
 8006d2c:	4611      	mov	r1, r2
 8006d2e:	2200      	movs	r2, #0
 8006d30:	602a      	str	r2, [r5, #0]
 8006d32:	461a      	mov	r2, r3
 8006d34:	f7fa fd26 	bl	8001784 <_lseek>
 8006d38:	1c43      	adds	r3, r0, #1
 8006d3a:	d102      	bne.n	8006d42 <_lseek_r+0x1e>
 8006d3c:	682b      	ldr	r3, [r5, #0]
 8006d3e:	b103      	cbz	r3, 8006d42 <_lseek_r+0x1e>
 8006d40:	6023      	str	r3, [r4, #0]
 8006d42:	bd38      	pop	{r3, r4, r5, pc}
 8006d44:	200004b0 	.word	0x200004b0

08006d48 <__malloc_lock>:
 8006d48:	4801      	ldr	r0, [pc, #4]	; (8006d50 <__malloc_lock+0x8>)
 8006d4a:	f7ff bb0d 	b.w	8006368 <__retarget_lock_acquire_recursive>
 8006d4e:	bf00      	nop
 8006d50:	200004a4 	.word	0x200004a4

08006d54 <__malloc_unlock>:
 8006d54:	4801      	ldr	r0, [pc, #4]	; (8006d5c <__malloc_unlock+0x8>)
 8006d56:	f7ff bb08 	b.w	800636a <__retarget_lock_release_recursive>
 8006d5a:	bf00      	nop
 8006d5c:	200004a4 	.word	0x200004a4

08006d60 <_read_r>:
 8006d60:	b538      	push	{r3, r4, r5, lr}
 8006d62:	4d07      	ldr	r5, [pc, #28]	; (8006d80 <_read_r+0x20>)
 8006d64:	4604      	mov	r4, r0
 8006d66:	4608      	mov	r0, r1
 8006d68:	4611      	mov	r1, r2
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	602a      	str	r2, [r5, #0]
 8006d6e:	461a      	mov	r2, r3
 8006d70:	f7fa fcc4 	bl	80016fc <_read>
 8006d74:	1c43      	adds	r3, r0, #1
 8006d76:	d102      	bne.n	8006d7e <_read_r+0x1e>
 8006d78:	682b      	ldr	r3, [r5, #0]
 8006d7a:	b103      	cbz	r3, 8006d7e <_read_r+0x1e>
 8006d7c:	6023      	str	r3, [r4, #0]
 8006d7e:	bd38      	pop	{r3, r4, r5, pc}
 8006d80:	200004b0 	.word	0x200004b0

08006d84 <_raise_r>:
 8006d84:	291f      	cmp	r1, #31
 8006d86:	b538      	push	{r3, r4, r5, lr}
 8006d88:	4604      	mov	r4, r0
 8006d8a:	460d      	mov	r5, r1
 8006d8c:	d904      	bls.n	8006d98 <_raise_r+0x14>
 8006d8e:	2316      	movs	r3, #22
 8006d90:	6003      	str	r3, [r0, #0]
 8006d92:	f04f 30ff 	mov.w	r0, #4294967295
 8006d96:	bd38      	pop	{r3, r4, r5, pc}
 8006d98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006d9a:	b112      	cbz	r2, 8006da2 <_raise_r+0x1e>
 8006d9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006da0:	b94b      	cbnz	r3, 8006db6 <_raise_r+0x32>
 8006da2:	4620      	mov	r0, r4
 8006da4:	f000 f830 	bl	8006e08 <_getpid_r>
 8006da8:	462a      	mov	r2, r5
 8006daa:	4601      	mov	r1, r0
 8006dac:	4620      	mov	r0, r4
 8006dae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006db2:	f000 b817 	b.w	8006de4 <_kill_r>
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d00a      	beq.n	8006dd0 <_raise_r+0x4c>
 8006dba:	1c59      	adds	r1, r3, #1
 8006dbc:	d103      	bne.n	8006dc6 <_raise_r+0x42>
 8006dbe:	2316      	movs	r3, #22
 8006dc0:	6003      	str	r3, [r0, #0]
 8006dc2:	2001      	movs	r0, #1
 8006dc4:	e7e7      	b.n	8006d96 <_raise_r+0x12>
 8006dc6:	2400      	movs	r4, #0
 8006dc8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006dcc:	4628      	mov	r0, r5
 8006dce:	4798      	blx	r3
 8006dd0:	2000      	movs	r0, #0
 8006dd2:	e7e0      	b.n	8006d96 <_raise_r+0x12>

08006dd4 <raise>:
 8006dd4:	4b02      	ldr	r3, [pc, #8]	; (8006de0 <raise+0xc>)
 8006dd6:	4601      	mov	r1, r0
 8006dd8:	6818      	ldr	r0, [r3, #0]
 8006dda:	f7ff bfd3 	b.w	8006d84 <_raise_r>
 8006dde:	bf00      	nop
 8006de0:	20000194 	.word	0x20000194

08006de4 <_kill_r>:
 8006de4:	b538      	push	{r3, r4, r5, lr}
 8006de6:	4d07      	ldr	r5, [pc, #28]	; (8006e04 <_kill_r+0x20>)
 8006de8:	2300      	movs	r3, #0
 8006dea:	4604      	mov	r4, r0
 8006dec:	4608      	mov	r0, r1
 8006dee:	4611      	mov	r1, r2
 8006df0:	602b      	str	r3, [r5, #0]
 8006df2:	f7fa fc69 	bl	80016c8 <_kill>
 8006df6:	1c43      	adds	r3, r0, #1
 8006df8:	d102      	bne.n	8006e00 <_kill_r+0x1c>
 8006dfa:	682b      	ldr	r3, [r5, #0]
 8006dfc:	b103      	cbz	r3, 8006e00 <_kill_r+0x1c>
 8006dfe:	6023      	str	r3, [r4, #0]
 8006e00:	bd38      	pop	{r3, r4, r5, pc}
 8006e02:	bf00      	nop
 8006e04:	200004b0 	.word	0x200004b0

08006e08 <_getpid_r>:
 8006e08:	f7fa bc56 	b.w	80016b8 <_getpid>

08006e0c <_init>:
 8006e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0e:	bf00      	nop
 8006e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e12:	bc08      	pop	{r3}
 8006e14:	469e      	mov	lr, r3
 8006e16:	4770      	bx	lr

08006e18 <_fini>:
 8006e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e1a:	bf00      	nop
 8006e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e1e:	bc08      	pop	{r3}
 8006e20:	469e      	mov	lr, r3
 8006e22:	4770      	bx	lr
