
EmbeddedProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  08006730  08006730  00016730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a58  08006a58  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  08006a58  08006a58  00016a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a60  08006a60  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a60  08006a60  00016a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a64  08006a64  00016a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08006a68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  200001f8  08006c60  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  08006c60  0002045c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012964  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002795  00000000  00000000  00032b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001028  00000000  00000000  00035328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f20  00000000  00000000  00036350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000289e5  00000000  00000000  00037270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001349a  00000000  00000000  0005fc55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5d2e  00000000  00000000  000730ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00168e1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e34  00000000  00000000  00168e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006718 	.word	0x08006718

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	08006718 	.word	0x08006718

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <initBtnClicks>:

BTN_CLICK* btn;


void initBtnClicks(BTN_CLICK* btnClick, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	4613      	mov	r3, r2
 80005a0:	80fb      	strh	r3, [r7, #6]
	btnClick->GPIOx = GPIOx;
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	68ba      	ldr	r2, [r7, #8]
 80005a6:	601a      	str	r2, [r3, #0]
	btnClick->GPIO_Pin = GPIO_Pin;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	88fa      	ldrh	r2, [r7, #6]
 80005ac:	809a      	strh	r2, [r3, #4]
	btnClick->noiseWait = OFF;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	2200      	movs	r2, #0
 80005b2:	71da      	strb	r2, [r3, #7]
	btnClick->status = WAITING_FIRST_CLICK;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	2200      	movs	r2, #0
 80005b8:	719a      	strb	r2, [r3, #6]
	btnClick->counter = 0;
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	2200      	movs	r2, #0
 80005be:	615a      	str	r2, [r3, #20]
	btnClick->bounceCounter = 0;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	2200      	movs	r2, #0
 80005c4:	611a      	str	r2, [r3, #16]
	btn = btnClick;
 80005c6:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <initBtnClicks+0x44>)
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	6013      	str	r3, [r2, #0]
}
 80005cc:	bf00      	nop
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	20000214 	.word	0x20000214

080005dc <onClickInterrupt>:

void onClickInterrupt(uint16_t GPIO_Pin)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	80fb      	strh	r3, [r7, #6]
	if(!(HAL_GPIO_ReadPin(btn->GPIOx, btn->GPIO_Pin)))
 80005e6:	4b2c      	ldr	r3, [pc, #176]	; (8000698 <onClickInterrupt+0xbc>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	4b2a      	ldr	r3, [pc, #168]	; (8000698 <onClickInterrupt+0xbc>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	889b      	ldrh	r3, [r3, #4]
 80005f2:	4619      	mov	r1, r3
 80005f4:	4610      	mov	r0, r2
 80005f6:	f001 fb5f 	bl	8001cb8 <HAL_GPIO_ReadPin>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d129      	bne.n	8000654 <onClickInterrupt+0x78>
	{
		if(btn->status == WAITING_FIRST_CLICK || btn->status == WAITING_FOR_LONG_PRESS)
 8000600:	4b25      	ldr	r3, [pc, #148]	; (8000698 <onClickInterrupt+0xbc>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	799b      	ldrb	r3, [r3, #6]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d004      	beq.n	8000614 <onClickInterrupt+0x38>
 800060a:	4b23      	ldr	r3, [pc, #140]	; (8000698 <onClickInterrupt+0xbc>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	799b      	ldrb	r3, [r3, #6]
 8000610:	2b03      	cmp	r3, #3
 8000612:	d10e      	bne.n	8000632 <onClickInterrupt+0x56>
		{
			btn->firstClick = HAL_GetTick();
 8000614:	f001 f888 	bl	8001728 <HAL_GetTick>
 8000618:	4602      	mov	r2, r0
 800061a:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <onClickInterrupt+0xbc>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	609a      	str	r2, [r3, #8]
			btn->status = WAITING_FOR_RELEASE;
 8000620:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <onClickInterrupt+0xbc>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2201      	movs	r2, #1
 8000626:	719a      	strb	r2, [r3, #6]
			btn->counter = 0;
 8000628:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <onClickInterrupt+0xbc>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2200      	movs	r2, #0
 800062e:	615a      	str	r2, [r3, #20]
			btn->status = WAITING_FIRST_CLICK;
		}

	}

}
 8000630:	e02d      	b.n	800068e <onClickInterrupt+0xb2>
		else if(btn->status == WAITING_FOR_DOUBLE)
 8000632:	4b19      	ldr	r3, [pc, #100]	; (8000698 <onClickInterrupt+0xbc>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	799b      	ldrb	r3, [r3, #6]
 8000638:	2b02      	cmp	r3, #2
 800063a:	d128      	bne.n	800068e <onClickInterrupt+0xb2>
			btn->counter = 0;
 800063c:	4b16      	ldr	r3, [pc, #88]	; (8000698 <onClickInterrupt+0xbc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2200      	movs	r2, #0
 8000642:	615a      	str	r2, [r3, #20]
			printf("was double click\n\r");
 8000644:	4815      	ldr	r0, [pc, #84]	; (800069c <onClickInterrupt+0xc0>)
 8000646:	f004 feef 	bl	8005428 <iprintf>
			btn->status = WAITING_FOR_LONG_PRESS;
 800064a:	4b13      	ldr	r3, [pc, #76]	; (8000698 <onClickInterrupt+0xbc>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2203      	movs	r2, #3
 8000650:	719a      	strb	r2, [r3, #6]
}
 8000652:	e01c      	b.n	800068e <onClickInterrupt+0xb2>
		if(btn->status == WAITING_FOR_RELEASE)
 8000654:	4b10      	ldr	r3, [pc, #64]	; (8000698 <onClickInterrupt+0xbc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	799b      	ldrb	r3, [r3, #6]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d10e      	bne.n	800067c <onClickInterrupt+0xa0>
			btn->secondClick = HAL_GetTick();
 800065e:	f001 f863 	bl	8001728 <HAL_GetTick>
 8000662:	4602      	mov	r2, r0
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <onClickInterrupt+0xbc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	60da      	str	r2, [r3, #12]
			btn->counter = 0;
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <onClickInterrupt+0xbc>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2200      	movs	r2, #0
 8000670:	615a      	str	r2, [r3, #20]
			btn->status = WAITING_FOR_DOUBLE;
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <onClickInterrupt+0xbc>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2202      	movs	r2, #2
 8000678:	719a      	strb	r2, [r3, #6]
}
 800067a:	e008      	b.n	800068e <onClickInterrupt+0xb2>
		else if(btn->status == WAITING_FOR_LONG_PRESS)
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <onClickInterrupt+0xbc>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	799b      	ldrb	r3, [r3, #6]
 8000682:	2b03      	cmp	r3, #3
 8000684:	d103      	bne.n	800068e <onClickInterrupt+0xb2>
			btn->status = WAITING_FIRST_CLICK;
 8000686:	4b04      	ldr	r3, [pc, #16]	; (8000698 <onClickInterrupt+0xbc>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2200      	movs	r2, #0
 800068c:	719a      	strb	r2, [r3, #6]
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000214 	.word	0x20000214
 800069c:	08006730 	.word	0x08006730

080006a0 <handleClicks>:

void handleClicks()
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	if(btn->noiseWait == ON)
 80006a4:	4b41      	ldr	r3, [pc, #260]	; (80007ac <handleClicks+0x10c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	79db      	ldrb	r3, [r3, #7]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d118      	bne.n	80006e0 <handleClicks+0x40>
	{
		btn->bounceCounter++;
 80006ae:	4b3f      	ldr	r3, [pc, #252]	; (80007ac <handleClicks+0x10c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	691a      	ldr	r2, [r3, #16]
 80006b4:	3201      	adds	r2, #1
 80006b6:	611a      	str	r2, [r3, #16]
		if(btn->bounceCounter >= BOUNCE_TIME_WAIT)
 80006b8:	4b3c      	ldr	r3, [pc, #240]	; (80007ac <handleClicks+0x10c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	691b      	ldr	r3, [r3, #16]
 80006be:	2b13      	cmp	r3, #19
 80006c0:	dd72      	ble.n	80007a8 <handleClicks+0x108>
		{
			btn->noiseWait = OFF;
 80006c2:	4b3a      	ldr	r3, [pc, #232]	; (80007ac <handleClicks+0x10c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2200      	movs	r2, #0
 80006c8:	71da      	strb	r2, [r3, #7]
			btn->bounceCounter = 0;
 80006ca:	4b38      	ldr	r3, [pc, #224]	; (80007ac <handleClicks+0x10c>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
			onClickInterrupt(btn->GPIO_Pin);
 80006d2:	4b36      	ldr	r3, [pc, #216]	; (80007ac <handleClicks+0x10c>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	889b      	ldrh	r3, [r3, #4]
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ff7f 	bl	80005dc <onClickInterrupt>
			}
			break;

		}
	}
}
 80006de:	e063      	b.n	80007a8 <handleClicks+0x108>
		if(btn->status != WAITING_FIRST_CLICK)
 80006e0:	4b32      	ldr	r3, [pc, #200]	; (80007ac <handleClicks+0x10c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	799b      	ldrb	r3, [r3, #6]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d004      	beq.n	80006f4 <handleClicks+0x54>
			btn->counter++;
 80006ea:	4b30      	ldr	r3, [pc, #192]	; (80007ac <handleClicks+0x10c>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	695a      	ldr	r2, [r3, #20]
 80006f0:	3201      	adds	r2, #1
 80006f2:	615a      	str	r2, [r3, #20]
		switch(btn->status)
 80006f4:	4b2d      	ldr	r3, [pc, #180]	; (80007ac <handleClicks+0x10c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	799b      	ldrb	r3, [r3, #6]
 80006fa:	2b03      	cmp	r3, #3
 80006fc:	d040      	beq.n	8000780 <handleClicks+0xe0>
 80006fe:	2b03      	cmp	r3, #3
 8000700:	dc52      	bgt.n	80007a8 <handleClicks+0x108>
 8000702:	2b01      	cmp	r3, #1
 8000704:	d002      	beq.n	800070c <handleClicks+0x6c>
 8000706:	2b02      	cmp	r3, #2
 8000708:	d00b      	beq.n	8000722 <handleClicks+0x82>
}
 800070a:	e04d      	b.n	80007a8 <handleClicks+0x108>
			if(btn->counter > 1000)
 800070c:	4b27      	ldr	r3, [pc, #156]	; (80007ac <handleClicks+0x10c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000716:	dd42      	ble.n	800079e <handleClicks+0xfe>
			btn->status = WAITING_FOR_LONG_PRESS;
 8000718:	4b24      	ldr	r3, [pc, #144]	; (80007ac <handleClicks+0x10c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2203      	movs	r2, #3
 800071e:	719a      	strb	r2, [r3, #6]
			break;
 8000720:	e03d      	b.n	800079e <handleClicks+0xfe>
			if(btn->counter > 200)//wasnt double click
 8000722:	4b22      	ldr	r3, [pc, #136]	; (80007ac <handleClicks+0x10c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	695b      	ldr	r3, [r3, #20]
 8000728:	2bc8      	cmp	r3, #200	; 0xc8
 800072a:	dd3a      	ble.n	80007a2 <handleClicks+0x102>
				btn->status = WAITING_FIRST_CLICK;
 800072c:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <handleClicks+0x10c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2200      	movs	r2, #0
 8000732:	719a      	strb	r2, [r3, #6]
				btn->counter = 0;
 8000734:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <handleClicks+0x10c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2200      	movs	r2, #0
 800073a:	615a      	str	r2, [r3, #20]
				if(btn->secondClick - btn->firstClick < 500)
 800073c:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <handleClicks+0x10c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	68da      	ldr	r2, [r3, #12]
 8000742:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <handleClicks+0x10c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	689b      	ldr	r3, [r3, #8]
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800074e:	da0b      	bge.n	8000768 <handleClicks+0xc8>
					printf("Thats was short<%d>\n\r", btn->secondClick - btn->firstClick);
 8000750:	4b16      	ldr	r3, [pc, #88]	; (80007ac <handleClicks+0x10c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	68da      	ldr	r2, [r3, #12]
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <handleClicks+0x10c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	689b      	ldr	r3, [r3, #8]
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	4619      	mov	r1, r3
 8000760:	4813      	ldr	r0, [pc, #76]	; (80007b0 <handleClicks+0x110>)
 8000762:	f004 fe61 	bl	8005428 <iprintf>
			break;
 8000766:	e01c      	b.n	80007a2 <handleClicks+0x102>
					printf("Thats was long<%d>\n\r", btn->secondClick - btn->firstClick);
 8000768:	4b10      	ldr	r3, [pc, #64]	; (80007ac <handleClicks+0x10c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	68da      	ldr	r2, [r3, #12]
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <handleClicks+0x10c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	4619      	mov	r1, r3
 8000778:	480e      	ldr	r0, [pc, #56]	; (80007b4 <handleClicks+0x114>)
 800077a:	f004 fe55 	bl	8005428 <iprintf>
			break;
 800077e:	e010      	b.n	80007a2 <handleClicks+0x102>
			if(btn->status == WAITING_FOR_LONG_PRESS)
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <handleClicks+0x10c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	799b      	ldrb	r3, [r3, #6]
 8000786:	2b03      	cmp	r3, #3
 8000788:	d10d      	bne.n	80007a6 <handleClicks+0x106>
				if(btn->counter > 1000)
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <handleClicks+0x10c>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	695b      	ldr	r3, [r3, #20]
 8000790:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000794:	dd07      	ble.n	80007a6 <handleClicks+0x106>
					printf("long\n\r");
 8000796:	4808      	ldr	r0, [pc, #32]	; (80007b8 <handleClicks+0x118>)
 8000798:	f004 fe46 	bl	8005428 <iprintf>
			break;
 800079c:	e003      	b.n	80007a6 <handleClicks+0x106>
			break;
 800079e:	bf00      	nop
 80007a0:	e002      	b.n	80007a8 <handleClicks+0x108>
			break;
 80007a2:	bf00      	nop
 80007a4:	e000      	b.n	80007a8 <handleClicks+0x108>
			break;
 80007a6:	bf00      	nop
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000214 	.word	0x20000214
 80007b0:	08006744 	.word	0x08006744
 80007b4:	0800675c 	.word	0x0800675c
 80007b8:	08006774 	.word	0x08006774

080007bc <changeFreq>:
							{Sol, 5000}};

static int index = 0;

void changeFreq (TIM_HandleTypeDef * htim3, TIM_HandleTypeDef * htim6)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]

	index = (index+1) % MUSIC_SIZE;
 80007c6:	4b23      	ldr	r3, [pc, #140]	; (8000854 <changeFreq+0x98>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	1c59      	adds	r1, r3, #1
 80007cc:	4b22      	ldr	r3, [pc, #136]	; (8000858 <changeFreq+0x9c>)
 80007ce:	fb83 2301 	smull	r2, r3, r3, r1
 80007d2:	111a      	asrs	r2, r3, #4
 80007d4:	17cb      	asrs	r3, r1, #31
 80007d6:	1ad2      	subs	r2, r2, r3
 80007d8:	4613      	mov	r3, r2
 80007da:	00db      	lsls	r3, r3, #3
 80007dc:	1a9b      	subs	r3, r3, r2
 80007de:	00da      	lsls	r2, r3, #3
 80007e0:	1ad2      	subs	r2, r2, r3
 80007e2:	1a8a      	subs	r2, r1, r2
 80007e4:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <changeFreq+0x98>)
 80007e6:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(htim3, 0);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2200      	movs	r2, #0
 80007ee:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(htim3, music[index].note);
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <changeFreq+0x98>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a19      	ldr	r2, [pc, #100]	; (800085c <changeFreq+0xa0>)
 80007f6:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <changeFreq+0x98>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a15      	ldr	r2, [pc, #84]	; (800085c <changeFreq+0xa0>)
 8000806:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800080a:	461a      	mov	r2, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_1, (music[index].note)/2 );
 8000810:	4b10      	ldr	r3, [pc, #64]	; (8000854 <changeFreq+0x98>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a11      	ldr	r2, [pc, #68]	; (800085c <changeFreq+0xa0>)
 8000816:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800081a:	085b      	lsrs	r3, r3, #1
 800081c:	b29a      	uxth	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_AUTORELOAD(htim6, music[index].period);
 8000824:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <changeFreq+0x98>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a0c      	ldr	r2, [pc, #48]	; (800085c <changeFreq+0xa0>)
 800082a:	00db      	lsls	r3, r3, #3
 800082c:	4413      	add	r3, r2
 800082e:	685a      	ldr	r2, [r3, #4]
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	62da      	str	r2, [r3, #44]	; 0x2c
 8000836:	4b07      	ldr	r3, [pc, #28]	; (8000854 <changeFreq+0x98>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a08      	ldr	r2, [pc, #32]	; (800085c <changeFreq+0xa0>)
 800083c:	00db      	lsls	r3, r3, #3
 800083e:	4413      	add	r3, r2
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	461a      	mov	r2, r3
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	60da      	str	r2, [r3, #12]

}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	2000021c 	.word	0x2000021c
 8000858:	5397829d 	.word	0x5397829d
 800085c:	20000000 	.word	0x20000000

08000860 <onOffMusic>:

void onOffMusic(TIM_HandleTypeDef * htim3)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	if(!press)
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <onOffMusic+0x50>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d10a      	bne.n	8000886 <onOffMusic+0x26>
		{
			HAL_TIM_Base_Start(htim3);
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f002 fdfb 	bl	800346c <HAL_TIM_Base_Start>
			HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_1);
 8000876:	2100      	movs	r1, #0
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f002 ff4f 	bl	800371c <HAL_TIM_PWM_Start>
			HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800087e:	201d      	movs	r0, #29
 8000880:	f001 f855 	bl	800192e <HAL_NVIC_EnableIRQ>
 8000884:	e006      	b.n	8000894 <onOffMusic+0x34>
		}
		else
		{
			HAL_TIM_Base_Stop(htim3);
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f002 fe58 	bl	800353c <HAL_TIM_Base_Stop>
			HAL_TIM_PWM_Stop(htim3, TIM_CHANNEL_1);
 800088c:	2100      	movs	r1, #0
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f003 f84a 	bl	8003928 <HAL_TIM_PWM_Stop>
		}
	press = (press+1)%2;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <onOffMusic+0x50>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	3301      	adds	r3, #1
 800089a:	2b00      	cmp	r3, #0
 800089c:	f003 0301 	and.w	r3, r3, #1
 80008a0:	bfb8      	it	lt
 80008a2:	425b      	neglt	r3, r3
 80008a4:	4a02      	ldr	r2, [pc, #8]	; (80008b0 <onOffMusic+0x50>)
 80008a6:	6013      	str	r3, [r2, #0]

}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000218 	.word	0x20000218

080008b4 <clockInit>:
 */

#include <Clock.h>

void clockInit (CLOCK* clock)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	clock->ms = 0;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
	clock->sec = 0;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2200      	movs	r2, #0
 80008c6:	711a      	strb	r2, [r3, #4]
	clock->min = 0;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2200      	movs	r2, #0
 80008cc:	715a      	strb	r2, [r3, #5]
	clock->hour = 0;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2200      	movs	r2, #0
 80008d2:	719a      	strb	r2, [r3, #6]
}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <increaseQlock>:

void increaseQlock(CLOCK* clock)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	if(clock->ms >= MSECS_TO_SEC)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008f0:	db08      	blt.n	8000904 <increaseQlock+0x24>
	{
		clock->ms = 0;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
		clock->sec++;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	791b      	ldrb	r3, [r3, #4]
 80008fc:	3301      	adds	r3, #1
 80008fe:	b2da      	uxtb	r2, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	711a      	strb	r2, [r3, #4]
	}
	if(clock->sec >= SECS_IN_MIN)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	791b      	ldrb	r3, [r3, #4]
 8000908:	2b3b      	cmp	r3, #59	; 0x3b
 800090a:	d908      	bls.n	800091e <increaseQlock+0x3e>
	{
		clock->sec = 0;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2200      	movs	r2, #0
 8000910:	711a      	strb	r2, [r3, #4]
		clock->min++;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	795b      	ldrb	r3, [r3, #5]
 8000916:	3301      	adds	r3, #1
 8000918:	b2da      	uxtb	r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	715a      	strb	r2, [r3, #5]
	}
	if(clock->min >= MINS_IN_HOUR)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	795b      	ldrb	r3, [r3, #5]
 8000922:	2b3b      	cmp	r3, #59	; 0x3b
 8000924:	d908      	bls.n	8000938 <increaseQlock+0x58>
	{
		clock->min = 0;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2200      	movs	r2, #0
 800092a:	715a      	strb	r2, [r3, #5]
		clock->hour++;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	799b      	ldrb	r3, [r3, #6]
 8000930:	3301      	adds	r3, #1
 8000932:	b2da      	uxtb	r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	719a      	strb	r2, [r3, #6]
	}

}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <clockOnInterrupt>:

void clockOnInterrupt(CLOCK* clock)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	clock->ms++;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	1c5a      	adds	r2, r3, #1
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	601a      	str	r2, [r3, #0]
	increaseQlock(clock);
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f7ff ffc2 	bl	80008e0 <increaseQlock>

}
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <printTime>:

void printTime(CLOCK* clock)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	printf("%d:%d:%d\n\r",clock->hour,clock->min, clock->sec);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	799b      	ldrb	r3, [r3, #6]
 8000970:	4619      	mov	r1, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	795b      	ldrb	r3, [r3, #5]
 8000976:	461a      	mov	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	791b      	ldrb	r3, [r3, #4]
 800097c:	4803      	ldr	r0, [pc, #12]	; (800098c <printTime+0x28>)
 800097e:	f004 fd53 	bl	8005428 <iprintf>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	0800677c 	.word	0x0800677c

08000990 <ledInit>:
uint8_t ch;
uint8_t cmdbuffer[MAX_BUFFER_LENGTH];
int cmdcount = 0;

void ledInit(LED* led, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	4613      	mov	r3, r2
 800099c:	80fb      	strh	r3, [r7, #6]
	led->state = STATE_OFF;
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	2200      	movs	r2, #0
 80009a2:	701a      	strb	r2, [r3, #0]
	led->GPIOx = GPIOx;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	605a      	str	r2, [r3, #4]
	led->GPIO_Pin = GPIO_Pin;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	88fa      	ldrh	r2, [r7, #6]
 80009ae:	811a      	strh	r2, [r3, #8]
	led->counter = 0;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
	led->period = START_PERIOD;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	220a      	movs	r2, #10
 80009ba:	611a      	str	r2, [r3, #16]
	if(led->GPIO_Pin == RedLed_Pin)
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	891b      	ldrh	r3, [r3, #8]
 80009c0:	2b40      	cmp	r3, #64	; 0x40
 80009c2:	d103      	bne.n	80009cc <ledInit+0x3c>
	{
		ledRed = led;
 80009c4:	4a06      	ldr	r2, [pc, #24]	; (80009e0 <ledInit+0x50>)
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	6013      	str	r3, [r2, #0]
	}
	else
	{
		ledBlue = led;
	}
}
 80009ca:	e002      	b.n	80009d2 <ledInit+0x42>
		ledBlue = led;
 80009cc:	4a05      	ldr	r2, [pc, #20]	; (80009e4 <ledInit+0x54>)
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	6013      	str	r3, [r2, #0]
}
 80009d2:	bf00      	nop
 80009d4:	3714      	adds	r7, #20
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	20000220 	.word	0x20000220
 80009e4:	20000224 	.word	0x20000224

080009e8 <ledOn>:


void ledOn(LED* led)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	led->state = STATE_ON;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2201      	movs	r2, #1
 80009f4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, 1);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6858      	ldr	r0, [r3, #4]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	891b      	ldrh	r3, [r3, #8]
 80009fe:	2201      	movs	r2, #1
 8000a00:	4619      	mov	r1, r3
 8000a02:	f001 f971 	bl	8001ce8 <HAL_GPIO_WritePin>
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <ledOff>:

void ledOff(LED* led)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b082      	sub	sp, #8
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
	led->state = STATE_OFF;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, 0);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6858      	ldr	r0, [r3, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	891b      	ldrh	r3, [r3, #8]
 8000a24:	2200      	movs	r2, #0
 8000a26:	4619      	mov	r1, r3
 8000a28:	f001 f95e 	bl	8001ce8 <HAL_GPIO_WritePin>
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <ledBlink>:

void ledBlink(LED* led, int period)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
	led->state = STATE_BLINKING;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2203      	movs	r2, #3
 8000a42:	701a      	strb	r2, [r3, #0]
	led->period = period;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	683a      	ldr	r2, [r7, #0]
 8000a48:	611a      	str	r2, [r3, #16]
	led->counter = 0;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	60da      	str	r2, [r3, #12]
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <ledOnTimerInterrupt>:

void ledOnTimerInterrupt(LED* led)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	if(led->state == STATE_BLINKING && led->counter == led->period)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b03      	cmp	r3, #3
 8000a6a:	d111      	bne.n	8000a90 <ledOnTimerInterrupt+0x34>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	68da      	ldr	r2, [r3, #12]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	691b      	ldr	r3, [r3, #16]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d10b      	bne.n	8000a90 <ledOnTimerInterrupt+0x34>
	{
		HAL_GPIO_TogglePin(led->GPIOx, led->GPIO_Pin);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	685a      	ldr	r2, [r3, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	891b      	ldrh	r3, [r3, #8]
 8000a80:	4619      	mov	r1, r3
 8000a82:	4610      	mov	r0, r2
 8000a84:	f001 f948 	bl	8001d18 <HAL_GPIO_TogglePin>
		led->counter = 0;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	e005      	b.n	8000a9c <ledOnTimerInterrupt+0x40>
	}
	else
	{
		led ->counter++;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	1c5a      	adds	r2, r3, #1
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	60da      	str	r2, [r3, #12]
	}

}
 8000a9a:	bf00      	nop
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <commTask>:
{

}

int commTask(UART_HandleTypeDef* huart2)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef Status = HAL_UART_Receive(huart2, &ch, 1, 0);
 8000aac:	2300      	movs	r3, #0
 8000aae:	2201      	movs	r2, #1
 8000ab0:	491f      	ldr	r1, [pc, #124]	; (8000b30 <commTask+0x8c>)
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f003 ff48 	bl	8004948 <HAL_UART_Receive>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	73fb      	strb	r3, [r7, #15]
	if (Status != HAL_OK) {
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <commTask+0x22>
		return 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	e030      	b.n	8000b28 <commTask+0x84>
	}
	if (ch != '\r' && ch != '\n')
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <commTask+0x8c>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b0d      	cmp	r3, #13
 8000acc:	d01c      	beq.n	8000b08 <commTask+0x64>
 8000ace:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <commTask+0x8c>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b0a      	cmp	r3, #10
 8000ad4:	d018      	beq.n	8000b08 <commTask+0x64>
	{
		HAL_UART_Transmit(huart2, &ch, 1, 0xFFFF);
 8000ad6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ada:	2201      	movs	r2, #1
 8000adc:	4914      	ldr	r1, [pc, #80]	; (8000b30 <commTask+0x8c>)
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f003 fe9e 	bl	8004820 <HAL_UART_Transmit>

		if (cmdcount >= MAX_BUFFER_LENGTH)
 8000ae4:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <commTask+0x90>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b63      	cmp	r3, #99	; 0x63
 8000aea:	dd02      	ble.n	8000af2 <commTask+0x4e>
		{
			cmdcount = 0;
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <commTask+0x90>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <commTask+0x90>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	1c5a      	adds	r2, r3, #1
 8000af8:	490e      	ldr	r1, [pc, #56]	; (8000b34 <commTask+0x90>)
 8000afa:	600a      	str	r2, [r1, #0]
 8000afc:	4a0c      	ldr	r2, [pc, #48]	; (8000b30 <commTask+0x8c>)
 8000afe:	7811      	ldrb	r1, [r2, #0]
 8000b00:	4a0d      	ldr	r2, [pc, #52]	; (8000b38 <commTask+0x94>)
 8000b02:	54d1      	strb	r1, [r2, r3]
		return 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	e00f      	b.n	8000b28 <commTask+0x84>
	}
	HAL_UART_Transmit(huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 8000b08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b0c:	2202      	movs	r2, #2
 8000b0e:	490b      	ldr	r1, [pc, #44]	; (8000b3c <commTask+0x98>)
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f003 fe85 	bl	8004820 <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 8000b16:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <commTask+0x90>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <commTask+0x94>)
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <commTask+0x90>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
	return 1;
 8000b26:	2301      	movs	r3, #1
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000228 	.word	0x20000228
 8000b34:	20000290 	.word	0x20000290
 8000b38:	2000022c 	.word	0x2000022c
 8000b3c:	08006788 	.word	0x08006788

08000b40 <handleCommand>:

void handleCommand()
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af00      	add	r7, sp, #0
	char cmd[20];
	//sscanf((const char*)cmdbuffer, "%s", cmd);
	char* tokens;
	tokens = strtok(cmdbuffer,"  \r");
 8000b46:	493f      	ldr	r1, [pc, #252]	; (8000c44 <handleCommand+0x104>)
 8000b48:	483f      	ldr	r0, [pc, #252]	; (8000c48 <handleCommand+0x108>)
 8000b4a:	f004 fd03 	bl	8005554 <strtok>
 8000b4e:	61f8      	str	r0, [r7, #28]
	strcpy(cmd,tokens);
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	69f9      	ldr	r1, [r7, #28]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f004 fcf5 	bl	8005544 <strcpy>

	if (strcmp(cmd, "full") == 0)
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	493b      	ldr	r1, [pc, #236]	; (8000c4c <handleCommand+0x10c>)
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fb36 	bl	80001d0 <strcmp>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d10a      	bne.n	8000b80 <handleCommand+0x40>
	{
		ledOn(ledRed);
 8000b6a:	4b39      	ldr	r3, [pc, #228]	; (8000c50 <handleCommand+0x110>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff ff3a 	bl	80009e8 <ledOn>
		ledOn(ledBlue);
 8000b74:	4b37      	ldr	r3, [pc, #220]	; (8000c54 <handleCommand+0x114>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff ff35 	bl	80009e8 <ledOn>
	}
	else
	{
		printf("Invalid command\r\n");
	}
}
 8000b7e:	e05d      	b.n	8000c3c <handleCommand+0xfc>
	else if (strcmp(cmd, "half") == 0)
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	4935      	ldr	r1, [pc, #212]	; (8000c58 <handleCommand+0x118>)
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fb23 	bl	80001d0 <strcmp>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d055      	beq.n	8000c3c <handleCommand+0xfc>
	else if (strcmp(cmd, "blink") == 0)
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	4932      	ldr	r1, [pc, #200]	; (8000c5c <handleCommand+0x11c>)
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fb1b 	bl	80001d0 <strcmp>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d10e      	bne.n	8000bbe <handleCommand+0x7e>
		ledBlink(ledRed, 700);
 8000ba0:	4b2b      	ldr	r3, [pc, #172]	; (8000c50 <handleCommand+0x110>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ff43 	bl	8000a34 <ledBlink>
		ledBlink(ledBlue, 300);
 8000bae:	4b29      	ldr	r3, [pc, #164]	; (8000c54 <handleCommand+0x114>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff ff3c 	bl	8000a34 <ledBlink>
}
 8000bbc:	e03e      	b.n	8000c3c <handleCommand+0xfc>
	else if(strcmp(cmd, "off") == 0)
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	4927      	ldr	r1, [pc, #156]	; (8000c60 <handleCommand+0x120>)
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fb04 	bl	80001d0 <strcmp>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d10a      	bne.n	8000be4 <handleCommand+0xa4>
		ledOff(ledRed);
 8000bce:	4b20      	ldr	r3, [pc, #128]	; (8000c50 <handleCommand+0x110>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff ff1b 	bl	8000a0e <ledOff>
		ledOff(ledBlue);
 8000bd8:	4b1e      	ldr	r3, [pc, #120]	; (8000c54 <handleCommand+0x114>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff16 	bl	8000a0e <ledOff>
}
 8000be2:	e02b      	b.n	8000c3c <handleCommand+0xfc>
	else if(strcmp(cmd, "set") == 0)
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	491f      	ldr	r1, [pc, #124]	; (8000c64 <handleCommand+0x124>)
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff faf1 	bl	80001d0 <strcmp>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d120      	bne.n	8000c36 <handleCommand+0xf6>
		tokens = strtok(NULL, "  \r");
 8000bf4:	4913      	ldr	r1, [pc, #76]	; (8000c44 <handleCommand+0x104>)
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f004 fcac 	bl	8005554 <strtok>
 8000bfc:	61f8      	str	r0, [r7, #28]
	    strcpy(cmd,tokens);
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	69f9      	ldr	r1, [r7, #28]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f004 fc9e 	bl	8005544 <strcpy>
		strcpy(cmd,tokens);
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	69f9      	ldr	r1, [r7, #28]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f004 fc99 	bl	8005544 <strcpy>
		value = atoi((const)cmd);
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	4618      	mov	r0, r3
 8000c16:	f004 fbd0 	bl	80053ba <atoi>
 8000c1a:	61b8      	str	r0, [r7, #24]
		ledBlink(ledBlue, value);
 8000c1c:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <handleCommand+0x114>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	69b9      	ldr	r1, [r7, #24]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff ff06 	bl	8000a34 <ledBlink>
		ledBlink(ledRed, value);
 8000c28:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <handleCommand+0x110>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	69b9      	ldr	r1, [r7, #24]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff ff00 	bl	8000a34 <ledBlink>
}
 8000c34:	e002      	b.n	8000c3c <handleCommand+0xfc>
		printf("Invalid command\r\n");
 8000c36:	480c      	ldr	r0, [pc, #48]	; (8000c68 <handleCommand+0x128>)
 8000c38:	f004 fc7c 	bl	8005534 <puts>
}
 8000c3c:	bf00      	nop
 8000c3e:	3720      	adds	r7, #32
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	0800678c 	.word	0x0800678c
 8000c48:	2000022c 	.word	0x2000022c
 8000c4c:	08006790 	.word	0x08006790
 8000c50:	20000220 	.word	0x20000220
 8000c54:	20000224 	.word	0x20000224
 8000c58:	08006798 	.word	0x08006798
 8000c5c:	080067a0 	.word	0x080067a0
 8000c60:	080067a8 	.word	0x080067a8
 8000c64:	080067ac 	.word	0x080067ac
 8000c68:	080067b0 	.word	0x080067b0

08000c6c <myMain>:
void myMain(UART_HandleTypeDef* huart2)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	if (commTask(huart2))
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ff15 	bl	8000aa4 <commTask>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <myMain+0x18>
	{
		handleCommand();
 8000c80:	f7ff ff5e 	bl	8000b40 <handleCommand>
	}
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int fd, char* ptr, int len) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	b29a      	uxth	r2, r3
 8000c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca0:	68b9      	ldr	r1, [r7, #8]
 8000ca2:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <_write+0x28>)
 8000ca4:	f003 fdbc 	bl	8004820 <HAL_UART_Transmit>
    return len;
 8000ca8:	687b      	ldr	r3, [r7, #4]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000378 	.word	0x20000378

08000cb8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	if(htim == &htim6)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a0d      	ldr	r2, [pc, #52]	; (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d104      	bne.n	8000cd2 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		changeFreq(&htim3, &htim6);// for the buzzer
 8000cc8:	490b      	ldr	r1, [pc, #44]	; (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000cca:	480c      	ldr	r0, [pc, #48]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000ccc:	f7ff fd76 	bl	80007bc <changeFreq>
		handleClicks();
		clockOnInterrupt(&myQlock);
		ledOnTimerInterrupt(&ledR);
		ledOnTimerInterrupt(&ledB);
	}
}
 8000cd0:	e00e      	b.n	8000cf0 <HAL_TIM_PeriodElapsedCallback+0x38>
	else if (htim == &htim7)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d10a      	bne.n	8000cf0 <HAL_TIM_PeriodElapsedCallback+0x38>
		handleClicks();
 8000cda:	f7ff fce1 	bl	80006a0 <handleClicks>
		clockOnInterrupt(&myQlock);
 8000cde:	4809      	ldr	r0, [pc, #36]	; (8000d04 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000ce0:	f7ff fe30 	bl	8000944 <clockOnInterrupt>
		ledOnTimerInterrupt(&ledR);
 8000ce4:	4808      	ldr	r0, [pc, #32]	; (8000d08 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000ce6:	f7ff feb9 	bl	8000a5c <ledOnTimerInterrupt>
		ledOnTimerInterrupt(&ledB);
 8000cea:	4808      	ldr	r0, [pc, #32]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000cec:	f7ff feb6 	bl	8000a5c <ledOnTimerInterrupt>
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	200002e0 	.word	0x200002e0
 8000cfc:	20000294 	.word	0x20000294
 8000d00:	2000032c 	.word	0x2000032c
 8000d04:	20000424 	.word	0x20000424
 8000d08:	200003fc 	.word	0x200003fc
 8000d0c:	20000410 	.word	0x20000410

08000d10 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == rightBtn_Pin)
 8000d1a:	88fb      	ldrh	r3, [r7, #6]
 8000d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d20:	d105      	bne.n	8000d2e <HAL_GPIO_EXTI_Callback+0x1e>
	{
		onOffMusic (&htim3);//turn on/off the music
 8000d22:	4808      	ldr	r0, [pc, #32]	; (8000d44 <HAL_GPIO_EXTI_Callback+0x34>)
 8000d24:	f7ff fd9c 	bl	8000860 <onOffMusic>
		printTime(&myQlock);// print time of running
 8000d28:	4807      	ldr	r0, [pc, #28]	; (8000d48 <HAL_GPIO_EXTI_Callback+0x38>)
 8000d2a:	f7ff fe1b 	bl	8000964 <printTime>
	}

	if(GPIO_Pin == leftBtn_Pin)
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	2b08      	cmp	r3, #8
 8000d32:	d102      	bne.n	8000d3a <HAL_GPIO_EXTI_Callback+0x2a>
	{
		//HAL_GPIO_TogglePin(GPIOA, BlueLed_Pin);
		//onClickInterrupt(GPIO_Pin);//print short click/long click
		btnClick.noiseWait = ON;
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <HAL_GPIO_EXTI_Callback+0x3c>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	71da      	strb	r2, [r3, #7]

	}

}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000294 	.word	0x20000294
 8000d48:	20000424 	.word	0x20000424
 8000d4c:	2000042c 	.word	0x2000042c

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d54:	f000 fc78 	bl	8001648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d58:	f000 f83e 	bl	8000dd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5c:	f000 f988 	bl	8001070 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d60:	f000 f956 	bl	8001010 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000d64:	f000 f88a 	bl	8000e7c <MX_TIM3_Init>
  MX_TIM6_Init();
 8000d68:	f000 f8e4 	bl	8000f34 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000d6c:	f000 f91a 	bl	8000fa4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8000d70:	4811      	ldr	r0, [pc, #68]	; (8000db8 <main+0x68>)
 8000d72:	f002 fc0b 	bl	800358c <HAL_TIM_Base_Start_IT>
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000d76:	2036      	movs	r0, #54	; 0x36
 8000d78:	f000 fdd9 	bl	800192e <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT(&htim7);
 8000d7c:	480f      	ldr	r0, [pc, #60]	; (8000dbc <main+0x6c>)
 8000d7e:	f002 fc05 	bl	800358c <HAL_TIM_Base_Start_IT>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000d82:	2037      	movs	r0, #55	; 0x37
 8000d84:	f000 fdd3 	bl	800192e <HAL_NVIC_EnableIRQ>
  ledInit(&ledR, GPIOA, RedLed_Pin);
 8000d88:	2240      	movs	r2, #64	; 0x40
 8000d8a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000d8e:	480c      	ldr	r0, [pc, #48]	; (8000dc0 <main+0x70>)
 8000d90:	f7ff fdfe 	bl	8000990 <ledInit>
  ledInit(&ledB, GPIOA, BlueLed_Pin);
 8000d94:	2220      	movs	r2, #32
 8000d96:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000d9a:	480a      	ldr	r0, [pc, #40]	; (8000dc4 <main+0x74>)
 8000d9c:	f7ff fdf8 	bl	8000990 <ledInit>
//  installLed(&ledR,&ledB);
  initBtnClicks(&btnClick,leftBtn_GPIO_Port,leftBtn_Pin);
 8000da0:	2208      	movs	r2, #8
 8000da2:	4909      	ldr	r1, [pc, #36]	; (8000dc8 <main+0x78>)
 8000da4:	4809      	ldr	r0, [pc, #36]	; (8000dcc <main+0x7c>)
 8000da6:	f7ff fbf5 	bl	8000594 <initBtnClicks>
  clockInit(&myQlock);
 8000daa:	4809      	ldr	r0, [pc, #36]	; (8000dd0 <main+0x80>)
 8000dac:	f7ff fd82 	bl	80008b4 <clockInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  myMain(&huart2);
 8000db0:	4808      	ldr	r0, [pc, #32]	; (8000dd4 <main+0x84>)
 8000db2:	f7ff ff5b 	bl	8000c6c <myMain>
 8000db6:	e7fb      	b.n	8000db0 <main+0x60>
 8000db8:	200002e0 	.word	0x200002e0
 8000dbc:	2000032c 	.word	0x2000032c
 8000dc0:	200003fc 	.word	0x200003fc
 8000dc4:	20000410 	.word	0x20000410
 8000dc8:	48000400 	.word	0x48000400
 8000dcc:	2000042c 	.word	0x2000042c
 8000dd0:	20000424 	.word	0x20000424
 8000dd4:	20000378 	.word	0x20000378

08000dd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b096      	sub	sp, #88	; 0x58
 8000ddc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	2244      	movs	r2, #68	; 0x44
 8000de4:	2100      	movs	r1, #0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f004 fb16 	bl	8005418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dec:	463b      	mov	r3, r7
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
 8000df8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000dfa:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000dfe:	f000 ffcb 	bl	8001d98 <HAL_PWREx_ControlVoltageScaling>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e08:	f000 f9c6 	bl	8001198 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e14:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e16:	2310      	movs	r3, #16
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e22:	2301      	movs	r3, #1
 8000e24:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000e26:	230a      	movs	r3, #10
 8000e28:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e2a:	2307      	movs	r3, #7
 8000e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e32:	2302      	movs	r3, #2
 8000e34:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f001 f802 	bl	8001e44 <HAL_RCC_OscConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000e46:	f000 f9a7 	bl	8001198 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e4a:	230f      	movs	r3, #15
 8000e4c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e5e:	463b      	mov	r3, r7
 8000e60:	2104      	movs	r1, #4
 8000e62:	4618      	mov	r0, r3
 8000e64:	f001 fbca 	bl	80025fc <HAL_RCC_ClockConfig>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e6e:	f000 f993 	bl	8001198 <Error_Handler>
  }
}
 8000e72:	bf00      	nop
 8000e74:	3758      	adds	r7, #88	; 0x58
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	; 0x28
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e8e:	463b      	mov	r3, r7
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
 8000e9c:	615a      	str	r2, [r3, #20]
 8000e9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ea0:	4b22      	ldr	r3, [pc, #136]	; (8000f2c <MX_TIM3_Init+0xb0>)
 8000ea2:	4a23      	ldr	r2, [pc, #140]	; (8000f30 <MX_TIM3_Init+0xb4>)
 8000ea4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 8000ea6:	4b21      	ldr	r3, [pc, #132]	; (8000f2c <MX_TIM3_Init+0xb0>)
 8000ea8:	f240 321f 	movw	r2, #799	; 0x31f
 8000eac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eae:	4b1f      	ldr	r3, [pc, #124]	; (8000f2c <MX_TIM3_Init+0xb0>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 381;
 8000eb4:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <MX_TIM3_Init+0xb0>)
 8000eb6:	f240 127d 	movw	r2, #381	; 0x17d
 8000eba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <MX_TIM3_Init+0xb0>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <MX_TIM3_Init+0xb0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ec8:	4818      	ldr	r0, [pc, #96]	; (8000f2c <MX_TIM3_Init+0xb0>)
 8000eca:	f002 fbcf 	bl	800366c <HAL_TIM_PWM_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8000ed4:	f000 f960 	bl	8001198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ee0:	f107 031c 	add.w	r3, r7, #28
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4811      	ldr	r0, [pc, #68]	; (8000f2c <MX_TIM3_Init+0xb0>)
 8000ee8:	f003 fba6 	bl	8004638 <HAL_TIMEx_MasterConfigSynchronization>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000ef2:	f000 f951 	bl	8001198 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ef6:	2360      	movs	r3, #96	; 0x60
 8000ef8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f06:	463b      	mov	r3, r7
 8000f08:	2200      	movs	r2, #0
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4807      	ldr	r0, [pc, #28]	; (8000f2c <MX_TIM3_Init+0xb0>)
 8000f0e:	f002 fec1 	bl	8003c94 <HAL_TIM_PWM_ConfigChannel>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000f18:	f000 f93e 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f1c:	4803      	ldr	r0, [pc, #12]	; (8000f2c <MX_TIM3_Init+0xb0>)
 8000f1e:	f000 f9c7 	bl	80012b0 <HAL_TIM_MspPostInit>

}
 8000f22:	bf00      	nop
 8000f24:	3728      	adds	r7, #40	; 0x28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000294 	.word	0x20000294
 8000f30:	40000400 	.word	0x40000400

08000f34 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f44:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <MX_TIM6_Init+0x68>)
 8000f46:	4a16      	ldr	r2, [pc, #88]	; (8000fa0 <MX_TIM6_Init+0x6c>)
 8000f48:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8000f4a:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <MX_TIM6_Init+0x68>)
 8000f4c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f50:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f52:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <MX_TIM6_Init+0x68>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1999;
 8000f58:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <MX_TIM6_Init+0x68>)
 8000f5a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000f5e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f60:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <MX_TIM6_Init+0x68>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f66:	480d      	ldr	r0, [pc, #52]	; (8000f9c <MX_TIM6_Init+0x68>)
 8000f68:	f002 fa28 	bl	80033bc <HAL_TIM_Base_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000f72:	f000 f911 	bl	8001198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f76:	2300      	movs	r3, #0
 8000f78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	4619      	mov	r1, r3
 8000f82:	4806      	ldr	r0, [pc, #24]	; (8000f9c <MX_TIM6_Init+0x68>)
 8000f84:	f003 fb58 	bl	8004638 <HAL_TIMEx_MasterConfigSynchronization>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000f8e:	f000 f903 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200002e0 	.word	0x200002e0
 8000fa0:	40001000 	.word	0x40001000

08000fa4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000fb4:	4b14      	ldr	r3, [pc, #80]	; (8001008 <MX_TIM7_Init+0x64>)
 8000fb6:	4a15      	ldr	r2, [pc, #84]	; (800100c <MX_TIM7_Init+0x68>)
 8000fb8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <MX_TIM7_Init+0x64>)
 8000fbc:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000fc0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc2:	4b11      	ldr	r3, [pc, #68]	; (8001008 <MX_TIM7_Init+0x64>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <MX_TIM7_Init+0x64>)
 8000fca:	2209      	movs	r2, #9
 8000fcc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <MX_TIM7_Init+0x64>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000fd4:	480c      	ldr	r0, [pc, #48]	; (8001008 <MX_TIM7_Init+0x64>)
 8000fd6:	f002 f9f1 	bl	80033bc <HAL_TIM_Base_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000fe0:	f000 f8da 	bl	8001198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_TIM7_Init+0x64>)
 8000ff2:	f003 fb21 	bl	8004638 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000ffc:	f000 f8cc 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000032c 	.word	0x2000032c
 800100c:	40001400 	.word	0x40001400

08001010 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001014:	4b14      	ldr	r3, [pc, #80]	; (8001068 <MX_USART2_UART_Init+0x58>)
 8001016:	4a15      	ldr	r2, [pc, #84]	; (800106c <MX_USART2_UART_Init+0x5c>)
 8001018:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800101a:	4b13      	ldr	r3, [pc, #76]	; (8001068 <MX_USART2_UART_Init+0x58>)
 800101c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001020:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <MX_USART2_UART_Init+0x58>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <MX_USART2_UART_Init+0x58>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <MX_USART2_UART_Init+0x58>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <MX_USART2_UART_Init+0x58>)
 8001036:	220c      	movs	r2, #12
 8001038:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103a:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <MX_USART2_UART_Init+0x58>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001040:	4b09      	ldr	r3, [pc, #36]	; (8001068 <MX_USART2_UART_Init+0x58>)
 8001042:	2200      	movs	r2, #0
 8001044:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <MX_USART2_UART_Init+0x58>)
 8001048:	2200      	movs	r2, #0
 800104a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <MX_USART2_UART_Init+0x58>)
 800104e:	2200      	movs	r2, #0
 8001050:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_USART2_UART_Init+0x58>)
 8001054:	f003 fb96 	bl	8004784 <HAL_UART_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800105e:	f000 f89b 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000378 	.word	0x20000378
 800106c:	40004400 	.word	0x40004400

08001070 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
 8001084:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001086:	4b41      	ldr	r3, [pc, #260]	; (800118c <MX_GPIO_Init+0x11c>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	4a40      	ldr	r2, [pc, #256]	; (800118c <MX_GPIO_Init+0x11c>)
 800108c:	f043 0304 	orr.w	r3, r3, #4
 8001090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001092:	4b3e      	ldr	r3, [pc, #248]	; (800118c <MX_GPIO_Init+0x11c>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	f003 0304 	and.w	r3, r3, #4
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800109e:	4b3b      	ldr	r3, [pc, #236]	; (800118c <MX_GPIO_Init+0x11c>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	4a3a      	ldr	r2, [pc, #232]	; (800118c <MX_GPIO_Init+0x11c>)
 80010a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010aa:	4b38      	ldr	r3, [pc, #224]	; (800118c <MX_GPIO_Init+0x11c>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	4b35      	ldr	r3, [pc, #212]	; (800118c <MX_GPIO_Init+0x11c>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	4a34      	ldr	r2, [pc, #208]	; (800118c <MX_GPIO_Init+0x11c>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c2:	4b32      	ldr	r3, [pc, #200]	; (800118c <MX_GPIO_Init+0x11c>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ce:	4b2f      	ldr	r3, [pc, #188]	; (800118c <MX_GPIO_Init+0x11c>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	4a2e      	ldr	r2, [pc, #184]	; (800118c <MX_GPIO_Init+0x11c>)
 80010d4:	f043 0302 	orr.w	r3, r3, #2
 80010d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010da:	4b2c      	ldr	r3, [pc, #176]	; (800118c <MX_GPIO_Init+0x11c>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BlueLed_Pin|RedLed_Pin, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2160      	movs	r1, #96	; 0x60
 80010ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ee:	f000 fdfb 	bl	8001ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010f8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	4821      	ldr	r0, [pc, #132]	; (8001190 <MX_GPIO_Init+0x120>)
 800110a:	f000 fc2b 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pins : BlueLed_Pin RedLed_Pin */
  GPIO_InitStruct.Pin = BlueLed_Pin|RedLed_Pin;
 800110e:	2360      	movs	r3, #96	; 0x60
 8001110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001112:	2301      	movs	r3, #1
 8001114:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001128:	f000 fc1c 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : rightBtn_Pin */
  GPIO_InitStruct.Pin = rightBtn_Pin;
 800112c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001132:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001136:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(rightBtn_GPIO_Port, &GPIO_InitStruct);
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	4619      	mov	r1, r3
 8001142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001146:	f000 fc0d 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : leftBtn_Pin */
  GPIO_InitStruct.Pin = leftBtn_Pin;
 800114a:	2308      	movs	r3, #8
 800114c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800114e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001152:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(leftBtn_GPIO_Port, &GPIO_InitStruct);
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	4619      	mov	r1, r3
 800115e:	480d      	ldr	r0, [pc, #52]	; (8001194 <MX_GPIO_Init+0x124>)
 8001160:	f000 fc00 	bl	8001964 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001164:	2200      	movs	r2, #0
 8001166:	2100      	movs	r1, #0
 8001168:	2009      	movs	r0, #9
 800116a:	f000 fbc4 	bl	80018f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800116e:	2009      	movs	r0, #9
 8001170:	f000 fbdd 	bl	800192e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001174:	2200      	movs	r2, #0
 8001176:	2100      	movs	r1, #0
 8001178:	2028      	movs	r0, #40	; 0x28
 800117a:	f000 fbbc 	bl	80018f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800117e:	2028      	movs	r0, #40	; 0x28
 8001180:	f000 fbd5 	bl	800192e <HAL_NVIC_EnableIRQ>

}
 8001184:	bf00      	nop
 8001186:	3728      	adds	r7, #40	; 0x28
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40021000 	.word	0x40021000
 8001190:	48000800 	.word	0x48000800
 8001194:	48000400 	.word	0x48000400

08001198 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800119c:	b672      	cpsid	i
}
 800119e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <Error_Handler+0x8>
	...

080011a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011aa:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <HAL_MspInit+0x44>)
 80011ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ae:	4a0e      	ldr	r2, [pc, #56]	; (80011e8 <HAL_MspInit+0x44>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6613      	str	r3, [r2, #96]	; 0x60
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <HAL_MspInit+0x44>)
 80011b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <HAL_MspInit+0x44>)
 80011c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c6:	4a08      	ldr	r2, [pc, #32]	; (80011e8 <HAL_MspInit+0x44>)
 80011c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011cc:	6593      	str	r3, [r2, #88]	; 0x58
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_MspInit+0x44>)
 80011d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40021000 	.word	0x40021000

080011ec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <HAL_TIM_PWM_MspInit+0x38>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d10b      	bne.n	8001216 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <HAL_TIM_PWM_MspInit+0x3c>)
 8001200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001202:	4a09      	ldr	r2, [pc, #36]	; (8001228 <HAL_TIM_PWM_MspInit+0x3c>)
 8001204:	f043 0302 	orr.w	r3, r3, #2
 8001208:	6593      	str	r3, [r2, #88]	; 0x58
 800120a:	4b07      	ldr	r3, [pc, #28]	; (8001228 <HAL_TIM_PWM_MspInit+0x3c>)
 800120c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001216:	bf00      	nop
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40000400 	.word	0x40000400
 8001228:	40021000 	.word	0x40021000

0800122c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a1a      	ldr	r2, [pc, #104]	; (80012a4 <HAL_TIM_Base_MspInit+0x78>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d114      	bne.n	8001268 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800123e:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <HAL_TIM_Base_MspInit+0x7c>)
 8001240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001242:	4a19      	ldr	r2, [pc, #100]	; (80012a8 <HAL_TIM_Base_MspInit+0x7c>)
 8001244:	f043 0310 	orr.w	r3, r3, #16
 8001248:	6593      	str	r3, [r2, #88]	; 0x58
 800124a:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <HAL_TIM_Base_MspInit+0x7c>)
 800124c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124e:	f003 0310 	and.w	r3, r3, #16
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001256:	2200      	movs	r2, #0
 8001258:	2100      	movs	r1, #0
 800125a:	2036      	movs	r0, #54	; 0x36
 800125c:	f000 fb4b 	bl	80018f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001260:	2036      	movs	r0, #54	; 0x36
 8001262:	f000 fb64 	bl	800192e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001266:	e018      	b.n	800129a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0f      	ldr	r2, [pc, #60]	; (80012ac <HAL_TIM_Base_MspInit+0x80>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d113      	bne.n	800129a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001272:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <HAL_TIM_Base_MspInit+0x7c>)
 8001274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001276:	4a0c      	ldr	r2, [pc, #48]	; (80012a8 <HAL_TIM_Base_MspInit+0x7c>)
 8001278:	f043 0320 	orr.w	r3, r3, #32
 800127c:	6593      	str	r3, [r2, #88]	; 0x58
 800127e:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <HAL_TIM_Base_MspInit+0x7c>)
 8001280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001282:	f003 0320 	and.w	r3, r3, #32
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	2037      	movs	r0, #55	; 0x37
 8001290:	f000 fb31 	bl	80018f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001294:	2037      	movs	r0, #55	; 0x37
 8001296:	f000 fb4a 	bl	800192e <HAL_NVIC_EnableIRQ>
}
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40001000 	.word	0x40001000
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40001400 	.word	0x40001400

080012b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 030c 	add.w	r3, r7, #12
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a11      	ldr	r2, [pc, #68]	; (8001314 <HAL_TIM_MspPostInit+0x64>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d11b      	bne.n	800130a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <HAL_TIM_MspPostInit+0x68>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	4a10      	ldr	r2, [pc, #64]	; (8001318 <HAL_TIM_MspPostInit+0x68>)
 80012d8:	f043 0302 	orr.w	r3, r3, #2
 80012dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <HAL_TIM_MspPostInit+0x68>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012ea:	2310      	movs	r3, #16
 80012ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012fa:	2302      	movs	r3, #2
 80012fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fe:	f107 030c 	add.w	r3, r7, #12
 8001302:	4619      	mov	r1, r3
 8001304:	4805      	ldr	r0, [pc, #20]	; (800131c <HAL_TIM_MspPostInit+0x6c>)
 8001306:	f000 fb2d 	bl	8001964 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800130a:	bf00      	nop
 800130c:	3720      	adds	r7, #32
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40000400 	.word	0x40000400
 8001318:	40021000 	.word	0x40021000
 800131c:	48000400 	.word	0x48000400

08001320 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b0ac      	sub	sp, #176	; 0xb0
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2288      	movs	r2, #136	; 0x88
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f004 f869 	bl	8005418 <memset>
  if(huart->Instance==USART2)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a21      	ldr	r2, [pc, #132]	; (80013d0 <HAL_UART_MspInit+0xb0>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d13b      	bne.n	80013c8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001350:	2302      	movs	r3, #2
 8001352:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001354:	2300      	movs	r3, #0
 8001356:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	4618      	mov	r0, r3
 800135e:	f001 fb71 	bl	8002a44 <HAL_RCCEx_PeriphCLKConfig>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001368:	f7ff ff16 	bl	8001198 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800136c:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <HAL_UART_MspInit+0xb4>)
 800136e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001370:	4a18      	ldr	r2, [pc, #96]	; (80013d4 <HAL_UART_MspInit+0xb4>)
 8001372:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001376:	6593      	str	r3, [r2, #88]	; 0x58
 8001378:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <HAL_UART_MspInit+0xb4>)
 800137a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001384:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <HAL_UART_MspInit+0xb4>)
 8001386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001388:	4a12      	ldr	r2, [pc, #72]	; (80013d4 <HAL_UART_MspInit+0xb4>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001390:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <HAL_UART_MspInit+0xb4>)
 8001392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800139c:	230c      	movs	r3, #12
 800139e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ae:	2303      	movs	r3, #3
 80013b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013b4:	2307      	movs	r3, #7
 80013b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013be:	4619      	mov	r1, r3
 80013c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c4:	f000 face 	bl	8001964 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013c8:	bf00      	nop
 80013ca:	37b0      	adds	r7, #176	; 0xb0
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40004400 	.word	0x40004400
 80013d4:	40021000 	.word	0x40021000

080013d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <NMI_Handler+0x4>

080013de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <HardFault_Handler+0x4>

080013e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <MemManage_Handler+0x4>

080013ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <BusFault_Handler+0x4>

080013f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <UsageFault_Handler+0x4>

080013f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001424:	f000 f96c 	bl	8001700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}

0800142c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(leftBtn_Pin);
 8001430:	2008      	movs	r0, #8
 8001432:	f000 fc8b 	bl	8001d4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}

0800143a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(rightBtn_Pin);
 800143e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001442:	f000 fc83 	bl	8001d4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001446:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800144a:	f000 fc7f 	bl	8001d4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001458:	4802      	ldr	r0, [pc, #8]	; (8001464 <TIM6_DAC_IRQHandler+0x10>)
 800145a:	f002 fafb 	bl	8003a54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200002e0 	.word	0x200002e0

08001468 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <TIM7_IRQHandler+0x10>)
 800146e:	f002 faf1 	bl	8003a54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	2000032c 	.word	0x2000032c

0800147c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
	return 1;
 8001480:	2301      	movs	r3, #1
}
 8001482:	4618      	mov	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <_kill>:

int _kill(int pid, int sig)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001496:	f003 ff95 	bl	80053c4 <__errno>
 800149a:	4603      	mov	r3, r0
 800149c:	2216      	movs	r2, #22
 800149e:	601a      	str	r2, [r3, #0]
	return -1;
 80014a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <_exit>:

void _exit (int status)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014b4:	f04f 31ff 	mov.w	r1, #4294967295
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff ffe7 	bl	800148c <_kill>
	while (1) {}		/* Make sure we hang here */
 80014be:	e7fe      	b.n	80014be <_exit+0x12>

080014c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	e00a      	b.n	80014e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014d2:	f3af 8000 	nop.w
 80014d6:	4601      	mov	r1, r0
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	1c5a      	adds	r2, r3, #1
 80014dc:	60ba      	str	r2, [r7, #8]
 80014de:	b2ca      	uxtb	r2, r1
 80014e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	3301      	adds	r3, #1
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	dbf0      	blt.n	80014d2 <_read+0x12>
	}

return len;
 80014f0:	687b      	ldr	r3, [r7, #4]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <_close>:
	}
	return len;
}

int _close(int file)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b083      	sub	sp, #12
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
	return -1;
 8001502:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001522:	605a      	str	r2, [r3, #4]
	return 0;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <_isatty>:

int _isatty(int file)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
	return 1;
 800153a:	2301      	movs	r3, #1
}
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
	return 0;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800156c:	4a14      	ldr	r2, [pc, #80]	; (80015c0 <_sbrk+0x5c>)
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <_sbrk+0x60>)
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001578:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <_sbrk+0x64>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d102      	bne.n	8001586 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <_sbrk+0x64>)
 8001582:	4a12      	ldr	r2, [pc, #72]	; (80015cc <_sbrk+0x68>)
 8001584:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <_sbrk+0x64>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	429a      	cmp	r2, r3
 8001592:	d207      	bcs.n	80015a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001594:	f003 ff16 	bl	80053c4 <__errno>
 8001598:	4603      	mov	r3, r0
 800159a:	220c      	movs	r2, #12
 800159c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800159e:	f04f 33ff 	mov.w	r3, #4294967295
 80015a2:	e009      	b.n	80015b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <_sbrk+0x64>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015aa:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <_sbrk+0x64>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	4a05      	ldr	r2, [pc, #20]	; (80015c8 <_sbrk+0x64>)
 80015b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015b6:	68fb      	ldr	r3, [r7, #12]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20018000 	.word	0x20018000
 80015c4:	00000400 	.word	0x00000400
 80015c8:	20000444 	.word	0x20000444
 80015cc:	20000460 	.word	0x20000460

080015d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <SystemInit+0x20>)
 80015d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015da:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <SystemInit+0x20>)
 80015dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800162c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015f8:	f7ff ffea 	bl	80015d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015fc:	480c      	ldr	r0, [pc, #48]	; (8001630 <LoopForever+0x6>)
  ldr r1, =_edata
 80015fe:	490d      	ldr	r1, [pc, #52]	; (8001634 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001600:	4a0d      	ldr	r2, [pc, #52]	; (8001638 <LoopForever+0xe>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001604:	e002      	b.n	800160c <LoopCopyDataInit>

08001606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160a:	3304      	adds	r3, #4

0800160c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800160c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001610:	d3f9      	bcc.n	8001606 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001614:	4c0a      	ldr	r4, [pc, #40]	; (8001640 <LoopForever+0x16>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001618:	e001      	b.n	800161e <LoopFillZerobss>

0800161a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800161c:	3204      	adds	r2, #4

0800161e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001620:	d3fb      	bcc.n	800161a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001622:	f003 fed5 	bl	80053d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001626:	f7ff fb93 	bl	8000d50 <main>

0800162a <LoopForever>:

LoopForever:
    b LoopForever
 800162a:	e7fe      	b.n	800162a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800162c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001634:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8001638:	08006a68 	.word	0x08006a68
  ldr r2, =_sbss
 800163c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8001640:	2000045c 	.word	0x2000045c

08001644 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001644:	e7fe      	b.n	8001644 <ADC1_2_IRQHandler>
	...

08001648 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001652:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <HAL_Init+0x3c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <HAL_Init+0x3c>)
 8001658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165e:	2003      	movs	r0, #3
 8001660:	f000 f93e 	bl	80018e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001664:	2000      	movs	r0, #0
 8001666:	f000 f80f 	bl	8001688 <HAL_InitTick>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d002      	beq.n	8001676 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	71fb      	strb	r3, [r7, #7]
 8001674:	e001      	b.n	800167a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001676:	f7ff fd95 	bl	80011a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800167a:	79fb      	ldrb	r3, [r7, #7]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40022000 	.word	0x40022000

08001688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001694:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <HAL_InitTick+0x6c>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d023      	beq.n	80016e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800169c:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <HAL_InitTick+0x70>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <HAL_InitTick+0x6c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	4619      	mov	r1, r3
 80016a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 f949 	bl	800194a <HAL_SYSTICK_Config>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10f      	bne.n	80016de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b0f      	cmp	r3, #15
 80016c2:	d809      	bhi.n	80016d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c4:	2200      	movs	r2, #0
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	f04f 30ff 	mov.w	r0, #4294967295
 80016cc:	f000 f913 	bl	80018f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016d0:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <HAL_InitTick+0x74>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	e007      	b.n	80016e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
 80016dc:	e004      	b.n	80016e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	73fb      	strb	r3, [r7, #15]
 80016e2:	e001      	b.n	80016e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000190 	.word	0x20000190
 80016f8:	20000188 	.word	0x20000188
 80016fc:	2000018c 	.word	0x2000018c

08001700 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_IncTick+0x20>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_IncTick+0x24>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4413      	add	r3, r2
 8001710:	4a04      	ldr	r2, [pc, #16]	; (8001724 <HAL_IncTick+0x24>)
 8001712:	6013      	str	r3, [r2, #0]
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	20000190 	.word	0x20000190
 8001724:	20000448 	.word	0x20000448

08001728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return uwTick;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <HAL_GetTick+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	20000448 	.word	0x20000448

08001740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <__NVIC_SetPriorityGrouping+0x44>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800175c:	4013      	ands	r3, r2
 800175e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001768:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800176c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001772:	4a04      	ldr	r2, [pc, #16]	; (8001784 <__NVIC_SetPriorityGrouping+0x44>)
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	60d3      	str	r3, [r2, #12]
}
 8001778:	bf00      	nop
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800178c:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <__NVIC_GetPriorityGrouping+0x18>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	0a1b      	lsrs	r3, r3, #8
 8001792:	f003 0307 	and.w	r3, r3, #7
}
 8001796:	4618      	mov	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	db0b      	blt.n	80017ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	f003 021f 	and.w	r2, r3, #31
 80017bc:	4907      	ldr	r1, [pc, #28]	; (80017dc <__NVIC_EnableIRQ+0x38>)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	095b      	lsrs	r3, r3, #5
 80017c4:	2001      	movs	r0, #1
 80017c6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000e100 	.word	0xe000e100

080017e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	6039      	str	r1, [r7, #0]
 80017ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	db0a      	blt.n	800180a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	490c      	ldr	r1, [pc, #48]	; (800182c <__NVIC_SetPriority+0x4c>)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	0112      	lsls	r2, r2, #4
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	440b      	add	r3, r1
 8001804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001808:	e00a      	b.n	8001820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4908      	ldr	r1, [pc, #32]	; (8001830 <__NVIC_SetPriority+0x50>)
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	3b04      	subs	r3, #4
 8001818:	0112      	lsls	r2, r2, #4
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	440b      	add	r3, r1
 800181e:	761a      	strb	r2, [r3, #24]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000e100 	.word	0xe000e100
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001834:	b480      	push	{r7}
 8001836:	b089      	sub	sp, #36	; 0x24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f1c3 0307 	rsb	r3, r3, #7
 800184e:	2b04      	cmp	r3, #4
 8001850:	bf28      	it	cs
 8001852:	2304      	movcs	r3, #4
 8001854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3304      	adds	r3, #4
 800185a:	2b06      	cmp	r3, #6
 800185c:	d902      	bls.n	8001864 <NVIC_EncodePriority+0x30>
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3b03      	subs	r3, #3
 8001862:	e000      	b.n	8001866 <NVIC_EncodePriority+0x32>
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001868:	f04f 32ff 	mov.w	r2, #4294967295
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43da      	mvns	r2, r3
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	401a      	ands	r2, r3
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800187c:	f04f 31ff 	mov.w	r1, #4294967295
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	fa01 f303 	lsl.w	r3, r1, r3
 8001886:	43d9      	mvns	r1, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800188c:	4313      	orrs	r3, r2
         );
}
 800188e:	4618      	mov	r0, r3
 8001890:	3724      	adds	r7, #36	; 0x24
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
	...

0800189c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018ac:	d301      	bcc.n	80018b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ae:	2301      	movs	r3, #1
 80018b0:	e00f      	b.n	80018d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b2:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <SysTick_Config+0x40>)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ba:	210f      	movs	r1, #15
 80018bc:	f04f 30ff 	mov.w	r0, #4294967295
 80018c0:	f7ff ff8e 	bl	80017e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <SysTick_Config+0x40>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ca:	4b04      	ldr	r3, [pc, #16]	; (80018dc <SysTick_Config+0x40>)
 80018cc:	2207      	movs	r2, #7
 80018ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	e000e010 	.word	0xe000e010

080018e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff ff29 	bl	8001740 <__NVIC_SetPriorityGrouping>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b086      	sub	sp, #24
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	4603      	mov	r3, r0
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	607a      	str	r2, [r7, #4]
 8001902:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001908:	f7ff ff3e 	bl	8001788 <__NVIC_GetPriorityGrouping>
 800190c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	68b9      	ldr	r1, [r7, #8]
 8001912:	6978      	ldr	r0, [r7, #20]
 8001914:	f7ff ff8e 	bl	8001834 <NVIC_EncodePriority>
 8001918:	4602      	mov	r2, r0
 800191a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800191e:	4611      	mov	r1, r2
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff5d 	bl	80017e0 <__NVIC_SetPriority>
}
 8001926:	bf00      	nop
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ff31 	bl	80017a4 <__NVIC_EnableIRQ>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff ffa2 	bl	800189c <SysTick_Config>
 8001958:	4603      	mov	r3, r0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001964:	b480      	push	{r7}
 8001966:	b087      	sub	sp, #28
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001972:	e17f      	b.n	8001c74 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	2101      	movs	r1, #1
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	fa01 f303 	lsl.w	r3, r1, r3
 8001980:	4013      	ands	r3, r2
 8001982:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 8171 	beq.w	8001c6e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	2b01      	cmp	r3, #1
 8001996:	d005      	beq.n	80019a4 <HAL_GPIO_Init+0x40>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d130      	bne.n	8001a06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	2203      	movs	r2, #3
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4013      	ands	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	68da      	ldr	r2, [r3, #12]
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019da:	2201      	movs	r2, #1
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4013      	ands	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	091b      	lsrs	r3, r3, #4
 80019f0:	f003 0201 	and.w	r2, r3, #1
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 0303 	and.w	r3, r3, #3
 8001a0e:	2b03      	cmp	r3, #3
 8001a10:	d118      	bne.n	8001a44 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a18:	2201      	movs	r2, #1
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	08db      	lsrs	r3, r3, #3
 8001a2e:	f003 0201 	and.w	r2, r3, #1
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	2b03      	cmp	r3, #3
 8001a4e:	d017      	beq.n	8001a80 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4013      	ands	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d123      	bne.n	8001ad4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	08da      	lsrs	r2, r3, #3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3208      	adds	r2, #8
 8001a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a98:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	220f      	movs	r2, #15
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	4013      	ands	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	691a      	ldr	r2, [r3, #16]
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	08da      	lsrs	r2, r3, #3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3208      	adds	r2, #8
 8001ace:	6939      	ldr	r1, [r7, #16]
 8001ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	2203      	movs	r2, #3
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 0203 	and.w	r2, r3, #3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 80ac 	beq.w	8001c6e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b16:	4b5f      	ldr	r3, [pc, #380]	; (8001c94 <HAL_GPIO_Init+0x330>)
 8001b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b1a:	4a5e      	ldr	r2, [pc, #376]	; (8001c94 <HAL_GPIO_Init+0x330>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6613      	str	r3, [r2, #96]	; 0x60
 8001b22:	4b5c      	ldr	r3, [pc, #368]	; (8001c94 <HAL_GPIO_Init+0x330>)
 8001b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b2e:	4a5a      	ldr	r2, [pc, #360]	; (8001c98 <HAL_GPIO_Init+0x334>)
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	089b      	lsrs	r3, r3, #2
 8001b34:	3302      	adds	r3, #2
 8001b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	220f      	movs	r2, #15
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b58:	d025      	beq.n	8001ba6 <HAL_GPIO_Init+0x242>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a4f      	ldr	r2, [pc, #316]	; (8001c9c <HAL_GPIO_Init+0x338>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d01f      	beq.n	8001ba2 <HAL_GPIO_Init+0x23e>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a4e      	ldr	r2, [pc, #312]	; (8001ca0 <HAL_GPIO_Init+0x33c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d019      	beq.n	8001b9e <HAL_GPIO_Init+0x23a>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a4d      	ldr	r2, [pc, #308]	; (8001ca4 <HAL_GPIO_Init+0x340>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d013      	beq.n	8001b9a <HAL_GPIO_Init+0x236>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a4c      	ldr	r2, [pc, #304]	; (8001ca8 <HAL_GPIO_Init+0x344>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d00d      	beq.n	8001b96 <HAL_GPIO_Init+0x232>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a4b      	ldr	r2, [pc, #300]	; (8001cac <HAL_GPIO_Init+0x348>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d007      	beq.n	8001b92 <HAL_GPIO_Init+0x22e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4a      	ldr	r2, [pc, #296]	; (8001cb0 <HAL_GPIO_Init+0x34c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d101      	bne.n	8001b8e <HAL_GPIO_Init+0x22a>
 8001b8a:	2306      	movs	r3, #6
 8001b8c:	e00c      	b.n	8001ba8 <HAL_GPIO_Init+0x244>
 8001b8e:	2307      	movs	r3, #7
 8001b90:	e00a      	b.n	8001ba8 <HAL_GPIO_Init+0x244>
 8001b92:	2305      	movs	r3, #5
 8001b94:	e008      	b.n	8001ba8 <HAL_GPIO_Init+0x244>
 8001b96:	2304      	movs	r3, #4
 8001b98:	e006      	b.n	8001ba8 <HAL_GPIO_Init+0x244>
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e004      	b.n	8001ba8 <HAL_GPIO_Init+0x244>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	e002      	b.n	8001ba8 <HAL_GPIO_Init+0x244>
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <HAL_GPIO_Init+0x244>
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	697a      	ldr	r2, [r7, #20]
 8001baa:	f002 0203 	and.w	r2, r2, #3
 8001bae:	0092      	lsls	r2, r2, #2
 8001bb0:	4093      	lsls	r3, r2
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bb8:	4937      	ldr	r1, [pc, #220]	; (8001c98 <HAL_GPIO_Init+0x334>)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	089b      	lsrs	r3, r3, #2
 8001bbe:	3302      	adds	r3, #2
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bc6:	4b3b      	ldr	r3, [pc, #236]	; (8001cb4 <HAL_GPIO_Init+0x350>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bea:	4a32      	ldr	r2, [pc, #200]	; (8001cb4 <HAL_GPIO_Init+0x350>)
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001bf0:	4b30      	ldr	r3, [pc, #192]	; (8001cb4 <HAL_GPIO_Init+0x350>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c14:	4a27      	ldr	r2, [pc, #156]	; (8001cb4 <HAL_GPIO_Init+0x350>)
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c1a:	4b26      	ldr	r3, [pc, #152]	; (8001cb4 <HAL_GPIO_Init+0x350>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	4013      	ands	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c3e:	4a1d      	ldr	r2, [pc, #116]	; (8001cb4 <HAL_GPIO_Init+0x350>)
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c44:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <HAL_GPIO_Init+0x350>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c68:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <HAL_GPIO_Init+0x350>)
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	3301      	adds	r3, #1
 8001c72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f47f ae78 	bne.w	8001974 <HAL_GPIO_Init+0x10>
  }
}
 8001c84:	bf00      	nop
 8001c86:	bf00      	nop
 8001c88:	371c      	adds	r7, #28
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40021000 	.word	0x40021000
 8001c98:	40010000 	.word	0x40010000
 8001c9c:	48000400 	.word	0x48000400
 8001ca0:	48000800 	.word	0x48000800
 8001ca4:	48000c00 	.word	0x48000c00
 8001ca8:	48001000 	.word	0x48001000
 8001cac:	48001400 	.word	0x48001400
 8001cb0:	48001800 	.word	0x48001800
 8001cb4:	40010400 	.word	0x40010400

08001cb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	887b      	ldrh	r3, [r7, #2]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d002      	beq.n	8001cd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	73fb      	strb	r3, [r7, #15]
 8001cd4:	e001      	b.n	8001cda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	807b      	strh	r3, [r7, #2]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cf8:	787b      	ldrb	r3, [r7, #1]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cfe:	887a      	ldrh	r2, [r7, #2]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d04:	e002      	b.n	8001d0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d06:	887a      	ldrh	r2, [r7, #2]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d2a:	887a      	ldrh	r2, [r7, #2]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	041a      	lsls	r2, r3, #16
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	43d9      	mvns	r1, r3
 8001d36:	887b      	ldrh	r3, [r7, #2]
 8001d38:	400b      	ands	r3, r1
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	619a      	str	r2, [r3, #24]
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d56:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d58:	695a      	ldr	r2, [r3, #20]
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d006      	beq.n	8001d70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d62:	4a05      	ldr	r2, [pc, #20]	; (8001d78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d64:	88fb      	ldrh	r3, [r7, #6]
 8001d66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d68:	88fb      	ldrh	r3, [r7, #6]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe ffd0 	bl	8000d10 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d70:	bf00      	nop
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40010400 	.word	0x40010400

08001d7c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d80:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40007000 	.word	0x40007000

08001d98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001da6:	d130      	bne.n	8001e0a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001da8:	4b23      	ldr	r3, [pc, #140]	; (8001e38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001db4:	d038      	beq.n	8001e28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001db6:	4b20      	ldr	r3, [pc, #128]	; (8001e38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dbe:	4a1e      	ldr	r2, [pc, #120]	; (8001e38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dc0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dc4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001dc6:	4b1d      	ldr	r3, [pc, #116]	; (8001e3c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2232      	movs	r2, #50	; 0x32
 8001dcc:	fb02 f303 	mul.w	r3, r2, r3
 8001dd0:	4a1b      	ldr	r2, [pc, #108]	; (8001e40 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd6:	0c9b      	lsrs	r3, r3, #18
 8001dd8:	3301      	adds	r3, #1
 8001dda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ddc:	e002      	b.n	8001de4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	3b01      	subs	r3, #1
 8001de2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001de4:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001df0:	d102      	bne.n	8001df8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1f2      	bne.n	8001dde <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001df8:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e04:	d110      	bne.n	8001e28 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e00f      	b.n	8001e2a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e0a:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e16:	d007      	beq.n	8001e28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e18:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e20:	4a05      	ldr	r2, [pc, #20]	; (8001e38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e26:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40007000 	.word	0x40007000
 8001e3c:	20000188 	.word	0x20000188
 8001e40:	431bde83 	.word	0x431bde83

08001e44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b088      	sub	sp, #32
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e3ca      	b.n	80025ec <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e56:	4b97      	ldr	r3, [pc, #604]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
 8001e5e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e60:	4b94      	ldr	r3, [pc, #592]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f003 0303 	and.w	r3, r3, #3
 8001e68:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0310 	and.w	r3, r3, #16
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 80e4 	beq.w	8002040 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d007      	beq.n	8001e8e <HAL_RCC_OscConfig+0x4a>
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	2b0c      	cmp	r3, #12
 8001e82:	f040 808b 	bne.w	8001f9c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	f040 8087 	bne.w	8001f9c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e8e:	4b89      	ldr	r3, [pc, #548]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d005      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x62>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e3a2      	b.n	80025ec <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a1a      	ldr	r2, [r3, #32]
 8001eaa:	4b82      	ldr	r3, [pc, #520]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d004      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x7c>
 8001eb6:	4b7f      	ldr	r3, [pc, #508]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ebe:	e005      	b.n	8001ecc <HAL_RCC_OscConfig+0x88>
 8001ec0:	4b7c      	ldr	r3, [pc, #496]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 8001ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ec6:	091b      	lsrs	r3, r3, #4
 8001ec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d223      	bcs.n	8001f18 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f000 fd55 	bl	8002984 <RCC_SetFlashLatencyFromMSIRange>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e383      	b.n	80025ec <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ee4:	4b73      	ldr	r3, [pc, #460]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a72      	ldr	r2, [pc, #456]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 8001eea:	f043 0308 	orr.w	r3, r3, #8
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	4b70      	ldr	r3, [pc, #448]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	496d      	ldr	r1, [pc, #436]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f02:	4b6c      	ldr	r3, [pc, #432]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	021b      	lsls	r3, r3, #8
 8001f10:	4968      	ldr	r1, [pc, #416]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	604b      	str	r3, [r1, #4]
 8001f16:	e025      	b.n	8001f64 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f18:	4b66      	ldr	r3, [pc, #408]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a65      	ldr	r2, [pc, #404]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 8001f1e:	f043 0308 	orr.w	r3, r3, #8
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	4b63      	ldr	r3, [pc, #396]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	4960      	ldr	r1, [pc, #384]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f36:	4b5f      	ldr	r3, [pc, #380]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	021b      	lsls	r3, r3, #8
 8001f44:	495b      	ldr	r1, [pc, #364]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d109      	bne.n	8001f64 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f000 fd15 	bl	8002984 <RCC_SetFlashLatencyFromMSIRange>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e343      	b.n	80025ec <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f64:	f000 fc4a 	bl	80027fc <HAL_RCC_GetSysClockFreq>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	4b52      	ldr	r3, [pc, #328]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	091b      	lsrs	r3, r3, #4
 8001f70:	f003 030f 	and.w	r3, r3, #15
 8001f74:	4950      	ldr	r1, [pc, #320]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001f76:	5ccb      	ldrb	r3, [r1, r3]
 8001f78:	f003 031f 	and.w	r3, r3, #31
 8001f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f80:	4a4e      	ldr	r2, [pc, #312]	; (80020bc <HAL_RCC_OscConfig+0x278>)
 8001f82:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f84:	4b4e      	ldr	r3, [pc, #312]	; (80020c0 <HAL_RCC_OscConfig+0x27c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff fb7d 	bl	8001688 <HAL_InitTick>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d052      	beq.n	800203e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001f98:	7bfb      	ldrb	r3, [r7, #15]
 8001f9a:	e327      	b.n	80025ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d032      	beq.n	800200a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fa4:	4b43      	ldr	r3, [pc, #268]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a42      	ldr	r2, [pc, #264]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fb0:	f7ff fbba 	bl	8001728 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fb8:	f7ff fbb6 	bl	8001728 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e310      	b.n	80025ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fca:	4b3a      	ldr	r3, [pc, #232]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fd6:	4b37      	ldr	r3, [pc, #220]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a36      	ldr	r2, [pc, #216]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 8001fdc:	f043 0308 	orr.w	r3, r3, #8
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	4b34      	ldr	r3, [pc, #208]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	4931      	ldr	r1, [pc, #196]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ff4:	4b2f      	ldr	r3, [pc, #188]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	492c      	ldr	r1, [pc, #176]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 8002004:	4313      	orrs	r3, r2
 8002006:	604b      	str	r3, [r1, #4]
 8002008:	e01a      	b.n	8002040 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800200a:	4b2a      	ldr	r3, [pc, #168]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a29      	ldr	r2, [pc, #164]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 8002010:	f023 0301 	bic.w	r3, r3, #1
 8002014:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002016:	f7ff fb87 	bl	8001728 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800201e:	f7ff fb83 	bl	8001728 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e2dd      	b.n	80025ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002030:	4b20      	ldr	r3, [pc, #128]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1f0      	bne.n	800201e <HAL_RCC_OscConfig+0x1da>
 800203c:	e000      	b.n	8002040 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800203e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b00      	cmp	r3, #0
 800204a:	d074      	beq.n	8002136 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	2b08      	cmp	r3, #8
 8002050:	d005      	beq.n	800205e <HAL_RCC_OscConfig+0x21a>
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	2b0c      	cmp	r3, #12
 8002056:	d10e      	bne.n	8002076 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	2b03      	cmp	r3, #3
 800205c:	d10b      	bne.n	8002076 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800205e:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d064      	beq.n	8002134 <HAL_RCC_OscConfig+0x2f0>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d160      	bne.n	8002134 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e2ba      	b.n	80025ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800207e:	d106      	bne.n	800208e <HAL_RCC_OscConfig+0x24a>
 8002080:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a0b      	ldr	r2, [pc, #44]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 8002086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800208a:	6013      	str	r3, [r2, #0]
 800208c:	e026      	b.n	80020dc <HAL_RCC_OscConfig+0x298>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002096:	d115      	bne.n	80020c4 <HAL_RCC_OscConfig+0x280>
 8002098:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a05      	ldr	r2, [pc, #20]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 800209e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	4b03      	ldr	r3, [pc, #12]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a02      	ldr	r2, [pc, #8]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 80020aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ae:	6013      	str	r3, [r2, #0]
 80020b0:	e014      	b.n	80020dc <HAL_RCC_OscConfig+0x298>
 80020b2:	bf00      	nop
 80020b4:	40021000 	.word	0x40021000
 80020b8:	080067c4 	.word	0x080067c4
 80020bc:	20000188 	.word	0x20000188
 80020c0:	2000018c 	.word	0x2000018c
 80020c4:	4ba0      	ldr	r3, [pc, #640]	; (8002348 <HAL_RCC_OscConfig+0x504>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a9f      	ldr	r2, [pc, #636]	; (8002348 <HAL_RCC_OscConfig+0x504>)
 80020ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	4b9d      	ldr	r3, [pc, #628]	; (8002348 <HAL_RCC_OscConfig+0x504>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a9c      	ldr	r2, [pc, #624]	; (8002348 <HAL_RCC_OscConfig+0x504>)
 80020d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d013      	beq.n	800210c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e4:	f7ff fb20 	bl	8001728 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ec:	f7ff fb1c 	bl	8001728 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b64      	cmp	r3, #100	; 0x64
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e276      	b.n	80025ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020fe:	4b92      	ldr	r3, [pc, #584]	; (8002348 <HAL_RCC_OscConfig+0x504>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0f0      	beq.n	80020ec <HAL_RCC_OscConfig+0x2a8>
 800210a:	e014      	b.n	8002136 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210c:	f7ff fb0c 	bl	8001728 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002114:	f7ff fb08 	bl	8001728 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b64      	cmp	r3, #100	; 0x64
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e262      	b.n	80025ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002126:	4b88      	ldr	r3, [pc, #544]	; (8002348 <HAL_RCC_OscConfig+0x504>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x2d0>
 8002132:	e000      	b.n	8002136 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d060      	beq.n	8002204 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	2b04      	cmp	r3, #4
 8002146:	d005      	beq.n	8002154 <HAL_RCC_OscConfig+0x310>
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	2b0c      	cmp	r3, #12
 800214c:	d119      	bne.n	8002182 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	2b02      	cmp	r3, #2
 8002152:	d116      	bne.n	8002182 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002154:	4b7c      	ldr	r3, [pc, #496]	; (8002348 <HAL_RCC_OscConfig+0x504>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_RCC_OscConfig+0x328>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e23f      	b.n	80025ec <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800216c:	4b76      	ldr	r3, [pc, #472]	; (8002348 <HAL_RCC_OscConfig+0x504>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	061b      	lsls	r3, r3, #24
 800217a:	4973      	ldr	r1, [pc, #460]	; (8002348 <HAL_RCC_OscConfig+0x504>)
 800217c:	4313      	orrs	r3, r2
 800217e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002180:	e040      	b.n	8002204 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d023      	beq.n	80021d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800218a:	4b6f      	ldr	r3, [pc, #444]	; (8002348 <HAL_RCC_OscConfig+0x504>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a6e      	ldr	r2, [pc, #440]	; (8002348 <HAL_RCC_OscConfig+0x504>)
 8002190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002194:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002196:	f7ff fac7 	bl	8001728 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800219c:	e008      	b.n	80021b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800219e:	f7ff fac3 	bl	8001728 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e21d      	b.n	80025ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021b0:	4b65      	ldr	r3, [pc, #404]	; (8002348 <HAL_RCC_OscConfig+0x504>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0f0      	beq.n	800219e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021bc:	4b62      	ldr	r3, [pc, #392]	; (8002348 <HAL_RCC_OscConfig+0x504>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	061b      	lsls	r3, r3, #24
 80021ca:	495f      	ldr	r1, [pc, #380]	; (8002348 <HAL_RCC_OscConfig+0x504>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	604b      	str	r3, [r1, #4]
 80021d0:	e018      	b.n	8002204 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021d2:	4b5d      	ldr	r3, [pc, #372]	; (8002348 <HAL_RCC_OscConfig+0x504>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a5c      	ldr	r2, [pc, #368]	; (8002348 <HAL_RCC_OscConfig+0x504>)
 80021d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021de:	f7ff faa3 	bl	8001728 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e6:	f7ff fa9f 	bl	8001728 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e1f9      	b.n	80025ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021f8:	4b53      	ldr	r3, [pc, #332]	; (8002348 <HAL_RCC_OscConfig+0x504>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1f0      	bne.n	80021e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0308 	and.w	r3, r3, #8
 800220c:	2b00      	cmp	r3, #0
 800220e:	d03c      	beq.n	800228a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d01c      	beq.n	8002252 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002218:	4b4b      	ldr	r3, [pc, #300]	; (8002348 <HAL_RCC_OscConfig+0x504>)
 800221a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800221e:	4a4a      	ldr	r2, [pc, #296]	; (8002348 <HAL_RCC_OscConfig+0x504>)
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002228:	f7ff fa7e 	bl	8001728 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002230:	f7ff fa7a 	bl	8001728 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e1d4      	b.n	80025ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002242:	4b41      	ldr	r3, [pc, #260]	; (8002348 <HAL_RCC_OscConfig+0x504>)
 8002244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0ef      	beq.n	8002230 <HAL_RCC_OscConfig+0x3ec>
 8002250:	e01b      	b.n	800228a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002252:	4b3d      	ldr	r3, [pc, #244]	; (8002348 <HAL_RCC_OscConfig+0x504>)
 8002254:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002258:	4a3b      	ldr	r2, [pc, #236]	; (8002348 <HAL_RCC_OscConfig+0x504>)
 800225a:	f023 0301 	bic.w	r3, r3, #1
 800225e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002262:	f7ff fa61 	bl	8001728 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800226a:	f7ff fa5d 	bl	8001728 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e1b7      	b.n	80025ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800227c:	4b32      	ldr	r3, [pc, #200]	; (8002348 <HAL_RCC_OscConfig+0x504>)
 800227e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1ef      	bne.n	800226a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 80a6 	beq.w	80023e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002298:	2300      	movs	r3, #0
 800229a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800229c:	4b2a      	ldr	r3, [pc, #168]	; (8002348 <HAL_RCC_OscConfig+0x504>)
 800229e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10d      	bne.n	80022c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022a8:	4b27      	ldr	r3, [pc, #156]	; (8002348 <HAL_RCC_OscConfig+0x504>)
 80022aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ac:	4a26      	ldr	r2, [pc, #152]	; (8002348 <HAL_RCC_OscConfig+0x504>)
 80022ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b2:	6593      	str	r3, [r2, #88]	; 0x58
 80022b4:	4b24      	ldr	r3, [pc, #144]	; (8002348 <HAL_RCC_OscConfig+0x504>)
 80022b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022c0:	2301      	movs	r3, #1
 80022c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022c4:	4b21      	ldr	r3, [pc, #132]	; (800234c <HAL_RCC_OscConfig+0x508>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d118      	bne.n	8002302 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022d0:	4b1e      	ldr	r3, [pc, #120]	; (800234c <HAL_RCC_OscConfig+0x508>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a1d      	ldr	r2, [pc, #116]	; (800234c <HAL_RCC_OscConfig+0x508>)
 80022d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022dc:	f7ff fa24 	bl	8001728 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e4:	f7ff fa20 	bl	8001728 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e17a      	b.n	80025ec <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022f6:	4b15      	ldr	r3, [pc, #84]	; (800234c <HAL_RCC_OscConfig+0x508>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f0      	beq.n	80022e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d108      	bne.n	800231c <HAL_RCC_OscConfig+0x4d8>
 800230a:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <HAL_RCC_OscConfig+0x504>)
 800230c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002310:	4a0d      	ldr	r2, [pc, #52]	; (8002348 <HAL_RCC_OscConfig+0x504>)
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800231a:	e029      	b.n	8002370 <HAL_RCC_OscConfig+0x52c>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	2b05      	cmp	r3, #5
 8002322:	d115      	bne.n	8002350 <HAL_RCC_OscConfig+0x50c>
 8002324:	4b08      	ldr	r3, [pc, #32]	; (8002348 <HAL_RCC_OscConfig+0x504>)
 8002326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232a:	4a07      	ldr	r2, [pc, #28]	; (8002348 <HAL_RCC_OscConfig+0x504>)
 800232c:	f043 0304 	orr.w	r3, r3, #4
 8002330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002334:	4b04      	ldr	r3, [pc, #16]	; (8002348 <HAL_RCC_OscConfig+0x504>)
 8002336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233a:	4a03      	ldr	r2, [pc, #12]	; (8002348 <HAL_RCC_OscConfig+0x504>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002344:	e014      	b.n	8002370 <HAL_RCC_OscConfig+0x52c>
 8002346:	bf00      	nop
 8002348:	40021000 	.word	0x40021000
 800234c:	40007000 	.word	0x40007000
 8002350:	4b9c      	ldr	r3, [pc, #624]	; (80025c4 <HAL_RCC_OscConfig+0x780>)
 8002352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002356:	4a9b      	ldr	r2, [pc, #620]	; (80025c4 <HAL_RCC_OscConfig+0x780>)
 8002358:	f023 0301 	bic.w	r3, r3, #1
 800235c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002360:	4b98      	ldr	r3, [pc, #608]	; (80025c4 <HAL_RCC_OscConfig+0x780>)
 8002362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002366:	4a97      	ldr	r2, [pc, #604]	; (80025c4 <HAL_RCC_OscConfig+0x780>)
 8002368:	f023 0304 	bic.w	r3, r3, #4
 800236c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d016      	beq.n	80023a6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002378:	f7ff f9d6 	bl	8001728 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800237e:	e00a      	b.n	8002396 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002380:	f7ff f9d2 	bl	8001728 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	f241 3288 	movw	r2, #5000	; 0x1388
 800238e:	4293      	cmp	r3, r2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e12a      	b.n	80025ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002396:	4b8b      	ldr	r3, [pc, #556]	; (80025c4 <HAL_RCC_OscConfig+0x780>)
 8002398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0ed      	beq.n	8002380 <HAL_RCC_OscConfig+0x53c>
 80023a4:	e015      	b.n	80023d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a6:	f7ff f9bf 	bl	8001728 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023ac:	e00a      	b.n	80023c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ae:	f7ff f9bb 	bl	8001728 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023bc:	4293      	cmp	r3, r2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e113      	b.n	80025ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023c4:	4b7f      	ldr	r3, [pc, #508]	; (80025c4 <HAL_RCC_OscConfig+0x780>)
 80023c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1ed      	bne.n	80023ae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023d2:	7ffb      	ldrb	r3, [r7, #31]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d105      	bne.n	80023e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d8:	4b7a      	ldr	r3, [pc, #488]	; (80025c4 <HAL_RCC_OscConfig+0x780>)
 80023da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023dc:	4a79      	ldr	r2, [pc, #484]	; (80025c4 <HAL_RCC_OscConfig+0x780>)
 80023de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 80fe 	beq.w	80025ea <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	f040 80d0 	bne.w	8002598 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80023f8:	4b72      	ldr	r3, [pc, #456]	; (80025c4 <HAL_RCC_OscConfig+0x780>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f003 0203 	and.w	r2, r3, #3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002408:	429a      	cmp	r2, r3
 800240a:	d130      	bne.n	800246e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	3b01      	subs	r3, #1
 8002418:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800241a:	429a      	cmp	r2, r3
 800241c:	d127      	bne.n	800246e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002428:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800242a:	429a      	cmp	r2, r3
 800242c:	d11f      	bne.n	800246e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002438:	2a07      	cmp	r2, #7
 800243a:	bf14      	ite	ne
 800243c:	2201      	movne	r2, #1
 800243e:	2200      	moveq	r2, #0
 8002440:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002442:	4293      	cmp	r3, r2
 8002444:	d113      	bne.n	800246e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002450:	085b      	lsrs	r3, r3, #1
 8002452:	3b01      	subs	r3, #1
 8002454:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002456:	429a      	cmp	r2, r3
 8002458:	d109      	bne.n	800246e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002464:	085b      	lsrs	r3, r3, #1
 8002466:	3b01      	subs	r3, #1
 8002468:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800246a:	429a      	cmp	r2, r3
 800246c:	d06e      	beq.n	800254c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	2b0c      	cmp	r3, #12
 8002472:	d069      	beq.n	8002548 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002474:	4b53      	ldr	r3, [pc, #332]	; (80025c4 <HAL_RCC_OscConfig+0x780>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d105      	bne.n	800248c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002480:	4b50      	ldr	r3, [pc, #320]	; (80025c4 <HAL_RCC_OscConfig+0x780>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e0ad      	b.n	80025ec <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002490:	4b4c      	ldr	r3, [pc, #304]	; (80025c4 <HAL_RCC_OscConfig+0x780>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a4b      	ldr	r2, [pc, #300]	; (80025c4 <HAL_RCC_OscConfig+0x780>)
 8002496:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800249a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800249c:	f7ff f944 	bl	8001728 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a4:	f7ff f940 	bl	8001728 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e09a      	b.n	80025ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024b6:	4b43      	ldr	r3, [pc, #268]	; (80025c4 <HAL_RCC_OscConfig+0x780>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024c2:	4b40      	ldr	r3, [pc, #256]	; (80025c4 <HAL_RCC_OscConfig+0x780>)
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	4b40      	ldr	r3, [pc, #256]	; (80025c8 <HAL_RCC_OscConfig+0x784>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80024d2:	3a01      	subs	r2, #1
 80024d4:	0112      	lsls	r2, r2, #4
 80024d6:	4311      	orrs	r1, r2
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024dc:	0212      	lsls	r2, r2, #8
 80024de:	4311      	orrs	r1, r2
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024e4:	0852      	lsrs	r2, r2, #1
 80024e6:	3a01      	subs	r2, #1
 80024e8:	0552      	lsls	r2, r2, #21
 80024ea:	4311      	orrs	r1, r2
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024f0:	0852      	lsrs	r2, r2, #1
 80024f2:	3a01      	subs	r2, #1
 80024f4:	0652      	lsls	r2, r2, #25
 80024f6:	4311      	orrs	r1, r2
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024fc:	0912      	lsrs	r2, r2, #4
 80024fe:	0452      	lsls	r2, r2, #17
 8002500:	430a      	orrs	r2, r1
 8002502:	4930      	ldr	r1, [pc, #192]	; (80025c4 <HAL_RCC_OscConfig+0x780>)
 8002504:	4313      	orrs	r3, r2
 8002506:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002508:	4b2e      	ldr	r3, [pc, #184]	; (80025c4 <HAL_RCC_OscConfig+0x780>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a2d      	ldr	r2, [pc, #180]	; (80025c4 <HAL_RCC_OscConfig+0x780>)
 800250e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002512:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002514:	4b2b      	ldr	r3, [pc, #172]	; (80025c4 <HAL_RCC_OscConfig+0x780>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	4a2a      	ldr	r2, [pc, #168]	; (80025c4 <HAL_RCC_OscConfig+0x780>)
 800251a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800251e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002520:	f7ff f902 	bl	8001728 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002528:	f7ff f8fe 	bl	8001728 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e058      	b.n	80025ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800253a:	4b22      	ldr	r3, [pc, #136]	; (80025c4 <HAL_RCC_OscConfig+0x780>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002546:	e050      	b.n	80025ea <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e04f      	b.n	80025ec <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800254c:	4b1d      	ldr	r3, [pc, #116]	; (80025c4 <HAL_RCC_OscConfig+0x780>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d148      	bne.n	80025ea <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002558:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <HAL_RCC_OscConfig+0x780>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a19      	ldr	r2, [pc, #100]	; (80025c4 <HAL_RCC_OscConfig+0x780>)
 800255e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002562:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002564:	4b17      	ldr	r3, [pc, #92]	; (80025c4 <HAL_RCC_OscConfig+0x780>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	4a16      	ldr	r2, [pc, #88]	; (80025c4 <HAL_RCC_OscConfig+0x780>)
 800256a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800256e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002570:	f7ff f8da 	bl	8001728 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002578:	f7ff f8d6 	bl	8001728 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e030      	b.n	80025ec <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800258a:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <HAL_RCC_OscConfig+0x780>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0f0      	beq.n	8002578 <HAL_RCC_OscConfig+0x734>
 8002596:	e028      	b.n	80025ea <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	2b0c      	cmp	r3, #12
 800259c:	d023      	beq.n	80025e6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <HAL_RCC_OscConfig+0x780>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a08      	ldr	r2, [pc, #32]	; (80025c4 <HAL_RCC_OscConfig+0x780>)
 80025a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025aa:	f7ff f8bd 	bl	8001728 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025b0:	e00c      	b.n	80025cc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b2:	f7ff f8b9 	bl	8001728 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d905      	bls.n	80025cc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e013      	b.n	80025ec <HAL_RCC_OscConfig+0x7a8>
 80025c4:	40021000 	.word	0x40021000
 80025c8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025cc:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <HAL_RCC_OscConfig+0x7b0>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1ec      	bne.n	80025b2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80025d8:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <HAL_RCC_OscConfig+0x7b0>)
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	4905      	ldr	r1, [pc, #20]	; (80025f4 <HAL_RCC_OscConfig+0x7b0>)
 80025de:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <HAL_RCC_OscConfig+0x7b4>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	60cb      	str	r3, [r1, #12]
 80025e4:	e001      	b.n	80025ea <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3720      	adds	r7, #32
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40021000 	.word	0x40021000
 80025f8:	feeefffc 	.word	0xfeeefffc

080025fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e0e7      	b.n	80027e0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002610:	4b75      	ldr	r3, [pc, #468]	; (80027e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d910      	bls.n	8002640 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261e:	4b72      	ldr	r3, [pc, #456]	; (80027e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 0207 	bic.w	r2, r3, #7
 8002626:	4970      	ldr	r1, [pc, #448]	; (80027e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	4313      	orrs	r3, r2
 800262c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800262e:	4b6e      	ldr	r3, [pc, #440]	; (80027e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d001      	beq.n	8002640 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0cf      	b.n	80027e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d010      	beq.n	800266e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	4b66      	ldr	r3, [pc, #408]	; (80027ec <HAL_RCC_ClockConfig+0x1f0>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002658:	429a      	cmp	r2, r3
 800265a:	d908      	bls.n	800266e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800265c:	4b63      	ldr	r3, [pc, #396]	; (80027ec <HAL_RCC_ClockConfig+0x1f0>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	4960      	ldr	r1, [pc, #384]	; (80027ec <HAL_RCC_ClockConfig+0x1f0>)
 800266a:	4313      	orrs	r3, r2
 800266c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d04c      	beq.n	8002714 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b03      	cmp	r3, #3
 8002680:	d107      	bne.n	8002692 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002682:	4b5a      	ldr	r3, [pc, #360]	; (80027ec <HAL_RCC_ClockConfig+0x1f0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d121      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e0a6      	b.n	80027e0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b02      	cmp	r3, #2
 8002698:	d107      	bne.n	80026aa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800269a:	4b54      	ldr	r3, [pc, #336]	; (80027ec <HAL_RCC_ClockConfig+0x1f0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d115      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e09a      	b.n	80027e0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d107      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026b2:	4b4e      	ldr	r3, [pc, #312]	; (80027ec <HAL_RCC_ClockConfig+0x1f0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d109      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e08e      	b.n	80027e0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026c2:	4b4a      	ldr	r3, [pc, #296]	; (80027ec <HAL_RCC_ClockConfig+0x1f0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e086      	b.n	80027e0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026d2:	4b46      	ldr	r3, [pc, #280]	; (80027ec <HAL_RCC_ClockConfig+0x1f0>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f023 0203 	bic.w	r2, r3, #3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	4943      	ldr	r1, [pc, #268]	; (80027ec <HAL_RCC_ClockConfig+0x1f0>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026e4:	f7ff f820 	bl	8001728 <HAL_GetTick>
 80026e8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ea:	e00a      	b.n	8002702 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ec:	f7ff f81c 	bl	8001728 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e06e      	b.n	80027e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002702:	4b3a      	ldr	r3, [pc, #232]	; (80027ec <HAL_RCC_ClockConfig+0x1f0>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 020c 	and.w	r2, r3, #12
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	429a      	cmp	r2, r3
 8002712:	d1eb      	bne.n	80026ec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d010      	beq.n	8002742 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	4b31      	ldr	r3, [pc, #196]	; (80027ec <HAL_RCC_ClockConfig+0x1f0>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800272c:	429a      	cmp	r2, r3
 800272e:	d208      	bcs.n	8002742 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002730:	4b2e      	ldr	r3, [pc, #184]	; (80027ec <HAL_RCC_ClockConfig+0x1f0>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	492b      	ldr	r1, [pc, #172]	; (80027ec <HAL_RCC_ClockConfig+0x1f0>)
 800273e:	4313      	orrs	r3, r2
 8002740:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002742:	4b29      	ldr	r3, [pc, #164]	; (80027e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d210      	bcs.n	8002772 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002750:	4b25      	ldr	r3, [pc, #148]	; (80027e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f023 0207 	bic.w	r2, r3, #7
 8002758:	4923      	ldr	r1, [pc, #140]	; (80027e8 <HAL_RCC_ClockConfig+0x1ec>)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	4313      	orrs	r3, r2
 800275e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002760:	4b21      	ldr	r3, [pc, #132]	; (80027e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d001      	beq.n	8002772 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e036      	b.n	80027e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	2b00      	cmp	r3, #0
 800277c:	d008      	beq.n	8002790 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800277e:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <HAL_RCC_ClockConfig+0x1f0>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	4918      	ldr	r1, [pc, #96]	; (80027ec <HAL_RCC_ClockConfig+0x1f0>)
 800278c:	4313      	orrs	r3, r2
 800278e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	2b00      	cmp	r3, #0
 800279a:	d009      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800279c:	4b13      	ldr	r3, [pc, #76]	; (80027ec <HAL_RCC_ClockConfig+0x1f0>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	4910      	ldr	r1, [pc, #64]	; (80027ec <HAL_RCC_ClockConfig+0x1f0>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027b0:	f000 f824 	bl	80027fc <HAL_RCC_GetSysClockFreq>
 80027b4:	4602      	mov	r2, r0
 80027b6:	4b0d      	ldr	r3, [pc, #52]	; (80027ec <HAL_RCC_ClockConfig+0x1f0>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	091b      	lsrs	r3, r3, #4
 80027bc:	f003 030f 	and.w	r3, r3, #15
 80027c0:	490b      	ldr	r1, [pc, #44]	; (80027f0 <HAL_RCC_ClockConfig+0x1f4>)
 80027c2:	5ccb      	ldrb	r3, [r1, r3]
 80027c4:	f003 031f 	and.w	r3, r3, #31
 80027c8:	fa22 f303 	lsr.w	r3, r2, r3
 80027cc:	4a09      	ldr	r2, [pc, #36]	; (80027f4 <HAL_RCC_ClockConfig+0x1f8>)
 80027ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027d0:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <HAL_RCC_ClockConfig+0x1fc>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fe ff57 	bl	8001688 <HAL_InitTick>
 80027da:	4603      	mov	r3, r0
 80027dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80027de:	7afb      	ldrb	r3, [r7, #11]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40022000 	.word	0x40022000
 80027ec:	40021000 	.word	0x40021000
 80027f0:	080067c4 	.word	0x080067c4
 80027f4:	20000188 	.word	0x20000188
 80027f8:	2000018c 	.word	0x2000018c

080027fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b089      	sub	sp, #36	; 0x24
 8002800:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
 8002806:	2300      	movs	r3, #0
 8002808:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800280a:	4b3e      	ldr	r3, [pc, #248]	; (8002904 <HAL_RCC_GetSysClockFreq+0x108>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002814:	4b3b      	ldr	r3, [pc, #236]	; (8002904 <HAL_RCC_GetSysClockFreq+0x108>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_RCC_GetSysClockFreq+0x34>
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	2b0c      	cmp	r3, #12
 8002828:	d121      	bne.n	800286e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d11e      	bne.n	800286e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002830:	4b34      	ldr	r3, [pc, #208]	; (8002904 <HAL_RCC_GetSysClockFreq+0x108>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	2b00      	cmp	r3, #0
 800283a:	d107      	bne.n	800284c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800283c:	4b31      	ldr	r3, [pc, #196]	; (8002904 <HAL_RCC_GetSysClockFreq+0x108>)
 800283e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002842:	0a1b      	lsrs	r3, r3, #8
 8002844:	f003 030f 	and.w	r3, r3, #15
 8002848:	61fb      	str	r3, [r7, #28]
 800284a:	e005      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800284c:	4b2d      	ldr	r3, [pc, #180]	; (8002904 <HAL_RCC_GetSysClockFreq+0x108>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	091b      	lsrs	r3, r3, #4
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002858:	4a2b      	ldr	r2, [pc, #172]	; (8002908 <HAL_RCC_GetSysClockFreq+0x10c>)
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002860:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10d      	bne.n	8002884 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800286c:	e00a      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	2b04      	cmp	r3, #4
 8002872:	d102      	bne.n	800287a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002874:	4b25      	ldr	r3, [pc, #148]	; (800290c <HAL_RCC_GetSysClockFreq+0x110>)
 8002876:	61bb      	str	r3, [r7, #24]
 8002878:	e004      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	2b08      	cmp	r3, #8
 800287e:	d101      	bne.n	8002884 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002880:	4b23      	ldr	r3, [pc, #140]	; (8002910 <HAL_RCC_GetSysClockFreq+0x114>)
 8002882:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	2b0c      	cmp	r3, #12
 8002888:	d134      	bne.n	80028f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800288a:	4b1e      	ldr	r3, [pc, #120]	; (8002904 <HAL_RCC_GetSysClockFreq+0x108>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d003      	beq.n	80028a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2b03      	cmp	r3, #3
 800289e:	d003      	beq.n	80028a8 <HAL_RCC_GetSysClockFreq+0xac>
 80028a0:	e005      	b.n	80028ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80028a2:	4b1a      	ldr	r3, [pc, #104]	; (800290c <HAL_RCC_GetSysClockFreq+0x110>)
 80028a4:	617b      	str	r3, [r7, #20]
      break;
 80028a6:	e005      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80028a8:	4b19      	ldr	r3, [pc, #100]	; (8002910 <HAL_RCC_GetSysClockFreq+0x114>)
 80028aa:	617b      	str	r3, [r7, #20]
      break;
 80028ac:	e002      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	617b      	str	r3, [r7, #20]
      break;
 80028b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028b4:	4b13      	ldr	r3, [pc, #76]	; (8002904 <HAL_RCC_GetSysClockFreq+0x108>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	091b      	lsrs	r3, r3, #4
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	3301      	adds	r3, #1
 80028c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80028c2:	4b10      	ldr	r3, [pc, #64]	; (8002904 <HAL_RCC_GetSysClockFreq+0x108>)
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	0a1b      	lsrs	r3, r3, #8
 80028c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	fb03 f202 	mul.w	r2, r3, r2
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028da:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <HAL_RCC_GetSysClockFreq+0x108>)
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	0e5b      	lsrs	r3, r3, #25
 80028e0:	f003 0303 	and.w	r3, r3, #3
 80028e4:	3301      	adds	r3, #1
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80028f4:	69bb      	ldr	r3, [r7, #24]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3724      	adds	r7, #36	; 0x24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40021000 	.word	0x40021000
 8002908:	080067dc 	.word	0x080067dc
 800290c:	00f42400 	.word	0x00f42400
 8002910:	007a1200 	.word	0x007a1200

08002914 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002918:	4b03      	ldr	r3, [pc, #12]	; (8002928 <HAL_RCC_GetHCLKFreq+0x14>)
 800291a:	681b      	ldr	r3, [r3, #0]
}
 800291c:	4618      	mov	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	20000188 	.word	0x20000188

0800292c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002930:	f7ff fff0 	bl	8002914 <HAL_RCC_GetHCLKFreq>
 8002934:	4602      	mov	r2, r0
 8002936:	4b06      	ldr	r3, [pc, #24]	; (8002950 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	0a1b      	lsrs	r3, r3, #8
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	4904      	ldr	r1, [pc, #16]	; (8002954 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002942:	5ccb      	ldrb	r3, [r1, r3]
 8002944:	f003 031f 	and.w	r3, r3, #31
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800294c:	4618      	mov	r0, r3
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40021000 	.word	0x40021000
 8002954:	080067d4 	.word	0x080067d4

08002958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800295c:	f7ff ffda 	bl	8002914 <HAL_RCC_GetHCLKFreq>
 8002960:	4602      	mov	r2, r0
 8002962:	4b06      	ldr	r3, [pc, #24]	; (800297c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	0adb      	lsrs	r3, r3, #11
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	4904      	ldr	r1, [pc, #16]	; (8002980 <HAL_RCC_GetPCLK2Freq+0x28>)
 800296e:	5ccb      	ldrb	r3, [r1, r3]
 8002970:	f003 031f 	and.w	r3, r3, #31
 8002974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002978:	4618      	mov	r0, r3
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40021000 	.word	0x40021000
 8002980:	080067d4 	.word	0x080067d4

08002984 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800298c:	2300      	movs	r3, #0
 800298e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002990:	4b2a      	ldr	r3, [pc, #168]	; (8002a3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800299c:	f7ff f9ee 	bl	8001d7c <HAL_PWREx_GetVoltageRange>
 80029a0:	6178      	str	r0, [r7, #20]
 80029a2:	e014      	b.n	80029ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029a4:	4b25      	ldr	r3, [pc, #148]	; (8002a3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a8:	4a24      	ldr	r2, [pc, #144]	; (8002a3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ae:	6593      	str	r3, [r2, #88]	; 0x58
 80029b0:	4b22      	ldr	r3, [pc, #136]	; (8002a3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80029bc:	f7ff f9de 	bl	8001d7c <HAL_PWREx_GetVoltageRange>
 80029c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80029c2:	4b1e      	ldr	r3, [pc, #120]	; (8002a3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c6:	4a1d      	ldr	r2, [pc, #116]	; (8002a3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029d4:	d10b      	bne.n	80029ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b80      	cmp	r3, #128	; 0x80
 80029da:	d919      	bls.n	8002a10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2ba0      	cmp	r3, #160	; 0xa0
 80029e0:	d902      	bls.n	80029e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029e2:	2302      	movs	r3, #2
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	e013      	b.n	8002a10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029e8:	2301      	movs	r3, #1
 80029ea:	613b      	str	r3, [r7, #16]
 80029ec:	e010      	b.n	8002a10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b80      	cmp	r3, #128	; 0x80
 80029f2:	d902      	bls.n	80029fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80029f4:	2303      	movs	r3, #3
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	e00a      	b.n	8002a10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b80      	cmp	r3, #128	; 0x80
 80029fe:	d102      	bne.n	8002a06 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a00:	2302      	movs	r3, #2
 8002a02:	613b      	str	r3, [r7, #16]
 8002a04:	e004      	b.n	8002a10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b70      	cmp	r3, #112	; 0x70
 8002a0a:	d101      	bne.n	8002a10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a10:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f023 0207 	bic.w	r2, r3, #7
 8002a18:	4909      	ldr	r1, [pc, #36]	; (8002a40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a20:	4b07      	ldr	r3, [pc, #28]	; (8002a40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d001      	beq.n	8002a32 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	40022000 	.word	0x40022000

08002a44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a50:	2300      	movs	r3, #0
 8002a52:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d041      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a64:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a68:	d02a      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002a6a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a6e:	d824      	bhi.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a74:	d008      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002a76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a7a:	d81e      	bhi.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00a      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002a80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a84:	d010      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a86:	e018      	b.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a88:	4b86      	ldr	r3, [pc, #536]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	4a85      	ldr	r2, [pc, #532]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a92:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a94:	e015      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3304      	adds	r3, #4
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 fabb 	bl	8003018 <RCCEx_PLLSAI1_Config>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002aa6:	e00c      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3320      	adds	r3, #32
 8002aac:	2100      	movs	r1, #0
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 fba6 	bl	8003200 <RCCEx_PLLSAI2_Config>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ab8:	e003      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	74fb      	strb	r3, [r7, #19]
      break;
 8002abe:	e000      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002ac0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ac2:	7cfb      	ldrb	r3, [r7, #19]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10b      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ac8:	4b76      	ldr	r3, [pc, #472]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ace:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ad6:	4973      	ldr	r1, [pc, #460]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ade:	e001      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ae0:	7cfb      	ldrb	r3, [r7, #19]
 8002ae2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d041      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002af4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002af8:	d02a      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002afa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002afe:	d824      	bhi.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b04:	d008      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b0a:	d81e      	bhi.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00a      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002b10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b14:	d010      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b16:	e018      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b18:	4b62      	ldr	r3, [pc, #392]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4a61      	ldr	r2, [pc, #388]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b22:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b24:	e015      	b.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3304      	adds	r3, #4
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 fa73 	bl	8003018 <RCCEx_PLLSAI1_Config>
 8002b32:	4603      	mov	r3, r0
 8002b34:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b36:	e00c      	b.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3320      	adds	r3, #32
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 fb5e 	bl	8003200 <RCCEx_PLLSAI2_Config>
 8002b44:	4603      	mov	r3, r0
 8002b46:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b48:	e003      	b.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	74fb      	strb	r3, [r7, #19]
      break;
 8002b4e:	e000      	b.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002b50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b52:	7cfb      	ldrb	r3, [r7, #19]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10b      	bne.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b58:	4b52      	ldr	r3, [pc, #328]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b66:	494f      	ldr	r1, [pc, #316]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b6e:	e001      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b70:	7cfb      	ldrb	r3, [r7, #19]
 8002b72:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 80a0 	beq.w	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b82:	2300      	movs	r3, #0
 8002b84:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b86:	4b47      	ldr	r3, [pc, #284]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002b96:	2300      	movs	r3, #0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00d      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b9c:	4b41      	ldr	r3, [pc, #260]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba0:	4a40      	ldr	r2, [pc, #256]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ba8:	4b3e      	ldr	r3, [pc, #248]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb0:	60bb      	str	r3, [r7, #8]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bb8:	4b3b      	ldr	r3, [pc, #236]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a3a      	ldr	r2, [pc, #232]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bc4:	f7fe fdb0 	bl	8001728 <HAL_GetTick>
 8002bc8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bca:	e009      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bcc:	f7fe fdac 	bl	8001728 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d902      	bls.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	74fb      	strb	r3, [r7, #19]
        break;
 8002bde:	e005      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002be0:	4b31      	ldr	r3, [pc, #196]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0ef      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002bec:	7cfb      	ldrb	r3, [r7, #19]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d15c      	bne.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bf2:	4b2c      	ldr	r3, [pc, #176]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bfc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d01f      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d019      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c10:	4b24      	ldr	r3, [pc, #144]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c1a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c1c:	4b21      	ldr	r3, [pc, #132]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c22:	4a20      	ldr	r2, [pc, #128]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c32:	4a1c      	ldr	r2, [pc, #112]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c3c:	4a19      	ldr	r2, [pc, #100]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d016      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4e:	f7fe fd6b 	bl	8001728 <HAL_GetTick>
 8002c52:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c54:	e00b      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c56:	f7fe fd67 	bl	8001728 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d902      	bls.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	74fb      	strb	r3, [r7, #19]
            break;
 8002c6c:	e006      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0ec      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002c7c:	7cfb      	ldrb	r3, [r7, #19]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10c      	bne.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c82:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c92:	4904      	ldr	r1, [pc, #16]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c9a:	e009      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c9c:	7cfb      	ldrb	r3, [r7, #19]
 8002c9e:	74bb      	strb	r3, [r7, #18]
 8002ca0:	e006      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002ca2:	bf00      	nop
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cac:	7cfb      	ldrb	r3, [r7, #19]
 8002cae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cb0:	7c7b      	ldrb	r3, [r7, #17]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d105      	bne.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb6:	4b9e      	ldr	r3, [pc, #632]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cba:	4a9d      	ldr	r2, [pc, #628]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cc0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00a      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cce:	4b98      	ldr	r3, [pc, #608]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd4:	f023 0203 	bic.w	r2, r3, #3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cdc:	4994      	ldr	r1, [pc, #592]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00a      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cf0:	4b8f      	ldr	r3, [pc, #572]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf6:	f023 020c 	bic.w	r2, r3, #12
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfe:	498c      	ldr	r1, [pc, #560]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0304 	and.w	r3, r3, #4
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d12:	4b87      	ldr	r3, [pc, #540]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d18:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	4983      	ldr	r1, [pc, #524]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0308 	and.w	r3, r3, #8
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d34:	4b7e      	ldr	r3, [pc, #504]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d42:	497b      	ldr	r1, [pc, #492]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0310 	and.w	r3, r3, #16
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d56:	4b76      	ldr	r3, [pc, #472]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d64:	4972      	ldr	r1, [pc, #456]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0320 	and.w	r3, r3, #32
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00a      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d78:	4b6d      	ldr	r3, [pc, #436]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d86:	496a      	ldr	r1, [pc, #424]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00a      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d9a:	4b65      	ldr	r3, [pc, #404]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da8:	4961      	ldr	r1, [pc, #388]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00a      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002dbc:	4b5c      	ldr	r3, [pc, #368]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dca:	4959      	ldr	r1, [pc, #356]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00a      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dde:	4b54      	ldr	r3, [pc, #336]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dec:	4950      	ldr	r1, [pc, #320]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00a      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e00:	4b4b      	ldr	r3, [pc, #300]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e06:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0e:	4948      	ldr	r1, [pc, #288]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00a      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e22:	4b43      	ldr	r3, [pc, #268]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e30:	493f      	ldr	r1, [pc, #252]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d028      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e44:	4b3a      	ldr	r3, [pc, #232]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e52:	4937      	ldr	r1, [pc, #220]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e62:	d106      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e64:	4b32      	ldr	r3, [pc, #200]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	4a31      	ldr	r2, [pc, #196]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e6e:	60d3      	str	r3, [r2, #12]
 8002e70:	e011      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e7a:	d10c      	bne.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3304      	adds	r3, #4
 8002e80:	2101      	movs	r1, #1
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 f8c8 	bl	8003018 <RCCEx_PLLSAI1_Config>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e8c:	7cfb      	ldrb	r3, [r7, #19]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002e92:	7cfb      	ldrb	r3, [r7, #19]
 8002e94:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d028      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ea2:	4b23      	ldr	r3, [pc, #140]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb0:	491f      	ldr	r1, [pc, #124]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ec0:	d106      	bne.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ec2:	4b1b      	ldr	r3, [pc, #108]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	4a1a      	ldr	r2, [pc, #104]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ecc:	60d3      	str	r3, [r2, #12]
 8002ece:	e011      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3304      	adds	r3, #4
 8002ede:	2101      	movs	r1, #1
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 f899 	bl	8003018 <RCCEx_PLLSAI1_Config>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002eea:	7cfb      	ldrb	r3, [r7, #19]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002ef0:	7cfb      	ldrb	r3, [r7, #19]
 8002ef2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d02b      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f00:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f0e:	4908      	ldr	r1, [pc, #32]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f1e:	d109      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f20:	4b03      	ldr	r3, [pc, #12]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	4a02      	ldr	r2, [pc, #8]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f2a:	60d3      	str	r3, [r2, #12]
 8002f2c:	e014      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002f2e:	bf00      	nop
 8002f30:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f3c:	d10c      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3304      	adds	r3, #4
 8002f42:	2101      	movs	r1, #1
 8002f44:	4618      	mov	r0, r3
 8002f46:	f000 f867 	bl	8003018 <RCCEx_PLLSAI1_Config>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f4e:	7cfb      	ldrb	r3, [r7, #19]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002f54:	7cfb      	ldrb	r3, [r7, #19]
 8002f56:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d02f      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f64:	4b2b      	ldr	r3, [pc, #172]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f72:	4928      	ldr	r1, [pc, #160]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f82:	d10d      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3304      	adds	r3, #4
 8002f88:	2102      	movs	r1, #2
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 f844 	bl	8003018 <RCCEx_PLLSAI1_Config>
 8002f90:	4603      	mov	r3, r0
 8002f92:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f94:	7cfb      	ldrb	r3, [r7, #19]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d014      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f9a:	7cfb      	ldrb	r3, [r7, #19]
 8002f9c:	74bb      	strb	r3, [r7, #18]
 8002f9e:	e011      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fa8:	d10c      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3320      	adds	r3, #32
 8002fae:	2102      	movs	r1, #2
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 f925 	bl	8003200 <RCCEx_PLLSAI2_Config>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fba:	7cfb      	ldrb	r3, [r7, #19]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002fc0:	7cfb      	ldrb	r3, [r7, #19]
 8002fc2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00a      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002fd0:	4b10      	ldr	r3, [pc, #64]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fde:	490d      	ldr	r1, [pc, #52]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00b      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ff2:	4b08      	ldr	r3, [pc, #32]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003002:	4904      	ldr	r1, [pc, #16]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003004:	4313      	orrs	r3, r2
 8003006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800300a:	7cbb      	ldrb	r3, [r7, #18]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3718      	adds	r7, #24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40021000 	.word	0x40021000

08003018 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003026:	4b75      	ldr	r3, [pc, #468]	; (80031fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d018      	beq.n	8003064 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003032:	4b72      	ldr	r3, [pc, #456]	; (80031fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	f003 0203 	and.w	r2, r3, #3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d10d      	bne.n	800305e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
       ||
 8003046:	2b00      	cmp	r3, #0
 8003048:	d009      	beq.n	800305e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800304a:	4b6c      	ldr	r3, [pc, #432]	; (80031fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	091b      	lsrs	r3, r3, #4
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	1c5a      	adds	r2, r3, #1
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
       ||
 800305a:	429a      	cmp	r2, r3
 800305c:	d047      	beq.n	80030ee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	73fb      	strb	r3, [r7, #15]
 8003062:	e044      	b.n	80030ee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2b03      	cmp	r3, #3
 800306a:	d018      	beq.n	800309e <RCCEx_PLLSAI1_Config+0x86>
 800306c:	2b03      	cmp	r3, #3
 800306e:	d825      	bhi.n	80030bc <RCCEx_PLLSAI1_Config+0xa4>
 8003070:	2b01      	cmp	r3, #1
 8003072:	d002      	beq.n	800307a <RCCEx_PLLSAI1_Config+0x62>
 8003074:	2b02      	cmp	r3, #2
 8003076:	d009      	beq.n	800308c <RCCEx_PLLSAI1_Config+0x74>
 8003078:	e020      	b.n	80030bc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800307a:	4b60      	ldr	r3, [pc, #384]	; (80031fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d11d      	bne.n	80030c2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800308a:	e01a      	b.n	80030c2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800308c:	4b5b      	ldr	r3, [pc, #364]	; (80031fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003094:	2b00      	cmp	r3, #0
 8003096:	d116      	bne.n	80030c6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800309c:	e013      	b.n	80030c6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800309e:	4b57      	ldr	r3, [pc, #348]	; (80031fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10f      	bne.n	80030ca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030aa:	4b54      	ldr	r3, [pc, #336]	; (80031fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d109      	bne.n	80030ca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030ba:	e006      	b.n	80030ca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
      break;
 80030c0:	e004      	b.n	80030cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030c2:	bf00      	nop
 80030c4:	e002      	b.n	80030cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030c6:	bf00      	nop
 80030c8:	e000      	b.n	80030cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10d      	bne.n	80030ee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030d2:	4b4a      	ldr	r3, [pc, #296]	; (80031fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6819      	ldr	r1, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	430b      	orrs	r3, r1
 80030e8:	4944      	ldr	r1, [pc, #272]	; (80031fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d17d      	bne.n	80031f0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80030f4:	4b41      	ldr	r3, [pc, #260]	; (80031fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a40      	ldr	r2, [pc, #256]	; (80031fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80030fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003100:	f7fe fb12 	bl	8001728 <HAL_GetTick>
 8003104:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003106:	e009      	b.n	800311c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003108:	f7fe fb0e 	bl	8001728 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d902      	bls.n	800311c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	73fb      	strb	r3, [r7, #15]
        break;
 800311a:	e005      	b.n	8003128 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800311c:	4b37      	ldr	r3, [pc, #220]	; (80031fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1ef      	bne.n	8003108 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003128:	7bfb      	ldrb	r3, [r7, #15]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d160      	bne.n	80031f0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d111      	bne.n	8003158 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003134:	4b31      	ldr	r3, [pc, #196]	; (80031fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800313c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6892      	ldr	r2, [r2, #8]
 8003144:	0211      	lsls	r1, r2, #8
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	68d2      	ldr	r2, [r2, #12]
 800314a:	0912      	lsrs	r2, r2, #4
 800314c:	0452      	lsls	r2, r2, #17
 800314e:	430a      	orrs	r2, r1
 8003150:	492a      	ldr	r1, [pc, #168]	; (80031fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003152:	4313      	orrs	r3, r2
 8003154:	610b      	str	r3, [r1, #16]
 8003156:	e027      	b.n	80031a8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d112      	bne.n	8003184 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800315e:	4b27      	ldr	r3, [pc, #156]	; (80031fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003166:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6892      	ldr	r2, [r2, #8]
 800316e:	0211      	lsls	r1, r2, #8
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6912      	ldr	r2, [r2, #16]
 8003174:	0852      	lsrs	r2, r2, #1
 8003176:	3a01      	subs	r2, #1
 8003178:	0552      	lsls	r2, r2, #21
 800317a:	430a      	orrs	r2, r1
 800317c:	491f      	ldr	r1, [pc, #124]	; (80031fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800317e:	4313      	orrs	r3, r2
 8003180:	610b      	str	r3, [r1, #16]
 8003182:	e011      	b.n	80031a8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003184:	4b1d      	ldr	r3, [pc, #116]	; (80031fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800318c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6892      	ldr	r2, [r2, #8]
 8003194:	0211      	lsls	r1, r2, #8
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6952      	ldr	r2, [r2, #20]
 800319a:	0852      	lsrs	r2, r2, #1
 800319c:	3a01      	subs	r2, #1
 800319e:	0652      	lsls	r2, r2, #25
 80031a0:	430a      	orrs	r2, r1
 80031a2:	4916      	ldr	r1, [pc, #88]	; (80031fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80031a8:	4b14      	ldr	r3, [pc, #80]	; (80031fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a13      	ldr	r2, [pc, #76]	; (80031fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b4:	f7fe fab8 	bl	8001728 <HAL_GetTick>
 80031b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031ba:	e009      	b.n	80031d0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031bc:	f7fe fab4 	bl	8001728 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d902      	bls.n	80031d0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	73fb      	strb	r3, [r7, #15]
          break;
 80031ce:	e005      	b.n	80031dc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031d0:	4b0a      	ldr	r3, [pc, #40]	; (80031fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0ef      	beq.n	80031bc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d106      	bne.n	80031f0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80031e2:	4b06      	ldr	r3, [pc, #24]	; (80031fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80031e4:	691a      	ldr	r2, [r3, #16]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	4904      	ldr	r1, [pc, #16]	; (80031fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40021000 	.word	0x40021000

08003200 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800320e:	4b6a      	ldr	r3, [pc, #424]	; (80033b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d018      	beq.n	800324c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800321a:	4b67      	ldr	r3, [pc, #412]	; (80033b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f003 0203 	and.w	r2, r3, #3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d10d      	bne.n	8003246 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
       ||
 800322e:	2b00      	cmp	r3, #0
 8003230:	d009      	beq.n	8003246 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003232:	4b61      	ldr	r3, [pc, #388]	; (80033b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	091b      	lsrs	r3, r3, #4
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	1c5a      	adds	r2, r3, #1
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
       ||
 8003242:	429a      	cmp	r2, r3
 8003244:	d047      	beq.n	80032d6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	73fb      	strb	r3, [r7, #15]
 800324a:	e044      	b.n	80032d6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b03      	cmp	r3, #3
 8003252:	d018      	beq.n	8003286 <RCCEx_PLLSAI2_Config+0x86>
 8003254:	2b03      	cmp	r3, #3
 8003256:	d825      	bhi.n	80032a4 <RCCEx_PLLSAI2_Config+0xa4>
 8003258:	2b01      	cmp	r3, #1
 800325a:	d002      	beq.n	8003262 <RCCEx_PLLSAI2_Config+0x62>
 800325c:	2b02      	cmp	r3, #2
 800325e:	d009      	beq.n	8003274 <RCCEx_PLLSAI2_Config+0x74>
 8003260:	e020      	b.n	80032a4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003262:	4b55      	ldr	r3, [pc, #340]	; (80033b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d11d      	bne.n	80032aa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003272:	e01a      	b.n	80032aa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003274:	4b50      	ldr	r3, [pc, #320]	; (80033b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800327c:	2b00      	cmp	r3, #0
 800327e:	d116      	bne.n	80032ae <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003284:	e013      	b.n	80032ae <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003286:	4b4c      	ldr	r3, [pc, #304]	; (80033b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10f      	bne.n	80032b2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003292:	4b49      	ldr	r3, [pc, #292]	; (80033b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d109      	bne.n	80032b2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032a2:	e006      	b.n	80032b2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	73fb      	strb	r3, [r7, #15]
      break;
 80032a8:	e004      	b.n	80032b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032aa:	bf00      	nop
 80032ac:	e002      	b.n	80032b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032ae:	bf00      	nop
 80032b0:	e000      	b.n	80032b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10d      	bne.n	80032d6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032ba:	4b3f      	ldr	r3, [pc, #252]	; (80033b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6819      	ldr	r1, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	011b      	lsls	r3, r3, #4
 80032ce:	430b      	orrs	r3, r1
 80032d0:	4939      	ldr	r1, [pc, #228]	; (80033b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032d6:	7bfb      	ldrb	r3, [r7, #15]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d167      	bne.n	80033ac <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80032dc:	4b36      	ldr	r3, [pc, #216]	; (80033b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a35      	ldr	r2, [pc, #212]	; (80033b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032e8:	f7fe fa1e 	bl	8001728 <HAL_GetTick>
 80032ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032ee:	e009      	b.n	8003304 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032f0:	f7fe fa1a 	bl	8001728 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d902      	bls.n	8003304 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	73fb      	strb	r3, [r7, #15]
        break;
 8003302:	e005      	b.n	8003310 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003304:	4b2c      	ldr	r3, [pc, #176]	; (80033b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1ef      	bne.n	80032f0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003310:	7bfb      	ldrb	r3, [r7, #15]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d14a      	bne.n	80033ac <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d111      	bne.n	8003340 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800331c:	4b26      	ldr	r3, [pc, #152]	; (80033b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6892      	ldr	r2, [r2, #8]
 800332c:	0211      	lsls	r1, r2, #8
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	68d2      	ldr	r2, [r2, #12]
 8003332:	0912      	lsrs	r2, r2, #4
 8003334:	0452      	lsls	r2, r2, #17
 8003336:	430a      	orrs	r2, r1
 8003338:	491f      	ldr	r1, [pc, #124]	; (80033b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800333a:	4313      	orrs	r3, r2
 800333c:	614b      	str	r3, [r1, #20]
 800333e:	e011      	b.n	8003364 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003340:	4b1d      	ldr	r3, [pc, #116]	; (80033b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003348:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6892      	ldr	r2, [r2, #8]
 8003350:	0211      	lsls	r1, r2, #8
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6912      	ldr	r2, [r2, #16]
 8003356:	0852      	lsrs	r2, r2, #1
 8003358:	3a01      	subs	r2, #1
 800335a:	0652      	lsls	r2, r2, #25
 800335c:	430a      	orrs	r2, r1
 800335e:	4916      	ldr	r1, [pc, #88]	; (80033b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003360:	4313      	orrs	r3, r2
 8003362:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003364:	4b14      	ldr	r3, [pc, #80]	; (80033b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a13      	ldr	r2, [pc, #76]	; (80033b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800336a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800336e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003370:	f7fe f9da 	bl	8001728 <HAL_GetTick>
 8003374:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003376:	e009      	b.n	800338c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003378:	f7fe f9d6 	bl	8001728 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d902      	bls.n	800338c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	73fb      	strb	r3, [r7, #15]
          break;
 800338a:	e005      	b.n	8003398 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800338c:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0ef      	beq.n	8003378 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003398:	7bfb      	ldrb	r3, [r7, #15]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d106      	bne.n	80033ac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800339e:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033a0:	695a      	ldr	r2, [r3, #20]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	4904      	ldr	r1, [pc, #16]	; (80033b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80033ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	40021000 	.word	0x40021000

080033bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e049      	b.n	8003462 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d106      	bne.n	80033e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7fd ff22 	bl	800122c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2202      	movs	r2, #2
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3304      	adds	r3, #4
 80033f8:	4619      	mov	r1, r3
 80033fa:	4610      	mov	r0, r2
 80033fc:	f000 fd86 	bl	8003f0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
	...

0800346c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b01      	cmp	r3, #1
 800347e:	d001      	beq.n	8003484 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e047      	b.n	8003514 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a23      	ldr	r2, [pc, #140]	; (8003520 <HAL_TIM_Base_Start+0xb4>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d01d      	beq.n	80034d2 <HAL_TIM_Base_Start+0x66>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800349e:	d018      	beq.n	80034d2 <HAL_TIM_Base_Start+0x66>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a1f      	ldr	r2, [pc, #124]	; (8003524 <HAL_TIM_Base_Start+0xb8>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d013      	beq.n	80034d2 <HAL_TIM_Base_Start+0x66>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a1e      	ldr	r2, [pc, #120]	; (8003528 <HAL_TIM_Base_Start+0xbc>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d00e      	beq.n	80034d2 <HAL_TIM_Base_Start+0x66>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a1c      	ldr	r2, [pc, #112]	; (800352c <HAL_TIM_Base_Start+0xc0>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d009      	beq.n	80034d2 <HAL_TIM_Base_Start+0x66>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a1b      	ldr	r2, [pc, #108]	; (8003530 <HAL_TIM_Base_Start+0xc4>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d004      	beq.n	80034d2 <HAL_TIM_Base_Start+0x66>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a19      	ldr	r2, [pc, #100]	; (8003534 <HAL_TIM_Base_Start+0xc8>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d115      	bne.n	80034fe <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	4b17      	ldr	r3, [pc, #92]	; (8003538 <HAL_TIM_Base_Start+0xcc>)
 80034da:	4013      	ands	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2b06      	cmp	r3, #6
 80034e2:	d015      	beq.n	8003510 <HAL_TIM_Base_Start+0xa4>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ea:	d011      	beq.n	8003510 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0201 	orr.w	r2, r2, #1
 80034fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034fc:	e008      	b.n	8003510 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f042 0201 	orr.w	r2, r2, #1
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	e000      	b.n	8003512 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003510:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	40012c00 	.word	0x40012c00
 8003524:	40000400 	.word	0x40000400
 8003528:	40000800 	.word	0x40000800
 800352c:	40000c00 	.word	0x40000c00
 8003530:	40013400 	.word	0x40013400
 8003534:	40014000 	.word	0x40014000
 8003538:	00010007 	.word	0x00010007

0800353c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6a1a      	ldr	r2, [r3, #32]
 800354a:	f241 1311 	movw	r3, #4369	; 0x1111
 800354e:	4013      	ands	r3, r2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10f      	bne.n	8003574 <HAL_TIM_Base_Stop+0x38>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6a1a      	ldr	r2, [r3, #32]
 800355a:	f240 4344 	movw	r3, #1092	; 0x444
 800355e:	4013      	ands	r3, r2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d107      	bne.n	8003574 <HAL_TIM_Base_Stop+0x38>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0201 	bic.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
	...

0800358c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b01      	cmp	r3, #1
 800359e:	d001      	beq.n	80035a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e04f      	b.n	8003644 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68da      	ldr	r2, [r3, #12]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a23      	ldr	r2, [pc, #140]	; (8003650 <HAL_TIM_Base_Start_IT+0xc4>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d01d      	beq.n	8003602 <HAL_TIM_Base_Start_IT+0x76>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ce:	d018      	beq.n	8003602 <HAL_TIM_Base_Start_IT+0x76>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a1f      	ldr	r2, [pc, #124]	; (8003654 <HAL_TIM_Base_Start_IT+0xc8>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d013      	beq.n	8003602 <HAL_TIM_Base_Start_IT+0x76>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a1e      	ldr	r2, [pc, #120]	; (8003658 <HAL_TIM_Base_Start_IT+0xcc>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d00e      	beq.n	8003602 <HAL_TIM_Base_Start_IT+0x76>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a1c      	ldr	r2, [pc, #112]	; (800365c <HAL_TIM_Base_Start_IT+0xd0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d009      	beq.n	8003602 <HAL_TIM_Base_Start_IT+0x76>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a1b      	ldr	r2, [pc, #108]	; (8003660 <HAL_TIM_Base_Start_IT+0xd4>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d004      	beq.n	8003602 <HAL_TIM_Base_Start_IT+0x76>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a19      	ldr	r2, [pc, #100]	; (8003664 <HAL_TIM_Base_Start_IT+0xd8>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d115      	bne.n	800362e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	4b17      	ldr	r3, [pc, #92]	; (8003668 <HAL_TIM_Base_Start_IT+0xdc>)
 800360a:	4013      	ands	r3, r2
 800360c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2b06      	cmp	r3, #6
 8003612:	d015      	beq.n	8003640 <HAL_TIM_Base_Start_IT+0xb4>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800361a:	d011      	beq.n	8003640 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 0201 	orr.w	r2, r2, #1
 800362a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800362c:	e008      	b.n	8003640 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f042 0201 	orr.w	r2, r2, #1
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	e000      	b.n	8003642 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003640:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	40012c00 	.word	0x40012c00
 8003654:	40000400 	.word	0x40000400
 8003658:	40000800 	.word	0x40000800
 800365c:	40000c00 	.word	0x40000c00
 8003660:	40013400 	.word	0x40013400
 8003664:	40014000 	.word	0x40014000
 8003668:	00010007 	.word	0x00010007

0800366c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e049      	b.n	8003712 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d106      	bne.n	8003698 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7fd fdaa 	bl	80011ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3304      	adds	r3, #4
 80036a8:	4619      	mov	r1, r3
 80036aa:	4610      	mov	r0, r2
 80036ac:	f000 fc2e 	bl	8003f0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
	...

0800371c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d109      	bne.n	8003740 <HAL_TIM_PWM_Start+0x24>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b01      	cmp	r3, #1
 8003736:	bf14      	ite	ne
 8003738:	2301      	movne	r3, #1
 800373a:	2300      	moveq	r3, #0
 800373c:	b2db      	uxtb	r3, r3
 800373e:	e03c      	b.n	80037ba <HAL_TIM_PWM_Start+0x9e>
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	2b04      	cmp	r3, #4
 8003744:	d109      	bne.n	800375a <HAL_TIM_PWM_Start+0x3e>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b01      	cmp	r3, #1
 8003750:	bf14      	ite	ne
 8003752:	2301      	movne	r3, #1
 8003754:	2300      	moveq	r3, #0
 8003756:	b2db      	uxtb	r3, r3
 8003758:	e02f      	b.n	80037ba <HAL_TIM_PWM_Start+0x9e>
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2b08      	cmp	r3, #8
 800375e:	d109      	bne.n	8003774 <HAL_TIM_PWM_Start+0x58>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b01      	cmp	r3, #1
 800376a:	bf14      	ite	ne
 800376c:	2301      	movne	r3, #1
 800376e:	2300      	moveq	r3, #0
 8003770:	b2db      	uxtb	r3, r3
 8003772:	e022      	b.n	80037ba <HAL_TIM_PWM_Start+0x9e>
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	2b0c      	cmp	r3, #12
 8003778:	d109      	bne.n	800378e <HAL_TIM_PWM_Start+0x72>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b01      	cmp	r3, #1
 8003784:	bf14      	ite	ne
 8003786:	2301      	movne	r3, #1
 8003788:	2300      	moveq	r3, #0
 800378a:	b2db      	uxtb	r3, r3
 800378c:	e015      	b.n	80037ba <HAL_TIM_PWM_Start+0x9e>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b10      	cmp	r3, #16
 8003792:	d109      	bne.n	80037a8 <HAL_TIM_PWM_Start+0x8c>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b01      	cmp	r3, #1
 800379e:	bf14      	ite	ne
 80037a0:	2301      	movne	r3, #1
 80037a2:	2300      	moveq	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	e008      	b.n	80037ba <HAL_TIM_PWM_Start+0x9e>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	bf14      	ite	ne
 80037b4:	2301      	movne	r3, #1
 80037b6:	2300      	moveq	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e09c      	b.n	80038fc <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d104      	bne.n	80037d2 <HAL_TIM_PWM_Start+0xb6>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037d0:	e023      	b.n	800381a <HAL_TIM_PWM_Start+0xfe>
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b04      	cmp	r3, #4
 80037d6:	d104      	bne.n	80037e2 <HAL_TIM_PWM_Start+0xc6>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037e0:	e01b      	b.n	800381a <HAL_TIM_PWM_Start+0xfe>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d104      	bne.n	80037f2 <HAL_TIM_PWM_Start+0xd6>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2202      	movs	r2, #2
 80037ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037f0:	e013      	b.n	800381a <HAL_TIM_PWM_Start+0xfe>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b0c      	cmp	r3, #12
 80037f6:	d104      	bne.n	8003802 <HAL_TIM_PWM_Start+0xe6>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003800:	e00b      	b.n	800381a <HAL_TIM_PWM_Start+0xfe>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2b10      	cmp	r3, #16
 8003806:	d104      	bne.n	8003812 <HAL_TIM_PWM_Start+0xf6>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003810:	e003      	b.n	800381a <HAL_TIM_PWM_Start+0xfe>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2202      	movs	r2, #2
 8003816:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2201      	movs	r2, #1
 8003820:	6839      	ldr	r1, [r7, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f000 fee2 	bl	80045ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a35      	ldr	r2, [pc, #212]	; (8003904 <HAL_TIM_PWM_Start+0x1e8>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d013      	beq.n	800385a <HAL_TIM_PWM_Start+0x13e>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a34      	ldr	r2, [pc, #208]	; (8003908 <HAL_TIM_PWM_Start+0x1ec>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d00e      	beq.n	800385a <HAL_TIM_PWM_Start+0x13e>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a32      	ldr	r2, [pc, #200]	; (800390c <HAL_TIM_PWM_Start+0x1f0>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d009      	beq.n	800385a <HAL_TIM_PWM_Start+0x13e>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a31      	ldr	r2, [pc, #196]	; (8003910 <HAL_TIM_PWM_Start+0x1f4>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d004      	beq.n	800385a <HAL_TIM_PWM_Start+0x13e>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a2f      	ldr	r2, [pc, #188]	; (8003914 <HAL_TIM_PWM_Start+0x1f8>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d101      	bne.n	800385e <HAL_TIM_PWM_Start+0x142>
 800385a:	2301      	movs	r3, #1
 800385c:	e000      	b.n	8003860 <HAL_TIM_PWM_Start+0x144>
 800385e:	2300      	movs	r3, #0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d007      	beq.n	8003874 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003872:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a22      	ldr	r2, [pc, #136]	; (8003904 <HAL_TIM_PWM_Start+0x1e8>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d01d      	beq.n	80038ba <HAL_TIM_PWM_Start+0x19e>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003886:	d018      	beq.n	80038ba <HAL_TIM_PWM_Start+0x19e>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a22      	ldr	r2, [pc, #136]	; (8003918 <HAL_TIM_PWM_Start+0x1fc>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d013      	beq.n	80038ba <HAL_TIM_PWM_Start+0x19e>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a21      	ldr	r2, [pc, #132]	; (800391c <HAL_TIM_PWM_Start+0x200>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d00e      	beq.n	80038ba <HAL_TIM_PWM_Start+0x19e>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a1f      	ldr	r2, [pc, #124]	; (8003920 <HAL_TIM_PWM_Start+0x204>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d009      	beq.n	80038ba <HAL_TIM_PWM_Start+0x19e>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a17      	ldr	r2, [pc, #92]	; (8003908 <HAL_TIM_PWM_Start+0x1ec>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d004      	beq.n	80038ba <HAL_TIM_PWM_Start+0x19e>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a15      	ldr	r2, [pc, #84]	; (800390c <HAL_TIM_PWM_Start+0x1f0>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d115      	bne.n	80038e6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	4b18      	ldr	r3, [pc, #96]	; (8003924 <HAL_TIM_PWM_Start+0x208>)
 80038c2:	4013      	ands	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2b06      	cmp	r3, #6
 80038ca:	d015      	beq.n	80038f8 <HAL_TIM_PWM_Start+0x1dc>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d2:	d011      	beq.n	80038f8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0201 	orr.w	r2, r2, #1
 80038e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e4:	e008      	b.n	80038f8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f042 0201 	orr.w	r2, r2, #1
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	e000      	b.n	80038fa <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	40012c00 	.word	0x40012c00
 8003908:	40013400 	.word	0x40013400
 800390c:	40014000 	.word	0x40014000
 8003910:	40014400 	.word	0x40014400
 8003914:	40014800 	.word	0x40014800
 8003918:	40000400 	.word	0x40000400
 800391c:	40000800 	.word	0x40000800
 8003920:	40000c00 	.word	0x40000c00
 8003924:	00010007 	.word	0x00010007

08003928 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2200      	movs	r2, #0
 8003938:	6839      	ldr	r1, [r7, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f000 fe56 	bl	80045ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a3e      	ldr	r2, [pc, #248]	; (8003a40 <HAL_TIM_PWM_Stop+0x118>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d013      	beq.n	8003972 <HAL_TIM_PWM_Stop+0x4a>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a3d      	ldr	r2, [pc, #244]	; (8003a44 <HAL_TIM_PWM_Stop+0x11c>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d00e      	beq.n	8003972 <HAL_TIM_PWM_Stop+0x4a>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a3b      	ldr	r2, [pc, #236]	; (8003a48 <HAL_TIM_PWM_Stop+0x120>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d009      	beq.n	8003972 <HAL_TIM_PWM_Stop+0x4a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a3a      	ldr	r2, [pc, #232]	; (8003a4c <HAL_TIM_PWM_Stop+0x124>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d004      	beq.n	8003972 <HAL_TIM_PWM_Stop+0x4a>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a38      	ldr	r2, [pc, #224]	; (8003a50 <HAL_TIM_PWM_Stop+0x128>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d101      	bne.n	8003976 <HAL_TIM_PWM_Stop+0x4e>
 8003972:	2301      	movs	r3, #1
 8003974:	e000      	b.n	8003978 <HAL_TIM_PWM_Stop+0x50>
 8003976:	2300      	movs	r3, #0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d017      	beq.n	80039ac <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6a1a      	ldr	r2, [r3, #32]
 8003982:	f241 1311 	movw	r3, #4369	; 0x1111
 8003986:	4013      	ands	r3, r2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10f      	bne.n	80039ac <HAL_TIM_PWM_Stop+0x84>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6a1a      	ldr	r2, [r3, #32]
 8003992:	f240 4344 	movw	r3, #1092	; 0x444
 8003996:	4013      	ands	r3, r2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d107      	bne.n	80039ac <HAL_TIM_PWM_Stop+0x84>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039aa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6a1a      	ldr	r2, [r3, #32]
 80039b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80039b6:	4013      	ands	r3, r2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10f      	bne.n	80039dc <HAL_TIM_PWM_Stop+0xb4>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6a1a      	ldr	r2, [r3, #32]
 80039c2:	f240 4344 	movw	r3, #1092	; 0x444
 80039c6:	4013      	ands	r3, r2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d107      	bne.n	80039dc <HAL_TIM_PWM_Stop+0xb4>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0201 	bic.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d104      	bne.n	80039ec <HAL_TIM_PWM_Stop+0xc4>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039ea:	e023      	b.n	8003a34 <HAL_TIM_PWM_Stop+0x10c>
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d104      	bne.n	80039fc <HAL_TIM_PWM_Stop+0xd4>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039fa:	e01b      	b.n	8003a34 <HAL_TIM_PWM_Stop+0x10c>
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	2b08      	cmp	r3, #8
 8003a00:	d104      	bne.n	8003a0c <HAL_TIM_PWM_Stop+0xe4>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a0a:	e013      	b.n	8003a34 <HAL_TIM_PWM_Stop+0x10c>
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	2b0c      	cmp	r3, #12
 8003a10:	d104      	bne.n	8003a1c <HAL_TIM_PWM_Stop+0xf4>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a1a:	e00b      	b.n	8003a34 <HAL_TIM_PWM_Stop+0x10c>
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	2b10      	cmp	r3, #16
 8003a20:	d104      	bne.n	8003a2c <HAL_TIM_PWM_Stop+0x104>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a2a:	e003      	b.n	8003a34 <HAL_TIM_PWM_Stop+0x10c>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40012c00 	.word	0x40012c00
 8003a44:	40013400 	.word	0x40013400
 8003a48:	40014000 	.word	0x40014000
 8003a4c:	40014400 	.word	0x40014400
 8003a50:	40014800 	.word	0x40014800

08003a54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d122      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d11b      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f06f 0202 	mvn.w	r2, #2
 8003a80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 fa1a 	bl	8003ed0 <HAL_TIM_IC_CaptureCallback>
 8003a9c:	e005      	b.n	8003aaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 fa0c 	bl	8003ebc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fa1d 	bl	8003ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f003 0304 	and.w	r3, r3, #4
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	d122      	bne.n	8003b04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	d11b      	bne.n	8003b04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f06f 0204 	mvn.w	r2, #4
 8003ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2202      	movs	r2, #2
 8003ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f9f0 	bl	8003ed0 <HAL_TIM_IC_CaptureCallback>
 8003af0:	e005      	b.n	8003afe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f9e2 	bl	8003ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f9f3 	bl	8003ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d122      	bne.n	8003b58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f003 0308 	and.w	r3, r3, #8
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	d11b      	bne.n	8003b58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f06f 0208 	mvn.w	r2, #8
 8003b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2204      	movs	r2, #4
 8003b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f9c6 	bl	8003ed0 <HAL_TIM_IC_CaptureCallback>
 8003b44:	e005      	b.n	8003b52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f9b8 	bl	8003ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f9c9 	bl	8003ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f003 0310 	and.w	r3, r3, #16
 8003b62:	2b10      	cmp	r3, #16
 8003b64:	d122      	bne.n	8003bac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f003 0310 	and.w	r3, r3, #16
 8003b70:	2b10      	cmp	r3, #16
 8003b72:	d11b      	bne.n	8003bac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f06f 0210 	mvn.w	r2, #16
 8003b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2208      	movs	r2, #8
 8003b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f99c 	bl	8003ed0 <HAL_TIM_IC_CaptureCallback>
 8003b98:	e005      	b.n	8003ba6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f98e 	bl	8003ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 f99f 	bl	8003ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d10e      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d107      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f06f 0201 	mvn.w	r2, #1
 8003bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7fd f870 	bl	8000cb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be2:	2b80      	cmp	r3, #128	; 0x80
 8003be4:	d10e      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf0:	2b80      	cmp	r3, #128	; 0x80
 8003bf2:	d107      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 fdac 	bl	800475c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c12:	d10e      	bne.n	8003c32 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1e:	2b80      	cmp	r3, #128	; 0x80
 8003c20:	d107      	bne.n	8003c32 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 fd9f 	bl	8004770 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3c:	2b40      	cmp	r3, #64	; 0x40
 8003c3e:	d10e      	bne.n	8003c5e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4a:	2b40      	cmp	r3, #64	; 0x40
 8003c4c:	d107      	bne.n	8003c5e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 f94d 	bl	8003ef8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	f003 0320 	and.w	r3, r3, #32
 8003c68:	2b20      	cmp	r3, #32
 8003c6a:	d10e      	bne.n	8003c8a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f003 0320 	and.w	r3, r3, #32
 8003c76:	2b20      	cmp	r3, #32
 8003c78:	d107      	bne.n	8003c8a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f06f 0220 	mvn.w	r2, #32
 8003c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 fd5f 	bl	8004748 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c8a:	bf00      	nop
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
	...

08003c94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d101      	bne.n	8003cb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	e0ff      	b.n	8003eb2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b14      	cmp	r3, #20
 8003cbe:	f200 80f0 	bhi.w	8003ea2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003cc2:	a201      	add	r2, pc, #4	; (adr r2, 8003cc8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc8:	08003d1d 	.word	0x08003d1d
 8003ccc:	08003ea3 	.word	0x08003ea3
 8003cd0:	08003ea3 	.word	0x08003ea3
 8003cd4:	08003ea3 	.word	0x08003ea3
 8003cd8:	08003d5d 	.word	0x08003d5d
 8003cdc:	08003ea3 	.word	0x08003ea3
 8003ce0:	08003ea3 	.word	0x08003ea3
 8003ce4:	08003ea3 	.word	0x08003ea3
 8003ce8:	08003d9f 	.word	0x08003d9f
 8003cec:	08003ea3 	.word	0x08003ea3
 8003cf0:	08003ea3 	.word	0x08003ea3
 8003cf4:	08003ea3 	.word	0x08003ea3
 8003cf8:	08003ddf 	.word	0x08003ddf
 8003cfc:	08003ea3 	.word	0x08003ea3
 8003d00:	08003ea3 	.word	0x08003ea3
 8003d04:	08003ea3 	.word	0x08003ea3
 8003d08:	08003e21 	.word	0x08003e21
 8003d0c:	08003ea3 	.word	0x08003ea3
 8003d10:	08003ea3 	.word	0x08003ea3
 8003d14:	08003ea3 	.word	0x08003ea3
 8003d18:	08003e61 	.word	0x08003e61
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68b9      	ldr	r1, [r7, #8]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 f98c 	bl	8004040 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	699a      	ldr	r2, [r3, #24]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0208 	orr.w	r2, r2, #8
 8003d36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699a      	ldr	r2, [r3, #24]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0204 	bic.w	r2, r2, #4
 8003d46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6999      	ldr	r1, [r3, #24]
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	691a      	ldr	r2, [r3, #16]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	619a      	str	r2, [r3, #24]
      break;
 8003d5a:	e0a5      	b.n	8003ea8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68b9      	ldr	r1, [r7, #8]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 f9fc 	bl	8004160 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699a      	ldr	r2, [r3, #24]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699a      	ldr	r2, [r3, #24]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6999      	ldr	r1, [r3, #24]
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	021a      	lsls	r2, r3, #8
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	619a      	str	r2, [r3, #24]
      break;
 8003d9c:	e084      	b.n	8003ea8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68b9      	ldr	r1, [r7, #8]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 fa65 	bl	8004274 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	69da      	ldr	r2, [r3, #28]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f042 0208 	orr.w	r2, r2, #8
 8003db8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69da      	ldr	r2, [r3, #28]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0204 	bic.w	r2, r2, #4
 8003dc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69d9      	ldr	r1, [r3, #28]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	61da      	str	r2, [r3, #28]
      break;
 8003ddc:	e064      	b.n	8003ea8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68b9      	ldr	r1, [r7, #8]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 facd 	bl	8004384 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	69da      	ldr	r2, [r3, #28]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003df8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69da      	ldr	r2, [r3, #28]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69d9      	ldr	r1, [r3, #28]
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	021a      	lsls	r2, r3, #8
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	61da      	str	r2, [r3, #28]
      break;
 8003e1e:	e043      	b.n	8003ea8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68b9      	ldr	r1, [r7, #8]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 fb16 	bl	8004458 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0208 	orr.w	r2, r2, #8
 8003e3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0204 	bic.w	r2, r2, #4
 8003e4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	691a      	ldr	r2, [r3, #16]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e5e:	e023      	b.n	8003ea8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68b9      	ldr	r1, [r7, #8]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 fb5a 	bl	8004520 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	021a      	lsls	r2, r3, #8
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003ea0:	e002      	b.n	8003ea8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	75fb      	strb	r3, [r7, #23]
      break;
 8003ea6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3718      	adds	r7, #24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop

08003ebc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a40      	ldr	r2, [pc, #256]	; (8004020 <TIM_Base_SetConfig+0x114>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d013      	beq.n	8003f4c <TIM_Base_SetConfig+0x40>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f2a:	d00f      	beq.n	8003f4c <TIM_Base_SetConfig+0x40>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a3d      	ldr	r2, [pc, #244]	; (8004024 <TIM_Base_SetConfig+0x118>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d00b      	beq.n	8003f4c <TIM_Base_SetConfig+0x40>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a3c      	ldr	r2, [pc, #240]	; (8004028 <TIM_Base_SetConfig+0x11c>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d007      	beq.n	8003f4c <TIM_Base_SetConfig+0x40>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a3b      	ldr	r2, [pc, #236]	; (800402c <TIM_Base_SetConfig+0x120>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d003      	beq.n	8003f4c <TIM_Base_SetConfig+0x40>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a3a      	ldr	r2, [pc, #232]	; (8004030 <TIM_Base_SetConfig+0x124>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d108      	bne.n	8003f5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a2f      	ldr	r2, [pc, #188]	; (8004020 <TIM_Base_SetConfig+0x114>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d01f      	beq.n	8003fa6 <TIM_Base_SetConfig+0x9a>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f6c:	d01b      	beq.n	8003fa6 <TIM_Base_SetConfig+0x9a>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a2c      	ldr	r2, [pc, #176]	; (8004024 <TIM_Base_SetConfig+0x118>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d017      	beq.n	8003fa6 <TIM_Base_SetConfig+0x9a>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a2b      	ldr	r2, [pc, #172]	; (8004028 <TIM_Base_SetConfig+0x11c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d013      	beq.n	8003fa6 <TIM_Base_SetConfig+0x9a>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a2a      	ldr	r2, [pc, #168]	; (800402c <TIM_Base_SetConfig+0x120>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d00f      	beq.n	8003fa6 <TIM_Base_SetConfig+0x9a>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a29      	ldr	r2, [pc, #164]	; (8004030 <TIM_Base_SetConfig+0x124>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d00b      	beq.n	8003fa6 <TIM_Base_SetConfig+0x9a>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a28      	ldr	r2, [pc, #160]	; (8004034 <TIM_Base_SetConfig+0x128>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d007      	beq.n	8003fa6 <TIM_Base_SetConfig+0x9a>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a27      	ldr	r2, [pc, #156]	; (8004038 <TIM_Base_SetConfig+0x12c>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d003      	beq.n	8003fa6 <TIM_Base_SetConfig+0x9a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a26      	ldr	r2, [pc, #152]	; (800403c <TIM_Base_SetConfig+0x130>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d108      	bne.n	8003fb8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a10      	ldr	r2, [pc, #64]	; (8004020 <TIM_Base_SetConfig+0x114>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d00f      	beq.n	8004004 <TIM_Base_SetConfig+0xf8>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a12      	ldr	r2, [pc, #72]	; (8004030 <TIM_Base_SetConfig+0x124>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d00b      	beq.n	8004004 <TIM_Base_SetConfig+0xf8>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a11      	ldr	r2, [pc, #68]	; (8004034 <TIM_Base_SetConfig+0x128>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d007      	beq.n	8004004 <TIM_Base_SetConfig+0xf8>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a10      	ldr	r2, [pc, #64]	; (8004038 <TIM_Base_SetConfig+0x12c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d003      	beq.n	8004004 <TIM_Base_SetConfig+0xf8>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a0f      	ldr	r2, [pc, #60]	; (800403c <TIM_Base_SetConfig+0x130>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d103      	bne.n	800400c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	615a      	str	r2, [r3, #20]
}
 8004012:	bf00      	nop
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	40012c00 	.word	0x40012c00
 8004024:	40000400 	.word	0x40000400
 8004028:	40000800 	.word	0x40000800
 800402c:	40000c00 	.word	0x40000c00
 8004030:	40013400 	.word	0x40013400
 8004034:	40014000 	.word	0x40014000
 8004038:	40014400 	.word	0x40014400
 800403c:	40014800 	.word	0x40014800

08004040 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004040:	b480      	push	{r7}
 8004042:	b087      	sub	sp, #28
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	f023 0201 	bic.w	r2, r3, #1
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800406e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f023 0303 	bic.w	r3, r3, #3
 800407a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	4313      	orrs	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f023 0302 	bic.w	r3, r3, #2
 800408c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4313      	orrs	r3, r2
 8004096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a2c      	ldr	r2, [pc, #176]	; (800414c <TIM_OC1_SetConfig+0x10c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d00f      	beq.n	80040c0 <TIM_OC1_SetConfig+0x80>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a2b      	ldr	r2, [pc, #172]	; (8004150 <TIM_OC1_SetConfig+0x110>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d00b      	beq.n	80040c0 <TIM_OC1_SetConfig+0x80>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a2a      	ldr	r2, [pc, #168]	; (8004154 <TIM_OC1_SetConfig+0x114>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d007      	beq.n	80040c0 <TIM_OC1_SetConfig+0x80>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a29      	ldr	r2, [pc, #164]	; (8004158 <TIM_OC1_SetConfig+0x118>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d003      	beq.n	80040c0 <TIM_OC1_SetConfig+0x80>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a28      	ldr	r2, [pc, #160]	; (800415c <TIM_OC1_SetConfig+0x11c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d10c      	bne.n	80040da <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f023 0308 	bic.w	r3, r3, #8
 80040c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f023 0304 	bic.w	r3, r3, #4
 80040d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a1b      	ldr	r2, [pc, #108]	; (800414c <TIM_OC1_SetConfig+0x10c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d00f      	beq.n	8004102 <TIM_OC1_SetConfig+0xc2>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a1a      	ldr	r2, [pc, #104]	; (8004150 <TIM_OC1_SetConfig+0x110>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d00b      	beq.n	8004102 <TIM_OC1_SetConfig+0xc2>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a19      	ldr	r2, [pc, #100]	; (8004154 <TIM_OC1_SetConfig+0x114>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d007      	beq.n	8004102 <TIM_OC1_SetConfig+0xc2>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a18      	ldr	r2, [pc, #96]	; (8004158 <TIM_OC1_SetConfig+0x118>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d003      	beq.n	8004102 <TIM_OC1_SetConfig+0xc2>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a17      	ldr	r2, [pc, #92]	; (800415c <TIM_OC1_SetConfig+0x11c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d111      	bne.n	8004126 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004108:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004110:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	4313      	orrs	r3, r2
 800411a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	4313      	orrs	r3, r2
 8004124:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	621a      	str	r2, [r3, #32]
}
 8004140:	bf00      	nop
 8004142:	371c      	adds	r7, #28
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	40012c00 	.word	0x40012c00
 8004150:	40013400 	.word	0x40013400
 8004154:	40014000 	.word	0x40014000
 8004158:	40014400 	.word	0x40014400
 800415c:	40014800 	.word	0x40014800

08004160 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004160:	b480      	push	{r7}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	f023 0210 	bic.w	r2, r3, #16
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800418e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800419a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	021b      	lsls	r3, r3, #8
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f023 0320 	bic.w	r3, r3, #32
 80041ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a28      	ldr	r2, [pc, #160]	; (8004260 <TIM_OC2_SetConfig+0x100>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d003      	beq.n	80041cc <TIM_OC2_SetConfig+0x6c>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a27      	ldr	r2, [pc, #156]	; (8004264 <TIM_OC2_SetConfig+0x104>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d10d      	bne.n	80041e8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	011b      	lsls	r3, r3, #4
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	4313      	orrs	r3, r2
 80041de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a1d      	ldr	r2, [pc, #116]	; (8004260 <TIM_OC2_SetConfig+0x100>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d00f      	beq.n	8004210 <TIM_OC2_SetConfig+0xb0>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a1c      	ldr	r2, [pc, #112]	; (8004264 <TIM_OC2_SetConfig+0x104>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d00b      	beq.n	8004210 <TIM_OC2_SetConfig+0xb0>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a1b      	ldr	r2, [pc, #108]	; (8004268 <TIM_OC2_SetConfig+0x108>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d007      	beq.n	8004210 <TIM_OC2_SetConfig+0xb0>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a1a      	ldr	r2, [pc, #104]	; (800426c <TIM_OC2_SetConfig+0x10c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d003      	beq.n	8004210 <TIM_OC2_SetConfig+0xb0>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a19      	ldr	r2, [pc, #100]	; (8004270 <TIM_OC2_SetConfig+0x110>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d113      	bne.n	8004238 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004216:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800421e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	4313      	orrs	r3, r2
 800422a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	4313      	orrs	r3, r2
 8004236:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	621a      	str	r2, [r3, #32]
}
 8004252:	bf00      	nop
 8004254:	371c      	adds	r7, #28
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	40012c00 	.word	0x40012c00
 8004264:	40013400 	.word	0x40013400
 8004268:	40014000 	.word	0x40014000
 800426c:	40014400 	.word	0x40014400
 8004270:	40014800 	.word	0x40014800

08004274 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004274:	b480      	push	{r7}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f023 0303 	bic.w	r3, r3, #3
 80042ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	021b      	lsls	r3, r3, #8
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a27      	ldr	r2, [pc, #156]	; (8004370 <TIM_OC3_SetConfig+0xfc>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d003      	beq.n	80042de <TIM_OC3_SetConfig+0x6a>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a26      	ldr	r2, [pc, #152]	; (8004374 <TIM_OC3_SetConfig+0x100>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d10d      	bne.n	80042fa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	021b      	lsls	r3, r3, #8
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a1c      	ldr	r2, [pc, #112]	; (8004370 <TIM_OC3_SetConfig+0xfc>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d00f      	beq.n	8004322 <TIM_OC3_SetConfig+0xae>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a1b      	ldr	r2, [pc, #108]	; (8004374 <TIM_OC3_SetConfig+0x100>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d00b      	beq.n	8004322 <TIM_OC3_SetConfig+0xae>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a1a      	ldr	r2, [pc, #104]	; (8004378 <TIM_OC3_SetConfig+0x104>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d007      	beq.n	8004322 <TIM_OC3_SetConfig+0xae>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a19      	ldr	r2, [pc, #100]	; (800437c <TIM_OC3_SetConfig+0x108>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d003      	beq.n	8004322 <TIM_OC3_SetConfig+0xae>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a18      	ldr	r2, [pc, #96]	; (8004380 <TIM_OC3_SetConfig+0x10c>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d113      	bne.n	800434a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	4313      	orrs	r3, r2
 800433c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	011b      	lsls	r3, r3, #4
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	4313      	orrs	r3, r2
 8004348:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	621a      	str	r2, [r3, #32]
}
 8004364:	bf00      	nop
 8004366:	371c      	adds	r7, #28
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	40012c00 	.word	0x40012c00
 8004374:	40013400 	.word	0x40013400
 8004378:	40014000 	.word	0x40014000
 800437c:	40014400 	.word	0x40014400
 8004380:	40014800 	.word	0x40014800

08004384 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004384:	b480      	push	{r7}
 8004386:	b087      	sub	sp, #28
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	021b      	lsls	r3, r3, #8
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	031b      	lsls	r3, r3, #12
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	4313      	orrs	r3, r2
 80043de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a18      	ldr	r2, [pc, #96]	; (8004444 <TIM_OC4_SetConfig+0xc0>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d00f      	beq.n	8004408 <TIM_OC4_SetConfig+0x84>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a17      	ldr	r2, [pc, #92]	; (8004448 <TIM_OC4_SetConfig+0xc4>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d00b      	beq.n	8004408 <TIM_OC4_SetConfig+0x84>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a16      	ldr	r2, [pc, #88]	; (800444c <TIM_OC4_SetConfig+0xc8>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d007      	beq.n	8004408 <TIM_OC4_SetConfig+0x84>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a15      	ldr	r2, [pc, #84]	; (8004450 <TIM_OC4_SetConfig+0xcc>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d003      	beq.n	8004408 <TIM_OC4_SetConfig+0x84>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a14      	ldr	r2, [pc, #80]	; (8004454 <TIM_OC4_SetConfig+0xd0>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d109      	bne.n	800441c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800440e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	019b      	lsls	r3, r3, #6
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	4313      	orrs	r3, r2
 800441a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	621a      	str	r2, [r3, #32]
}
 8004436:	bf00      	nop
 8004438:	371c      	adds	r7, #28
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	40012c00 	.word	0x40012c00
 8004448:	40013400 	.word	0x40013400
 800444c:	40014000 	.word	0x40014000
 8004450:	40014400 	.word	0x40014400
 8004454:	40014800 	.word	0x40014800

08004458 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800449c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	041b      	lsls	r3, r3, #16
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a17      	ldr	r2, [pc, #92]	; (800450c <TIM_OC5_SetConfig+0xb4>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d00f      	beq.n	80044d2 <TIM_OC5_SetConfig+0x7a>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a16      	ldr	r2, [pc, #88]	; (8004510 <TIM_OC5_SetConfig+0xb8>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d00b      	beq.n	80044d2 <TIM_OC5_SetConfig+0x7a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a15      	ldr	r2, [pc, #84]	; (8004514 <TIM_OC5_SetConfig+0xbc>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d007      	beq.n	80044d2 <TIM_OC5_SetConfig+0x7a>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a14      	ldr	r2, [pc, #80]	; (8004518 <TIM_OC5_SetConfig+0xc0>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d003      	beq.n	80044d2 <TIM_OC5_SetConfig+0x7a>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a13      	ldr	r2, [pc, #76]	; (800451c <TIM_OC5_SetConfig+0xc4>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d109      	bne.n	80044e6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	021b      	lsls	r3, r3, #8
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	621a      	str	r2, [r3, #32]
}
 8004500:	bf00      	nop
 8004502:	371c      	adds	r7, #28
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	40012c00 	.word	0x40012c00
 8004510:	40013400 	.word	0x40013400
 8004514:	40014000 	.word	0x40014000
 8004518:	40014400 	.word	0x40014400
 800451c:	40014800 	.word	0x40014800

08004520 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004520:	b480      	push	{r7}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800454e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	021b      	lsls	r3, r3, #8
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	4313      	orrs	r3, r2
 800455e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004566:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	051b      	lsls	r3, r3, #20
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	4313      	orrs	r3, r2
 8004572:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a18      	ldr	r2, [pc, #96]	; (80045d8 <TIM_OC6_SetConfig+0xb8>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d00f      	beq.n	800459c <TIM_OC6_SetConfig+0x7c>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a17      	ldr	r2, [pc, #92]	; (80045dc <TIM_OC6_SetConfig+0xbc>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d00b      	beq.n	800459c <TIM_OC6_SetConfig+0x7c>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a16      	ldr	r2, [pc, #88]	; (80045e0 <TIM_OC6_SetConfig+0xc0>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d007      	beq.n	800459c <TIM_OC6_SetConfig+0x7c>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a15      	ldr	r2, [pc, #84]	; (80045e4 <TIM_OC6_SetConfig+0xc4>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d003      	beq.n	800459c <TIM_OC6_SetConfig+0x7c>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a14      	ldr	r2, [pc, #80]	; (80045e8 <TIM_OC6_SetConfig+0xc8>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d109      	bne.n	80045b0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	029b      	lsls	r3, r3, #10
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	621a      	str	r2, [r3, #32]
}
 80045ca:	bf00      	nop
 80045cc:	371c      	adds	r7, #28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	40012c00 	.word	0x40012c00
 80045dc:	40013400 	.word	0x40013400
 80045e0:	40014000 	.word	0x40014000
 80045e4:	40014400 	.word	0x40014400
 80045e8:	40014800 	.word	0x40014800

080045ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	f003 031f 	and.w	r3, r3, #31
 80045fe:	2201      	movs	r2, #1
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6a1a      	ldr	r2, [r3, #32]
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	43db      	mvns	r3, r3
 800460e:	401a      	ands	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6a1a      	ldr	r2, [r3, #32]
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f003 031f 	and.w	r3, r3, #31
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	fa01 f303 	lsl.w	r3, r1, r3
 8004624:	431a      	orrs	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	621a      	str	r2, [r3, #32]
}
 800462a:	bf00      	nop
 800462c:	371c      	adds	r7, #28
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
	...

08004638 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004648:	2b01      	cmp	r3, #1
 800464a:	d101      	bne.n	8004650 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800464c:	2302      	movs	r3, #2
 800464e:	e068      	b.n	8004722 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2202      	movs	r2, #2
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a2e      	ldr	r2, [pc, #184]	; (8004730 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d004      	beq.n	8004684 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a2d      	ldr	r2, [pc, #180]	; (8004734 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d108      	bne.n	8004696 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800468a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	4313      	orrs	r3, r2
 8004694:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a1e      	ldr	r2, [pc, #120]	; (8004730 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d01d      	beq.n	80046f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c2:	d018      	beq.n	80046f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a1b      	ldr	r2, [pc, #108]	; (8004738 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d013      	beq.n	80046f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a1a      	ldr	r2, [pc, #104]	; (800473c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d00e      	beq.n	80046f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a18      	ldr	r2, [pc, #96]	; (8004740 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d009      	beq.n	80046f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a13      	ldr	r2, [pc, #76]	; (8004734 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d004      	beq.n	80046f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a14      	ldr	r2, [pc, #80]	; (8004744 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d10c      	bne.n	8004710 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	4313      	orrs	r3, r2
 8004706:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	40012c00 	.word	0x40012c00
 8004734:	40013400 	.word	0x40013400
 8004738:	40000400 	.word	0x40000400
 800473c:	40000800 	.word	0x40000800
 8004740:	40000c00 	.word	0x40000c00
 8004744:	40014000 	.word	0x40014000

08004748 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e040      	b.n	8004818 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800479a:	2b00      	cmp	r3, #0
 800479c:	d106      	bne.n	80047ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7fc fdba 	bl	8001320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2224      	movs	r2, #36	; 0x24
 80047b0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0201 	bic.w	r2, r2, #1
 80047c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f992 	bl	8004aec <UART_SetConfig>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d101      	bne.n	80047d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e022      	b.n	8004818 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 fc3e 	bl	800505c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689a      	ldr	r2, [r3, #8]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0201 	orr.w	r2, r2, #1
 800480e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 fcc5 	bl	80051a0 <UART_CheckIdleState>
 8004816:	4603      	mov	r3, r0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b08a      	sub	sp, #40	; 0x28
 8004824:	af02      	add	r7, sp, #8
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	603b      	str	r3, [r7, #0]
 800482c:	4613      	mov	r3, r2
 800482e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004834:	2b20      	cmp	r3, #32
 8004836:	f040 8082 	bne.w	800493e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d002      	beq.n	8004846 <HAL_UART_Transmit+0x26>
 8004840:	88fb      	ldrh	r3, [r7, #6]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e07a      	b.n	8004940 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004850:	2b01      	cmp	r3, #1
 8004852:	d101      	bne.n	8004858 <HAL_UART_Transmit+0x38>
 8004854:	2302      	movs	r3, #2
 8004856:	e073      	b.n	8004940 <HAL_UART_Transmit+0x120>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2221      	movs	r2, #33	; 0x21
 800486c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800486e:	f7fc ff5b 	bl	8001728 <HAL_GetTick>
 8004872:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	88fa      	ldrh	r2, [r7, #6]
 8004878:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	88fa      	ldrh	r2, [r7, #6]
 8004880:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800488c:	d108      	bne.n	80048a0 <HAL_UART_Transmit+0x80>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d104      	bne.n	80048a0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004896:	2300      	movs	r3, #0
 8004898:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	61bb      	str	r3, [r7, #24]
 800489e:	e003      	b.n	80048a8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048a4:	2300      	movs	r3, #0
 80048a6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80048b0:	e02d      	b.n	800490e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	2200      	movs	r2, #0
 80048ba:	2180      	movs	r1, #128	; 0x80
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 fcb8 	bl	8005232 <UART_WaitOnFlagUntilTimeout>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e039      	b.n	8004940 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10b      	bne.n	80048ea <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	881a      	ldrh	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048de:	b292      	uxth	r2, r2
 80048e0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	3302      	adds	r3, #2
 80048e6:	61bb      	str	r3, [r7, #24]
 80048e8:	e008      	b.n	80048fc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	781a      	ldrb	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	b292      	uxth	r2, r2
 80048f4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	3301      	adds	r3, #1
 80048fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004902:	b29b      	uxth	r3, r3
 8004904:	3b01      	subs	r3, #1
 8004906:	b29a      	uxth	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004914:	b29b      	uxth	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1cb      	bne.n	80048b2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	2200      	movs	r2, #0
 8004922:	2140      	movs	r1, #64	; 0x40
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f000 fc84 	bl	8005232 <UART_WaitOnFlagUntilTimeout>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e005      	b.n	8004940 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2220      	movs	r2, #32
 8004938:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800493a:	2300      	movs	r3, #0
 800493c:	e000      	b.n	8004940 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800493e:	2302      	movs	r3, #2
  }
}
 8004940:	4618      	mov	r0, r3
 8004942:	3720      	adds	r7, #32
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b08a      	sub	sp, #40	; 0x28
 800494c:	af02      	add	r7, sp, #8
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	4613      	mov	r3, r2
 8004956:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800495c:	2b20      	cmp	r3, #32
 800495e:	f040 80bf 	bne.w	8004ae0 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d002      	beq.n	800496e <HAL_UART_Receive+0x26>
 8004968:	88fb      	ldrh	r3, [r7, #6]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e0b7      	b.n	8004ae2 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <HAL_UART_Receive+0x38>
 800497c:	2302      	movs	r3, #2
 800497e:	e0b0      	b.n	8004ae2 <HAL_UART_Receive+0x19a>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2222      	movs	r2, #34	; 0x22
 8004994:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800499c:	f7fc fec4 	bl	8001728 <HAL_GetTick>
 80049a0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	88fa      	ldrh	r2, [r7, #6]
 80049a6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	88fa      	ldrh	r2, [r7, #6]
 80049ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ba:	d10e      	bne.n	80049da <HAL_UART_Receive+0x92>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d105      	bne.n	80049d0 <HAL_UART_Receive+0x88>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80049ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049ce:	e02d      	b.n	8004a2c <HAL_UART_Receive+0xe4>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	22ff      	movs	r2, #255	; 0xff
 80049d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049d8:	e028      	b.n	8004a2c <HAL_UART_Receive+0xe4>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10d      	bne.n	80049fe <HAL_UART_Receive+0xb6>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d104      	bne.n	80049f4 <HAL_UART_Receive+0xac>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	22ff      	movs	r2, #255	; 0xff
 80049ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049f2:	e01b      	b.n	8004a2c <HAL_UART_Receive+0xe4>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	227f      	movs	r2, #127	; 0x7f
 80049f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049fc:	e016      	b.n	8004a2c <HAL_UART_Receive+0xe4>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a06:	d10d      	bne.n	8004a24 <HAL_UART_Receive+0xdc>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d104      	bne.n	8004a1a <HAL_UART_Receive+0xd2>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	227f      	movs	r2, #127	; 0x7f
 8004a14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a18:	e008      	b.n	8004a2c <HAL_UART_Receive+0xe4>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	223f      	movs	r2, #63	; 0x3f
 8004a1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a22:	e003      	b.n	8004a2c <HAL_UART_Receive+0xe4>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a32:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a3c:	d108      	bne.n	8004a50 <HAL_UART_Receive+0x108>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d104      	bne.n	8004a50 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004a46:	2300      	movs	r3, #0
 8004a48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	61bb      	str	r3, [r7, #24]
 8004a4e:	e003      	b.n	8004a58 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a54:	2300      	movs	r3, #0
 8004a56:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004a60:	e033      	b.n	8004aca <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	2120      	movs	r1, #32
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f000 fbe0 	bl	8005232 <UART_WaitOnFlagUntilTimeout>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e032      	b.n	8004ae2 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10c      	bne.n	8004a9c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	8a7b      	ldrh	r3, [r7, #18]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	3302      	adds	r3, #2
 8004a98:	61bb      	str	r3, [r7, #24]
 8004a9a:	e00d      	b.n	8004ab8 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	b2da      	uxtb	r2, r3
 8004aa6:	8a7b      	ldrh	r3, [r7, #18]
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	4013      	ands	r3, r2
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1c5      	bne.n	8004a62 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004adc:	2300      	movs	r3, #0
 8004ade:	e000      	b.n	8004ae2 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004ae0:	2302      	movs	r3, #2
  }
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3720      	adds	r7, #32
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
	...

08004aec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004af0:	b08a      	sub	sp, #40	; 0x28
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004af6:	2300      	movs	r3, #0
 8004af8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	689a      	ldr	r2, [r3, #8]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	431a      	orrs	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	69db      	ldr	r3, [r3, #28]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	4ba4      	ldr	r3, [pc, #656]	; (8004dac <UART_SetConfig+0x2c0>)
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	6812      	ldr	r2, [r2, #0]
 8004b22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b24:	430b      	orrs	r3, r1
 8004b26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a99      	ldr	r2, [pc, #612]	; (8004db0 <UART_SetConfig+0x2c4>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d004      	beq.n	8004b58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b54:	4313      	orrs	r3, r2
 8004b56:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a90      	ldr	r2, [pc, #576]	; (8004db4 <UART_SetConfig+0x2c8>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d126      	bne.n	8004bc4 <UART_SetConfig+0xd8>
 8004b76:	4b90      	ldr	r3, [pc, #576]	; (8004db8 <UART_SetConfig+0x2cc>)
 8004b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7c:	f003 0303 	and.w	r3, r3, #3
 8004b80:	2b03      	cmp	r3, #3
 8004b82:	d81b      	bhi.n	8004bbc <UART_SetConfig+0xd0>
 8004b84:	a201      	add	r2, pc, #4	; (adr r2, 8004b8c <UART_SetConfig+0xa0>)
 8004b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8a:	bf00      	nop
 8004b8c:	08004b9d 	.word	0x08004b9d
 8004b90:	08004bad 	.word	0x08004bad
 8004b94:	08004ba5 	.word	0x08004ba5
 8004b98:	08004bb5 	.word	0x08004bb5
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ba2:	e116      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004baa:	e112      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004bac:	2304      	movs	r3, #4
 8004bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bb2:	e10e      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004bb4:	2308      	movs	r3, #8
 8004bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bba:	e10a      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004bbc:	2310      	movs	r3, #16
 8004bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bc2:	e106      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a7c      	ldr	r2, [pc, #496]	; (8004dbc <UART_SetConfig+0x2d0>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d138      	bne.n	8004c40 <UART_SetConfig+0x154>
 8004bce:	4b7a      	ldr	r3, [pc, #488]	; (8004db8 <UART_SetConfig+0x2cc>)
 8004bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd4:	f003 030c 	and.w	r3, r3, #12
 8004bd8:	2b0c      	cmp	r3, #12
 8004bda:	d82d      	bhi.n	8004c38 <UART_SetConfig+0x14c>
 8004bdc:	a201      	add	r2, pc, #4	; (adr r2, 8004be4 <UART_SetConfig+0xf8>)
 8004bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be2:	bf00      	nop
 8004be4:	08004c19 	.word	0x08004c19
 8004be8:	08004c39 	.word	0x08004c39
 8004bec:	08004c39 	.word	0x08004c39
 8004bf0:	08004c39 	.word	0x08004c39
 8004bf4:	08004c29 	.word	0x08004c29
 8004bf8:	08004c39 	.word	0x08004c39
 8004bfc:	08004c39 	.word	0x08004c39
 8004c00:	08004c39 	.word	0x08004c39
 8004c04:	08004c21 	.word	0x08004c21
 8004c08:	08004c39 	.word	0x08004c39
 8004c0c:	08004c39 	.word	0x08004c39
 8004c10:	08004c39 	.word	0x08004c39
 8004c14:	08004c31 	.word	0x08004c31
 8004c18:	2300      	movs	r3, #0
 8004c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c1e:	e0d8      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004c20:	2302      	movs	r3, #2
 8004c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c26:	e0d4      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004c28:	2304      	movs	r3, #4
 8004c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c2e:	e0d0      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004c30:	2308      	movs	r3, #8
 8004c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c36:	e0cc      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004c38:	2310      	movs	r3, #16
 8004c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c3e:	e0c8      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a5e      	ldr	r2, [pc, #376]	; (8004dc0 <UART_SetConfig+0x2d4>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d125      	bne.n	8004c96 <UART_SetConfig+0x1aa>
 8004c4a:	4b5b      	ldr	r3, [pc, #364]	; (8004db8 <UART_SetConfig+0x2cc>)
 8004c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c50:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c54:	2b30      	cmp	r3, #48	; 0x30
 8004c56:	d016      	beq.n	8004c86 <UART_SetConfig+0x19a>
 8004c58:	2b30      	cmp	r3, #48	; 0x30
 8004c5a:	d818      	bhi.n	8004c8e <UART_SetConfig+0x1a2>
 8004c5c:	2b20      	cmp	r3, #32
 8004c5e:	d00a      	beq.n	8004c76 <UART_SetConfig+0x18a>
 8004c60:	2b20      	cmp	r3, #32
 8004c62:	d814      	bhi.n	8004c8e <UART_SetConfig+0x1a2>
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d002      	beq.n	8004c6e <UART_SetConfig+0x182>
 8004c68:	2b10      	cmp	r3, #16
 8004c6a:	d008      	beq.n	8004c7e <UART_SetConfig+0x192>
 8004c6c:	e00f      	b.n	8004c8e <UART_SetConfig+0x1a2>
 8004c6e:	2300      	movs	r3, #0
 8004c70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c74:	e0ad      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004c76:	2302      	movs	r3, #2
 8004c78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c7c:	e0a9      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004c7e:	2304      	movs	r3, #4
 8004c80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c84:	e0a5      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004c86:	2308      	movs	r3, #8
 8004c88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c8c:	e0a1      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004c8e:	2310      	movs	r3, #16
 8004c90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c94:	e09d      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a4a      	ldr	r2, [pc, #296]	; (8004dc4 <UART_SetConfig+0x2d8>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d125      	bne.n	8004cec <UART_SetConfig+0x200>
 8004ca0:	4b45      	ldr	r3, [pc, #276]	; (8004db8 <UART_SetConfig+0x2cc>)
 8004ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004caa:	2bc0      	cmp	r3, #192	; 0xc0
 8004cac:	d016      	beq.n	8004cdc <UART_SetConfig+0x1f0>
 8004cae:	2bc0      	cmp	r3, #192	; 0xc0
 8004cb0:	d818      	bhi.n	8004ce4 <UART_SetConfig+0x1f8>
 8004cb2:	2b80      	cmp	r3, #128	; 0x80
 8004cb4:	d00a      	beq.n	8004ccc <UART_SetConfig+0x1e0>
 8004cb6:	2b80      	cmp	r3, #128	; 0x80
 8004cb8:	d814      	bhi.n	8004ce4 <UART_SetConfig+0x1f8>
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d002      	beq.n	8004cc4 <UART_SetConfig+0x1d8>
 8004cbe:	2b40      	cmp	r3, #64	; 0x40
 8004cc0:	d008      	beq.n	8004cd4 <UART_SetConfig+0x1e8>
 8004cc2:	e00f      	b.n	8004ce4 <UART_SetConfig+0x1f8>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cca:	e082      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004ccc:	2302      	movs	r3, #2
 8004cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cd2:	e07e      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004cd4:	2304      	movs	r3, #4
 8004cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cda:	e07a      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004cdc:	2308      	movs	r3, #8
 8004cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ce2:	e076      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004ce4:	2310      	movs	r3, #16
 8004ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cea:	e072      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a35      	ldr	r2, [pc, #212]	; (8004dc8 <UART_SetConfig+0x2dc>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d12a      	bne.n	8004d4c <UART_SetConfig+0x260>
 8004cf6:	4b30      	ldr	r3, [pc, #192]	; (8004db8 <UART_SetConfig+0x2cc>)
 8004cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d04:	d01a      	beq.n	8004d3c <UART_SetConfig+0x250>
 8004d06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d0a:	d81b      	bhi.n	8004d44 <UART_SetConfig+0x258>
 8004d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d10:	d00c      	beq.n	8004d2c <UART_SetConfig+0x240>
 8004d12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d16:	d815      	bhi.n	8004d44 <UART_SetConfig+0x258>
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d003      	beq.n	8004d24 <UART_SetConfig+0x238>
 8004d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d20:	d008      	beq.n	8004d34 <UART_SetConfig+0x248>
 8004d22:	e00f      	b.n	8004d44 <UART_SetConfig+0x258>
 8004d24:	2300      	movs	r3, #0
 8004d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d2a:	e052      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d32:	e04e      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004d34:	2304      	movs	r3, #4
 8004d36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d3a:	e04a      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004d3c:	2308      	movs	r3, #8
 8004d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d42:	e046      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004d44:	2310      	movs	r3, #16
 8004d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d4a:	e042      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a17      	ldr	r2, [pc, #92]	; (8004db0 <UART_SetConfig+0x2c4>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d13a      	bne.n	8004dcc <UART_SetConfig+0x2e0>
 8004d56:	4b18      	ldr	r3, [pc, #96]	; (8004db8 <UART_SetConfig+0x2cc>)
 8004d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d64:	d01a      	beq.n	8004d9c <UART_SetConfig+0x2b0>
 8004d66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d6a:	d81b      	bhi.n	8004da4 <UART_SetConfig+0x2b8>
 8004d6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d70:	d00c      	beq.n	8004d8c <UART_SetConfig+0x2a0>
 8004d72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d76:	d815      	bhi.n	8004da4 <UART_SetConfig+0x2b8>
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d003      	beq.n	8004d84 <UART_SetConfig+0x298>
 8004d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d80:	d008      	beq.n	8004d94 <UART_SetConfig+0x2a8>
 8004d82:	e00f      	b.n	8004da4 <UART_SetConfig+0x2b8>
 8004d84:	2300      	movs	r3, #0
 8004d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d8a:	e022      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d92:	e01e      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004d94:	2304      	movs	r3, #4
 8004d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d9a:	e01a      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004d9c:	2308      	movs	r3, #8
 8004d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004da2:	e016      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004da4:	2310      	movs	r3, #16
 8004da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004daa:	e012      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004dac:	efff69f3 	.word	0xefff69f3
 8004db0:	40008000 	.word	0x40008000
 8004db4:	40013800 	.word	0x40013800
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	40004400 	.word	0x40004400
 8004dc0:	40004800 	.word	0x40004800
 8004dc4:	40004c00 	.word	0x40004c00
 8004dc8:	40005000 	.word	0x40005000
 8004dcc:	2310      	movs	r3, #16
 8004dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a9f      	ldr	r2, [pc, #636]	; (8005054 <UART_SetConfig+0x568>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d17a      	bne.n	8004ed2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ddc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	d824      	bhi.n	8004e2e <UART_SetConfig+0x342>
 8004de4:	a201      	add	r2, pc, #4	; (adr r2, 8004dec <UART_SetConfig+0x300>)
 8004de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dea:	bf00      	nop
 8004dec:	08004e11 	.word	0x08004e11
 8004df0:	08004e2f 	.word	0x08004e2f
 8004df4:	08004e19 	.word	0x08004e19
 8004df8:	08004e2f 	.word	0x08004e2f
 8004dfc:	08004e1f 	.word	0x08004e1f
 8004e00:	08004e2f 	.word	0x08004e2f
 8004e04:	08004e2f 	.word	0x08004e2f
 8004e08:	08004e2f 	.word	0x08004e2f
 8004e0c:	08004e27 	.word	0x08004e27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e10:	f7fd fd8c 	bl	800292c <HAL_RCC_GetPCLK1Freq>
 8004e14:	61f8      	str	r0, [r7, #28]
        break;
 8004e16:	e010      	b.n	8004e3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e18:	4b8f      	ldr	r3, [pc, #572]	; (8005058 <UART_SetConfig+0x56c>)
 8004e1a:	61fb      	str	r3, [r7, #28]
        break;
 8004e1c:	e00d      	b.n	8004e3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e1e:	f7fd fced 	bl	80027fc <HAL_RCC_GetSysClockFreq>
 8004e22:	61f8      	str	r0, [r7, #28]
        break;
 8004e24:	e009      	b.n	8004e3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e2a:	61fb      	str	r3, [r7, #28]
        break;
 8004e2c:	e005      	b.n	8004e3a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 80fb 	beq.w	8005038 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	4613      	mov	r3, r2
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	4413      	add	r3, r2
 8004e4c:	69fa      	ldr	r2, [r7, #28]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d305      	bcc.n	8004e5e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e58:	69fa      	ldr	r2, [r7, #28]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d903      	bls.n	8004e66 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e64:	e0e8      	b.n	8005038 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	461c      	mov	r4, r3
 8004e6c:	4615      	mov	r5, r2
 8004e6e:	f04f 0200 	mov.w	r2, #0
 8004e72:	f04f 0300 	mov.w	r3, #0
 8004e76:	022b      	lsls	r3, r5, #8
 8004e78:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004e7c:	0222      	lsls	r2, r4, #8
 8004e7e:	68f9      	ldr	r1, [r7, #12]
 8004e80:	6849      	ldr	r1, [r1, #4]
 8004e82:	0849      	lsrs	r1, r1, #1
 8004e84:	2000      	movs	r0, #0
 8004e86:	4688      	mov	r8, r1
 8004e88:	4681      	mov	r9, r0
 8004e8a:	eb12 0a08 	adds.w	sl, r2, r8
 8004e8e:	eb43 0b09 	adc.w	fp, r3, r9
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	603b      	str	r3, [r7, #0]
 8004e9a:	607a      	str	r2, [r7, #4]
 8004e9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ea0:	4650      	mov	r0, sl
 8004ea2:	4659      	mov	r1, fp
 8004ea4:	f7fb f9f4 	bl	8000290 <__aeabi_uldivmod>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4613      	mov	r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eb6:	d308      	bcc.n	8004eca <UART_SetConfig+0x3de>
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ebe:	d204      	bcs.n	8004eca <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	60da      	str	r2, [r3, #12]
 8004ec8:	e0b6      	b.n	8005038 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ed0:	e0b2      	b.n	8005038 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eda:	d15e      	bne.n	8004f9a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004edc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	d828      	bhi.n	8004f36 <UART_SetConfig+0x44a>
 8004ee4:	a201      	add	r2, pc, #4	; (adr r2, 8004eec <UART_SetConfig+0x400>)
 8004ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eea:	bf00      	nop
 8004eec:	08004f11 	.word	0x08004f11
 8004ef0:	08004f19 	.word	0x08004f19
 8004ef4:	08004f21 	.word	0x08004f21
 8004ef8:	08004f37 	.word	0x08004f37
 8004efc:	08004f27 	.word	0x08004f27
 8004f00:	08004f37 	.word	0x08004f37
 8004f04:	08004f37 	.word	0x08004f37
 8004f08:	08004f37 	.word	0x08004f37
 8004f0c:	08004f2f 	.word	0x08004f2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f10:	f7fd fd0c 	bl	800292c <HAL_RCC_GetPCLK1Freq>
 8004f14:	61f8      	str	r0, [r7, #28]
        break;
 8004f16:	e014      	b.n	8004f42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f18:	f7fd fd1e 	bl	8002958 <HAL_RCC_GetPCLK2Freq>
 8004f1c:	61f8      	str	r0, [r7, #28]
        break;
 8004f1e:	e010      	b.n	8004f42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f20:	4b4d      	ldr	r3, [pc, #308]	; (8005058 <UART_SetConfig+0x56c>)
 8004f22:	61fb      	str	r3, [r7, #28]
        break;
 8004f24:	e00d      	b.n	8004f42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f26:	f7fd fc69 	bl	80027fc <HAL_RCC_GetSysClockFreq>
 8004f2a:	61f8      	str	r0, [r7, #28]
        break;
 8004f2c:	e009      	b.n	8004f42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f32:	61fb      	str	r3, [r7, #28]
        break;
 8004f34:	e005      	b.n	8004f42 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d077      	beq.n	8005038 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	005a      	lsls	r2, r3, #1
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	085b      	lsrs	r3, r3, #1
 8004f52:	441a      	add	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f5c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	2b0f      	cmp	r3, #15
 8004f62:	d916      	bls.n	8004f92 <UART_SetConfig+0x4a6>
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f6a:	d212      	bcs.n	8004f92 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	f023 030f 	bic.w	r3, r3, #15
 8004f74:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	085b      	lsrs	r3, r3, #1
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	8afb      	ldrh	r3, [r7, #22]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	8afa      	ldrh	r2, [r7, #22]
 8004f8e:	60da      	str	r2, [r3, #12]
 8004f90:	e052      	b.n	8005038 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f98:	e04e      	b.n	8005038 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f9e:	2b08      	cmp	r3, #8
 8004fa0:	d827      	bhi.n	8004ff2 <UART_SetConfig+0x506>
 8004fa2:	a201      	add	r2, pc, #4	; (adr r2, 8004fa8 <UART_SetConfig+0x4bc>)
 8004fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa8:	08004fcd 	.word	0x08004fcd
 8004fac:	08004fd5 	.word	0x08004fd5
 8004fb0:	08004fdd 	.word	0x08004fdd
 8004fb4:	08004ff3 	.word	0x08004ff3
 8004fb8:	08004fe3 	.word	0x08004fe3
 8004fbc:	08004ff3 	.word	0x08004ff3
 8004fc0:	08004ff3 	.word	0x08004ff3
 8004fc4:	08004ff3 	.word	0x08004ff3
 8004fc8:	08004feb 	.word	0x08004feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fcc:	f7fd fcae 	bl	800292c <HAL_RCC_GetPCLK1Freq>
 8004fd0:	61f8      	str	r0, [r7, #28]
        break;
 8004fd2:	e014      	b.n	8004ffe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fd4:	f7fd fcc0 	bl	8002958 <HAL_RCC_GetPCLK2Freq>
 8004fd8:	61f8      	str	r0, [r7, #28]
        break;
 8004fda:	e010      	b.n	8004ffe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fdc:	4b1e      	ldr	r3, [pc, #120]	; (8005058 <UART_SetConfig+0x56c>)
 8004fde:	61fb      	str	r3, [r7, #28]
        break;
 8004fe0:	e00d      	b.n	8004ffe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fe2:	f7fd fc0b 	bl	80027fc <HAL_RCC_GetSysClockFreq>
 8004fe6:	61f8      	str	r0, [r7, #28]
        break;
 8004fe8:	e009      	b.n	8004ffe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fee:	61fb      	str	r3, [r7, #28]
        break;
 8004ff0:	e005      	b.n	8004ffe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ffc:	bf00      	nop
    }

    if (pclk != 0U)
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d019      	beq.n	8005038 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	085a      	lsrs	r2, r3, #1
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	441a      	add	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	fbb2 f3f3 	udiv	r3, r2, r3
 8005016:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	2b0f      	cmp	r3, #15
 800501c:	d909      	bls.n	8005032 <UART_SetConfig+0x546>
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005024:	d205      	bcs.n	8005032 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	b29a      	uxth	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	60da      	str	r2, [r3, #12]
 8005030:	e002      	b.n	8005038 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005044:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005048:	4618      	mov	r0, r3
 800504a:	3728      	adds	r7, #40	; 0x28
 800504c:	46bd      	mov	sp, r7
 800504e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005052:	bf00      	nop
 8005054:	40008000 	.word	0x40008000
 8005058:	00f42400 	.word	0x00f42400

0800505c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00a      	beq.n	8005086 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00a      	beq.n	80050a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	f003 0304 	and.w	r3, r3, #4
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00a      	beq.n	80050ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	f003 0308 	and.w	r3, r3, #8
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	f003 0310 	and.w	r3, r3, #16
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00a      	beq.n	800510e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005112:	f003 0320 	and.w	r3, r3, #32
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005138:	2b00      	cmp	r3, #0
 800513a:	d01a      	beq.n	8005172 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800515a:	d10a      	bne.n	8005172 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	430a      	orrs	r2, r1
 8005170:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00a      	beq.n	8005194 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	430a      	orrs	r2, r1
 8005192:	605a      	str	r2, [r3, #4]
  }
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af02      	add	r7, sp, #8
 80051a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051b0:	f7fc faba 	bl	8001728 <HAL_GetTick>
 80051b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0308 	and.w	r3, r3, #8
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d10e      	bne.n	80051e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f82d 	bl	8005232 <UART_WaitOnFlagUntilTimeout>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e023      	b.n	800522a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b04      	cmp	r3, #4
 80051ee:	d10e      	bne.n	800520e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f817 	bl	8005232 <UART_WaitOnFlagUntilTimeout>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e00d      	b.n	800522a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2220      	movs	r2, #32
 8005212:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2220      	movs	r2, #32
 8005218:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b09c      	sub	sp, #112	; 0x70
 8005236:	af00      	add	r7, sp, #0
 8005238:	60f8      	str	r0, [r7, #12]
 800523a:	60b9      	str	r1, [r7, #8]
 800523c:	603b      	str	r3, [r7, #0]
 800523e:	4613      	mov	r3, r2
 8005240:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005242:	e0a5      	b.n	8005390 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005244:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524a:	f000 80a1 	beq.w	8005390 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800524e:	f7fc fa6b 	bl	8001728 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800525a:	429a      	cmp	r2, r3
 800525c:	d302      	bcc.n	8005264 <UART_WaitOnFlagUntilTimeout+0x32>
 800525e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005260:	2b00      	cmp	r3, #0
 8005262:	d13e      	bne.n	80052e2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800526c:	e853 3f00 	ldrex	r3, [r3]
 8005270:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005274:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005278:	667b      	str	r3, [r7, #100]	; 0x64
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	461a      	mov	r2, r3
 8005280:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005282:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005284:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005286:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005288:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800528a:	e841 2300 	strex	r3, r2, [r1]
 800528e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1e6      	bne.n	8005264 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3308      	adds	r3, #8
 800529c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052a0:	e853 3f00 	ldrex	r3, [r3]
 80052a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a8:	f023 0301 	bic.w	r3, r3, #1
 80052ac:	663b      	str	r3, [r7, #96]	; 0x60
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	3308      	adds	r3, #8
 80052b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80052b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80052b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052be:	e841 2300 	strex	r3, r2, [r1]
 80052c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80052c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1e5      	bne.n	8005296 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2220      	movs	r2, #32
 80052ce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2220      	movs	r2, #32
 80052d4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e067      	b.n	80053b2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d04f      	beq.n	8005390 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052fe:	d147      	bne.n	8005390 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005308:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005312:	e853 3f00 	ldrex	r3, [r3]
 8005316:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800531e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	461a      	mov	r2, r3
 8005326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005328:	637b      	str	r3, [r7, #52]	; 0x34
 800532a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800532e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005330:	e841 2300 	strex	r3, r2, [r1]
 8005334:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1e6      	bne.n	800530a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	3308      	adds	r3, #8
 8005342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	e853 3f00 	ldrex	r3, [r3]
 800534a:	613b      	str	r3, [r7, #16]
   return(result);
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f023 0301 	bic.w	r3, r3, #1
 8005352:	66bb      	str	r3, [r7, #104]	; 0x68
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	3308      	adds	r3, #8
 800535a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800535c:	623a      	str	r2, [r7, #32]
 800535e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005360:	69f9      	ldr	r1, [r7, #28]
 8005362:	6a3a      	ldr	r2, [r7, #32]
 8005364:	e841 2300 	strex	r3, r2, [r1]
 8005368:	61bb      	str	r3, [r7, #24]
   return(result);
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1e5      	bne.n	800533c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2220      	movs	r2, #32
 8005374:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2220      	movs	r2, #32
 800537a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2220      	movs	r2, #32
 8005380:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e010      	b.n	80053b2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	69da      	ldr	r2, [r3, #28]
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	4013      	ands	r3, r2
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	429a      	cmp	r2, r3
 800539e:	bf0c      	ite	eq
 80053a0:	2301      	moveq	r3, #1
 80053a2:	2300      	movne	r3, #0
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	461a      	mov	r2, r3
 80053a8:	79fb      	ldrb	r3, [r7, #7]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	f43f af4a 	beq.w	8005244 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3770      	adds	r7, #112	; 0x70
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <atoi>:
 80053ba:	220a      	movs	r2, #10
 80053bc:	2100      	movs	r1, #0
 80053be:	f000 b9a7 	b.w	8005710 <strtol>
	...

080053c4 <__errno>:
 80053c4:	4b01      	ldr	r3, [pc, #4]	; (80053cc <__errno+0x8>)
 80053c6:	6818      	ldr	r0, [r3, #0]
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	20000194 	.word	0x20000194

080053d0 <__libc_init_array>:
 80053d0:	b570      	push	{r4, r5, r6, lr}
 80053d2:	4d0d      	ldr	r5, [pc, #52]	; (8005408 <__libc_init_array+0x38>)
 80053d4:	4c0d      	ldr	r4, [pc, #52]	; (800540c <__libc_init_array+0x3c>)
 80053d6:	1b64      	subs	r4, r4, r5
 80053d8:	10a4      	asrs	r4, r4, #2
 80053da:	2600      	movs	r6, #0
 80053dc:	42a6      	cmp	r6, r4
 80053de:	d109      	bne.n	80053f4 <__libc_init_array+0x24>
 80053e0:	4d0b      	ldr	r5, [pc, #44]	; (8005410 <__libc_init_array+0x40>)
 80053e2:	4c0c      	ldr	r4, [pc, #48]	; (8005414 <__libc_init_array+0x44>)
 80053e4:	f001 f998 	bl	8006718 <_init>
 80053e8:	1b64      	subs	r4, r4, r5
 80053ea:	10a4      	asrs	r4, r4, #2
 80053ec:	2600      	movs	r6, #0
 80053ee:	42a6      	cmp	r6, r4
 80053f0:	d105      	bne.n	80053fe <__libc_init_array+0x2e>
 80053f2:	bd70      	pop	{r4, r5, r6, pc}
 80053f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80053f8:	4798      	blx	r3
 80053fa:	3601      	adds	r6, #1
 80053fc:	e7ee      	b.n	80053dc <__libc_init_array+0xc>
 80053fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005402:	4798      	blx	r3
 8005404:	3601      	adds	r6, #1
 8005406:	e7f2      	b.n	80053ee <__libc_init_array+0x1e>
 8005408:	08006a60 	.word	0x08006a60
 800540c:	08006a60 	.word	0x08006a60
 8005410:	08006a60 	.word	0x08006a60
 8005414:	08006a64 	.word	0x08006a64

08005418 <memset>:
 8005418:	4402      	add	r2, r0
 800541a:	4603      	mov	r3, r0
 800541c:	4293      	cmp	r3, r2
 800541e:	d100      	bne.n	8005422 <memset+0xa>
 8005420:	4770      	bx	lr
 8005422:	f803 1b01 	strb.w	r1, [r3], #1
 8005426:	e7f9      	b.n	800541c <memset+0x4>

08005428 <iprintf>:
 8005428:	b40f      	push	{r0, r1, r2, r3}
 800542a:	4b0a      	ldr	r3, [pc, #40]	; (8005454 <iprintf+0x2c>)
 800542c:	b513      	push	{r0, r1, r4, lr}
 800542e:	681c      	ldr	r4, [r3, #0]
 8005430:	b124      	cbz	r4, 800543c <iprintf+0x14>
 8005432:	69a3      	ldr	r3, [r4, #24]
 8005434:	b913      	cbnz	r3, 800543c <iprintf+0x14>
 8005436:	4620      	mov	r0, r4
 8005438:	f000 fb6c 	bl	8005b14 <__sinit>
 800543c:	ab05      	add	r3, sp, #20
 800543e:	9a04      	ldr	r2, [sp, #16]
 8005440:	68a1      	ldr	r1, [r4, #8]
 8005442:	9301      	str	r3, [sp, #4]
 8005444:	4620      	mov	r0, r4
 8005446:	f000 fd8f 	bl	8005f68 <_vfiprintf_r>
 800544a:	b002      	add	sp, #8
 800544c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005450:	b004      	add	sp, #16
 8005452:	4770      	bx	lr
 8005454:	20000194 	.word	0x20000194

08005458 <_puts_r>:
 8005458:	b570      	push	{r4, r5, r6, lr}
 800545a:	460e      	mov	r6, r1
 800545c:	4605      	mov	r5, r0
 800545e:	b118      	cbz	r0, 8005468 <_puts_r+0x10>
 8005460:	6983      	ldr	r3, [r0, #24]
 8005462:	b90b      	cbnz	r3, 8005468 <_puts_r+0x10>
 8005464:	f000 fb56 	bl	8005b14 <__sinit>
 8005468:	69ab      	ldr	r3, [r5, #24]
 800546a:	68ac      	ldr	r4, [r5, #8]
 800546c:	b913      	cbnz	r3, 8005474 <_puts_r+0x1c>
 800546e:	4628      	mov	r0, r5
 8005470:	f000 fb50 	bl	8005b14 <__sinit>
 8005474:	4b2c      	ldr	r3, [pc, #176]	; (8005528 <_puts_r+0xd0>)
 8005476:	429c      	cmp	r4, r3
 8005478:	d120      	bne.n	80054bc <_puts_r+0x64>
 800547a:	686c      	ldr	r4, [r5, #4]
 800547c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800547e:	07db      	lsls	r3, r3, #31
 8005480:	d405      	bmi.n	800548e <_puts_r+0x36>
 8005482:	89a3      	ldrh	r3, [r4, #12]
 8005484:	0598      	lsls	r0, r3, #22
 8005486:	d402      	bmi.n	800548e <_puts_r+0x36>
 8005488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800548a:	f000 fbf3 	bl	8005c74 <__retarget_lock_acquire_recursive>
 800548e:	89a3      	ldrh	r3, [r4, #12]
 8005490:	0719      	lsls	r1, r3, #28
 8005492:	d51d      	bpl.n	80054d0 <_puts_r+0x78>
 8005494:	6923      	ldr	r3, [r4, #16]
 8005496:	b1db      	cbz	r3, 80054d0 <_puts_r+0x78>
 8005498:	3e01      	subs	r6, #1
 800549a:	68a3      	ldr	r3, [r4, #8]
 800549c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80054a0:	3b01      	subs	r3, #1
 80054a2:	60a3      	str	r3, [r4, #8]
 80054a4:	bb39      	cbnz	r1, 80054f6 <_puts_r+0x9e>
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	da38      	bge.n	800551c <_puts_r+0xc4>
 80054aa:	4622      	mov	r2, r4
 80054ac:	210a      	movs	r1, #10
 80054ae:	4628      	mov	r0, r5
 80054b0:	f000 f938 	bl	8005724 <__swbuf_r>
 80054b4:	3001      	adds	r0, #1
 80054b6:	d011      	beq.n	80054dc <_puts_r+0x84>
 80054b8:	250a      	movs	r5, #10
 80054ba:	e011      	b.n	80054e0 <_puts_r+0x88>
 80054bc:	4b1b      	ldr	r3, [pc, #108]	; (800552c <_puts_r+0xd4>)
 80054be:	429c      	cmp	r4, r3
 80054c0:	d101      	bne.n	80054c6 <_puts_r+0x6e>
 80054c2:	68ac      	ldr	r4, [r5, #8]
 80054c4:	e7da      	b.n	800547c <_puts_r+0x24>
 80054c6:	4b1a      	ldr	r3, [pc, #104]	; (8005530 <_puts_r+0xd8>)
 80054c8:	429c      	cmp	r4, r3
 80054ca:	bf08      	it	eq
 80054cc:	68ec      	ldreq	r4, [r5, #12]
 80054ce:	e7d5      	b.n	800547c <_puts_r+0x24>
 80054d0:	4621      	mov	r1, r4
 80054d2:	4628      	mov	r0, r5
 80054d4:	f000 f978 	bl	80057c8 <__swsetup_r>
 80054d8:	2800      	cmp	r0, #0
 80054da:	d0dd      	beq.n	8005498 <_puts_r+0x40>
 80054dc:	f04f 35ff 	mov.w	r5, #4294967295
 80054e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054e2:	07da      	lsls	r2, r3, #31
 80054e4:	d405      	bmi.n	80054f2 <_puts_r+0x9a>
 80054e6:	89a3      	ldrh	r3, [r4, #12]
 80054e8:	059b      	lsls	r3, r3, #22
 80054ea:	d402      	bmi.n	80054f2 <_puts_r+0x9a>
 80054ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054ee:	f000 fbc2 	bl	8005c76 <__retarget_lock_release_recursive>
 80054f2:	4628      	mov	r0, r5
 80054f4:	bd70      	pop	{r4, r5, r6, pc}
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	da04      	bge.n	8005504 <_puts_r+0xac>
 80054fa:	69a2      	ldr	r2, [r4, #24]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	dc06      	bgt.n	800550e <_puts_r+0xb6>
 8005500:	290a      	cmp	r1, #10
 8005502:	d004      	beq.n	800550e <_puts_r+0xb6>
 8005504:	6823      	ldr	r3, [r4, #0]
 8005506:	1c5a      	adds	r2, r3, #1
 8005508:	6022      	str	r2, [r4, #0]
 800550a:	7019      	strb	r1, [r3, #0]
 800550c:	e7c5      	b.n	800549a <_puts_r+0x42>
 800550e:	4622      	mov	r2, r4
 8005510:	4628      	mov	r0, r5
 8005512:	f000 f907 	bl	8005724 <__swbuf_r>
 8005516:	3001      	adds	r0, #1
 8005518:	d1bf      	bne.n	800549a <_puts_r+0x42>
 800551a:	e7df      	b.n	80054dc <_puts_r+0x84>
 800551c:	6823      	ldr	r3, [r4, #0]
 800551e:	250a      	movs	r5, #10
 8005520:	1c5a      	adds	r2, r3, #1
 8005522:	6022      	str	r2, [r4, #0]
 8005524:	701d      	strb	r5, [r3, #0]
 8005526:	e7db      	b.n	80054e0 <_puts_r+0x88>
 8005528:	080069e4 	.word	0x080069e4
 800552c:	08006a04 	.word	0x08006a04
 8005530:	080069c4 	.word	0x080069c4

08005534 <puts>:
 8005534:	4b02      	ldr	r3, [pc, #8]	; (8005540 <puts+0xc>)
 8005536:	4601      	mov	r1, r0
 8005538:	6818      	ldr	r0, [r3, #0]
 800553a:	f7ff bf8d 	b.w	8005458 <_puts_r>
 800553e:	bf00      	nop
 8005540:	20000194 	.word	0x20000194

08005544 <strcpy>:
 8005544:	4603      	mov	r3, r0
 8005546:	f811 2b01 	ldrb.w	r2, [r1], #1
 800554a:	f803 2b01 	strb.w	r2, [r3], #1
 800554e:	2a00      	cmp	r2, #0
 8005550:	d1f9      	bne.n	8005546 <strcpy+0x2>
 8005552:	4770      	bx	lr

08005554 <strtok>:
 8005554:	4b16      	ldr	r3, [pc, #88]	; (80055b0 <strtok+0x5c>)
 8005556:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005558:	681e      	ldr	r6, [r3, #0]
 800555a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800555c:	4605      	mov	r5, r0
 800555e:	b9fc      	cbnz	r4, 80055a0 <strtok+0x4c>
 8005560:	2050      	movs	r0, #80	; 0x50
 8005562:	9101      	str	r1, [sp, #4]
 8005564:	f000 fbee 	bl	8005d44 <malloc>
 8005568:	9901      	ldr	r1, [sp, #4]
 800556a:	65b0      	str	r0, [r6, #88]	; 0x58
 800556c:	4602      	mov	r2, r0
 800556e:	b920      	cbnz	r0, 800557a <strtok+0x26>
 8005570:	4b10      	ldr	r3, [pc, #64]	; (80055b4 <strtok+0x60>)
 8005572:	4811      	ldr	r0, [pc, #68]	; (80055b8 <strtok+0x64>)
 8005574:	2157      	movs	r1, #87	; 0x57
 8005576:	f000 f995 	bl	80058a4 <__assert_func>
 800557a:	e9c0 4400 	strd	r4, r4, [r0]
 800557e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005582:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005586:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800558a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800558e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005592:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005596:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800559a:	6184      	str	r4, [r0, #24]
 800559c:	7704      	strb	r4, [r0, #28]
 800559e:	6244      	str	r4, [r0, #36]	; 0x24
 80055a0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80055a2:	2301      	movs	r3, #1
 80055a4:	4628      	mov	r0, r5
 80055a6:	b002      	add	sp, #8
 80055a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80055ac:	f000 b806 	b.w	80055bc <__strtok_r>
 80055b0:	20000194 	.word	0x20000194
 80055b4:	08006810 	.word	0x08006810
 80055b8:	08006827 	.word	0x08006827

080055bc <__strtok_r>:
 80055bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055be:	b908      	cbnz	r0, 80055c4 <__strtok_r+0x8>
 80055c0:	6810      	ldr	r0, [r2, #0]
 80055c2:	b188      	cbz	r0, 80055e8 <__strtok_r+0x2c>
 80055c4:	4604      	mov	r4, r0
 80055c6:	4620      	mov	r0, r4
 80055c8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80055cc:	460f      	mov	r7, r1
 80055ce:	f817 6b01 	ldrb.w	r6, [r7], #1
 80055d2:	b91e      	cbnz	r6, 80055dc <__strtok_r+0x20>
 80055d4:	b965      	cbnz	r5, 80055f0 <__strtok_r+0x34>
 80055d6:	6015      	str	r5, [r2, #0]
 80055d8:	4628      	mov	r0, r5
 80055da:	e005      	b.n	80055e8 <__strtok_r+0x2c>
 80055dc:	42b5      	cmp	r5, r6
 80055de:	d1f6      	bne.n	80055ce <__strtok_r+0x12>
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1f0      	bne.n	80055c6 <__strtok_r+0xa>
 80055e4:	6014      	str	r4, [r2, #0]
 80055e6:	7003      	strb	r3, [r0, #0]
 80055e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055ea:	461c      	mov	r4, r3
 80055ec:	e00c      	b.n	8005608 <__strtok_r+0x4c>
 80055ee:	b915      	cbnz	r5, 80055f6 <__strtok_r+0x3a>
 80055f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80055f4:	460e      	mov	r6, r1
 80055f6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80055fa:	42ab      	cmp	r3, r5
 80055fc:	d1f7      	bne.n	80055ee <__strtok_r+0x32>
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d0f3      	beq.n	80055ea <__strtok_r+0x2e>
 8005602:	2300      	movs	r3, #0
 8005604:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005608:	6014      	str	r4, [r2, #0]
 800560a:	e7ed      	b.n	80055e8 <__strtok_r+0x2c>

0800560c <_strtol_l.constprop.0>:
 800560c:	2b01      	cmp	r3, #1
 800560e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005612:	d001      	beq.n	8005618 <_strtol_l.constprop.0+0xc>
 8005614:	2b24      	cmp	r3, #36	; 0x24
 8005616:	d906      	bls.n	8005626 <_strtol_l.constprop.0+0x1a>
 8005618:	f7ff fed4 	bl	80053c4 <__errno>
 800561c:	2316      	movs	r3, #22
 800561e:	6003      	str	r3, [r0, #0]
 8005620:	2000      	movs	r0, #0
 8005622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005626:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800570c <_strtol_l.constprop.0+0x100>
 800562a:	460d      	mov	r5, r1
 800562c:	462e      	mov	r6, r5
 800562e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005632:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005636:	f017 0708 	ands.w	r7, r7, #8
 800563a:	d1f7      	bne.n	800562c <_strtol_l.constprop.0+0x20>
 800563c:	2c2d      	cmp	r4, #45	; 0x2d
 800563e:	d132      	bne.n	80056a6 <_strtol_l.constprop.0+0x9a>
 8005640:	782c      	ldrb	r4, [r5, #0]
 8005642:	2701      	movs	r7, #1
 8005644:	1cb5      	adds	r5, r6, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d05b      	beq.n	8005702 <_strtol_l.constprop.0+0xf6>
 800564a:	2b10      	cmp	r3, #16
 800564c:	d109      	bne.n	8005662 <_strtol_l.constprop.0+0x56>
 800564e:	2c30      	cmp	r4, #48	; 0x30
 8005650:	d107      	bne.n	8005662 <_strtol_l.constprop.0+0x56>
 8005652:	782c      	ldrb	r4, [r5, #0]
 8005654:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005658:	2c58      	cmp	r4, #88	; 0x58
 800565a:	d14d      	bne.n	80056f8 <_strtol_l.constprop.0+0xec>
 800565c:	786c      	ldrb	r4, [r5, #1]
 800565e:	2310      	movs	r3, #16
 8005660:	3502      	adds	r5, #2
 8005662:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005666:	f108 38ff 	add.w	r8, r8, #4294967295
 800566a:	f04f 0c00 	mov.w	ip, #0
 800566e:	fbb8 f9f3 	udiv	r9, r8, r3
 8005672:	4666      	mov	r6, ip
 8005674:	fb03 8a19 	mls	sl, r3, r9, r8
 8005678:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800567c:	f1be 0f09 	cmp.w	lr, #9
 8005680:	d816      	bhi.n	80056b0 <_strtol_l.constprop.0+0xa4>
 8005682:	4674      	mov	r4, lr
 8005684:	42a3      	cmp	r3, r4
 8005686:	dd24      	ble.n	80056d2 <_strtol_l.constprop.0+0xc6>
 8005688:	f1bc 0f00 	cmp.w	ip, #0
 800568c:	db1e      	blt.n	80056cc <_strtol_l.constprop.0+0xc0>
 800568e:	45b1      	cmp	r9, r6
 8005690:	d31c      	bcc.n	80056cc <_strtol_l.constprop.0+0xc0>
 8005692:	d101      	bne.n	8005698 <_strtol_l.constprop.0+0x8c>
 8005694:	45a2      	cmp	sl, r4
 8005696:	db19      	blt.n	80056cc <_strtol_l.constprop.0+0xc0>
 8005698:	fb06 4603 	mla	r6, r6, r3, r4
 800569c:	f04f 0c01 	mov.w	ip, #1
 80056a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80056a4:	e7e8      	b.n	8005678 <_strtol_l.constprop.0+0x6c>
 80056a6:	2c2b      	cmp	r4, #43	; 0x2b
 80056a8:	bf04      	itt	eq
 80056aa:	782c      	ldrbeq	r4, [r5, #0]
 80056ac:	1cb5      	addeq	r5, r6, #2
 80056ae:	e7ca      	b.n	8005646 <_strtol_l.constprop.0+0x3a>
 80056b0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80056b4:	f1be 0f19 	cmp.w	lr, #25
 80056b8:	d801      	bhi.n	80056be <_strtol_l.constprop.0+0xb2>
 80056ba:	3c37      	subs	r4, #55	; 0x37
 80056bc:	e7e2      	b.n	8005684 <_strtol_l.constprop.0+0x78>
 80056be:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80056c2:	f1be 0f19 	cmp.w	lr, #25
 80056c6:	d804      	bhi.n	80056d2 <_strtol_l.constprop.0+0xc6>
 80056c8:	3c57      	subs	r4, #87	; 0x57
 80056ca:	e7db      	b.n	8005684 <_strtol_l.constprop.0+0x78>
 80056cc:	f04f 3cff 	mov.w	ip, #4294967295
 80056d0:	e7e6      	b.n	80056a0 <_strtol_l.constprop.0+0x94>
 80056d2:	f1bc 0f00 	cmp.w	ip, #0
 80056d6:	da05      	bge.n	80056e4 <_strtol_l.constprop.0+0xd8>
 80056d8:	2322      	movs	r3, #34	; 0x22
 80056da:	6003      	str	r3, [r0, #0]
 80056dc:	4646      	mov	r6, r8
 80056de:	b942      	cbnz	r2, 80056f2 <_strtol_l.constprop.0+0xe6>
 80056e0:	4630      	mov	r0, r6
 80056e2:	e79e      	b.n	8005622 <_strtol_l.constprop.0+0x16>
 80056e4:	b107      	cbz	r7, 80056e8 <_strtol_l.constprop.0+0xdc>
 80056e6:	4276      	negs	r6, r6
 80056e8:	2a00      	cmp	r2, #0
 80056ea:	d0f9      	beq.n	80056e0 <_strtol_l.constprop.0+0xd4>
 80056ec:	f1bc 0f00 	cmp.w	ip, #0
 80056f0:	d000      	beq.n	80056f4 <_strtol_l.constprop.0+0xe8>
 80056f2:	1e69      	subs	r1, r5, #1
 80056f4:	6011      	str	r1, [r2, #0]
 80056f6:	e7f3      	b.n	80056e0 <_strtol_l.constprop.0+0xd4>
 80056f8:	2430      	movs	r4, #48	; 0x30
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1b1      	bne.n	8005662 <_strtol_l.constprop.0+0x56>
 80056fe:	2308      	movs	r3, #8
 8005700:	e7af      	b.n	8005662 <_strtol_l.constprop.0+0x56>
 8005702:	2c30      	cmp	r4, #48	; 0x30
 8005704:	d0a5      	beq.n	8005652 <_strtol_l.constprop.0+0x46>
 8005706:	230a      	movs	r3, #10
 8005708:	e7ab      	b.n	8005662 <_strtol_l.constprop.0+0x56>
 800570a:	bf00      	nop
 800570c:	080068c1 	.word	0x080068c1

08005710 <strtol>:
 8005710:	4613      	mov	r3, r2
 8005712:	460a      	mov	r2, r1
 8005714:	4601      	mov	r1, r0
 8005716:	4802      	ldr	r0, [pc, #8]	; (8005720 <strtol+0x10>)
 8005718:	6800      	ldr	r0, [r0, #0]
 800571a:	f7ff bf77 	b.w	800560c <_strtol_l.constprop.0>
 800571e:	bf00      	nop
 8005720:	20000194 	.word	0x20000194

08005724 <__swbuf_r>:
 8005724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005726:	460e      	mov	r6, r1
 8005728:	4614      	mov	r4, r2
 800572a:	4605      	mov	r5, r0
 800572c:	b118      	cbz	r0, 8005736 <__swbuf_r+0x12>
 800572e:	6983      	ldr	r3, [r0, #24]
 8005730:	b90b      	cbnz	r3, 8005736 <__swbuf_r+0x12>
 8005732:	f000 f9ef 	bl	8005b14 <__sinit>
 8005736:	4b21      	ldr	r3, [pc, #132]	; (80057bc <__swbuf_r+0x98>)
 8005738:	429c      	cmp	r4, r3
 800573a:	d12b      	bne.n	8005794 <__swbuf_r+0x70>
 800573c:	686c      	ldr	r4, [r5, #4]
 800573e:	69a3      	ldr	r3, [r4, #24]
 8005740:	60a3      	str	r3, [r4, #8]
 8005742:	89a3      	ldrh	r3, [r4, #12]
 8005744:	071a      	lsls	r2, r3, #28
 8005746:	d52f      	bpl.n	80057a8 <__swbuf_r+0x84>
 8005748:	6923      	ldr	r3, [r4, #16]
 800574a:	b36b      	cbz	r3, 80057a8 <__swbuf_r+0x84>
 800574c:	6923      	ldr	r3, [r4, #16]
 800574e:	6820      	ldr	r0, [r4, #0]
 8005750:	1ac0      	subs	r0, r0, r3
 8005752:	6963      	ldr	r3, [r4, #20]
 8005754:	b2f6      	uxtb	r6, r6
 8005756:	4283      	cmp	r3, r0
 8005758:	4637      	mov	r7, r6
 800575a:	dc04      	bgt.n	8005766 <__swbuf_r+0x42>
 800575c:	4621      	mov	r1, r4
 800575e:	4628      	mov	r0, r5
 8005760:	f000 f944 	bl	80059ec <_fflush_r>
 8005764:	bb30      	cbnz	r0, 80057b4 <__swbuf_r+0x90>
 8005766:	68a3      	ldr	r3, [r4, #8]
 8005768:	3b01      	subs	r3, #1
 800576a:	60a3      	str	r3, [r4, #8]
 800576c:	6823      	ldr	r3, [r4, #0]
 800576e:	1c5a      	adds	r2, r3, #1
 8005770:	6022      	str	r2, [r4, #0]
 8005772:	701e      	strb	r6, [r3, #0]
 8005774:	6963      	ldr	r3, [r4, #20]
 8005776:	3001      	adds	r0, #1
 8005778:	4283      	cmp	r3, r0
 800577a:	d004      	beq.n	8005786 <__swbuf_r+0x62>
 800577c:	89a3      	ldrh	r3, [r4, #12]
 800577e:	07db      	lsls	r3, r3, #31
 8005780:	d506      	bpl.n	8005790 <__swbuf_r+0x6c>
 8005782:	2e0a      	cmp	r6, #10
 8005784:	d104      	bne.n	8005790 <__swbuf_r+0x6c>
 8005786:	4621      	mov	r1, r4
 8005788:	4628      	mov	r0, r5
 800578a:	f000 f92f 	bl	80059ec <_fflush_r>
 800578e:	b988      	cbnz	r0, 80057b4 <__swbuf_r+0x90>
 8005790:	4638      	mov	r0, r7
 8005792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005794:	4b0a      	ldr	r3, [pc, #40]	; (80057c0 <__swbuf_r+0x9c>)
 8005796:	429c      	cmp	r4, r3
 8005798:	d101      	bne.n	800579e <__swbuf_r+0x7a>
 800579a:	68ac      	ldr	r4, [r5, #8]
 800579c:	e7cf      	b.n	800573e <__swbuf_r+0x1a>
 800579e:	4b09      	ldr	r3, [pc, #36]	; (80057c4 <__swbuf_r+0xa0>)
 80057a0:	429c      	cmp	r4, r3
 80057a2:	bf08      	it	eq
 80057a4:	68ec      	ldreq	r4, [r5, #12]
 80057a6:	e7ca      	b.n	800573e <__swbuf_r+0x1a>
 80057a8:	4621      	mov	r1, r4
 80057aa:	4628      	mov	r0, r5
 80057ac:	f000 f80c 	bl	80057c8 <__swsetup_r>
 80057b0:	2800      	cmp	r0, #0
 80057b2:	d0cb      	beq.n	800574c <__swbuf_r+0x28>
 80057b4:	f04f 37ff 	mov.w	r7, #4294967295
 80057b8:	e7ea      	b.n	8005790 <__swbuf_r+0x6c>
 80057ba:	bf00      	nop
 80057bc:	080069e4 	.word	0x080069e4
 80057c0:	08006a04 	.word	0x08006a04
 80057c4:	080069c4 	.word	0x080069c4

080057c8 <__swsetup_r>:
 80057c8:	4b32      	ldr	r3, [pc, #200]	; (8005894 <__swsetup_r+0xcc>)
 80057ca:	b570      	push	{r4, r5, r6, lr}
 80057cc:	681d      	ldr	r5, [r3, #0]
 80057ce:	4606      	mov	r6, r0
 80057d0:	460c      	mov	r4, r1
 80057d2:	b125      	cbz	r5, 80057de <__swsetup_r+0x16>
 80057d4:	69ab      	ldr	r3, [r5, #24]
 80057d6:	b913      	cbnz	r3, 80057de <__swsetup_r+0x16>
 80057d8:	4628      	mov	r0, r5
 80057da:	f000 f99b 	bl	8005b14 <__sinit>
 80057de:	4b2e      	ldr	r3, [pc, #184]	; (8005898 <__swsetup_r+0xd0>)
 80057e0:	429c      	cmp	r4, r3
 80057e2:	d10f      	bne.n	8005804 <__swsetup_r+0x3c>
 80057e4:	686c      	ldr	r4, [r5, #4]
 80057e6:	89a3      	ldrh	r3, [r4, #12]
 80057e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057ec:	0719      	lsls	r1, r3, #28
 80057ee:	d42c      	bmi.n	800584a <__swsetup_r+0x82>
 80057f0:	06dd      	lsls	r5, r3, #27
 80057f2:	d411      	bmi.n	8005818 <__swsetup_r+0x50>
 80057f4:	2309      	movs	r3, #9
 80057f6:	6033      	str	r3, [r6, #0]
 80057f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80057fc:	81a3      	strh	r3, [r4, #12]
 80057fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005802:	e03e      	b.n	8005882 <__swsetup_r+0xba>
 8005804:	4b25      	ldr	r3, [pc, #148]	; (800589c <__swsetup_r+0xd4>)
 8005806:	429c      	cmp	r4, r3
 8005808:	d101      	bne.n	800580e <__swsetup_r+0x46>
 800580a:	68ac      	ldr	r4, [r5, #8]
 800580c:	e7eb      	b.n	80057e6 <__swsetup_r+0x1e>
 800580e:	4b24      	ldr	r3, [pc, #144]	; (80058a0 <__swsetup_r+0xd8>)
 8005810:	429c      	cmp	r4, r3
 8005812:	bf08      	it	eq
 8005814:	68ec      	ldreq	r4, [r5, #12]
 8005816:	e7e6      	b.n	80057e6 <__swsetup_r+0x1e>
 8005818:	0758      	lsls	r0, r3, #29
 800581a:	d512      	bpl.n	8005842 <__swsetup_r+0x7a>
 800581c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800581e:	b141      	cbz	r1, 8005832 <__swsetup_r+0x6a>
 8005820:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005824:	4299      	cmp	r1, r3
 8005826:	d002      	beq.n	800582e <__swsetup_r+0x66>
 8005828:	4630      	mov	r0, r6
 800582a:	f000 fa93 	bl	8005d54 <_free_r>
 800582e:	2300      	movs	r3, #0
 8005830:	6363      	str	r3, [r4, #52]	; 0x34
 8005832:	89a3      	ldrh	r3, [r4, #12]
 8005834:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005838:	81a3      	strh	r3, [r4, #12]
 800583a:	2300      	movs	r3, #0
 800583c:	6063      	str	r3, [r4, #4]
 800583e:	6923      	ldr	r3, [r4, #16]
 8005840:	6023      	str	r3, [r4, #0]
 8005842:	89a3      	ldrh	r3, [r4, #12]
 8005844:	f043 0308 	orr.w	r3, r3, #8
 8005848:	81a3      	strh	r3, [r4, #12]
 800584a:	6923      	ldr	r3, [r4, #16]
 800584c:	b94b      	cbnz	r3, 8005862 <__swsetup_r+0x9a>
 800584e:	89a3      	ldrh	r3, [r4, #12]
 8005850:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005858:	d003      	beq.n	8005862 <__swsetup_r+0x9a>
 800585a:	4621      	mov	r1, r4
 800585c:	4630      	mov	r0, r6
 800585e:	f000 fa31 	bl	8005cc4 <__smakebuf_r>
 8005862:	89a0      	ldrh	r0, [r4, #12]
 8005864:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005868:	f010 0301 	ands.w	r3, r0, #1
 800586c:	d00a      	beq.n	8005884 <__swsetup_r+0xbc>
 800586e:	2300      	movs	r3, #0
 8005870:	60a3      	str	r3, [r4, #8]
 8005872:	6963      	ldr	r3, [r4, #20]
 8005874:	425b      	negs	r3, r3
 8005876:	61a3      	str	r3, [r4, #24]
 8005878:	6923      	ldr	r3, [r4, #16]
 800587a:	b943      	cbnz	r3, 800588e <__swsetup_r+0xc6>
 800587c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005880:	d1ba      	bne.n	80057f8 <__swsetup_r+0x30>
 8005882:	bd70      	pop	{r4, r5, r6, pc}
 8005884:	0781      	lsls	r1, r0, #30
 8005886:	bf58      	it	pl
 8005888:	6963      	ldrpl	r3, [r4, #20]
 800588a:	60a3      	str	r3, [r4, #8]
 800588c:	e7f4      	b.n	8005878 <__swsetup_r+0xb0>
 800588e:	2000      	movs	r0, #0
 8005890:	e7f7      	b.n	8005882 <__swsetup_r+0xba>
 8005892:	bf00      	nop
 8005894:	20000194 	.word	0x20000194
 8005898:	080069e4 	.word	0x080069e4
 800589c:	08006a04 	.word	0x08006a04
 80058a0:	080069c4 	.word	0x080069c4

080058a4 <__assert_func>:
 80058a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80058a6:	4614      	mov	r4, r2
 80058a8:	461a      	mov	r2, r3
 80058aa:	4b09      	ldr	r3, [pc, #36]	; (80058d0 <__assert_func+0x2c>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4605      	mov	r5, r0
 80058b0:	68d8      	ldr	r0, [r3, #12]
 80058b2:	b14c      	cbz	r4, 80058c8 <__assert_func+0x24>
 80058b4:	4b07      	ldr	r3, [pc, #28]	; (80058d4 <__assert_func+0x30>)
 80058b6:	9100      	str	r1, [sp, #0]
 80058b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80058bc:	4906      	ldr	r1, [pc, #24]	; (80058d8 <__assert_func+0x34>)
 80058be:	462b      	mov	r3, r5
 80058c0:	f000 f9a6 	bl	8005c10 <fiprintf>
 80058c4:	f000 fe7a 	bl	80065bc <abort>
 80058c8:	4b04      	ldr	r3, [pc, #16]	; (80058dc <__assert_func+0x38>)
 80058ca:	461c      	mov	r4, r3
 80058cc:	e7f3      	b.n	80058b6 <__assert_func+0x12>
 80058ce:	bf00      	nop
 80058d0:	20000194 	.word	0x20000194
 80058d4:	08006884 	.word	0x08006884
 80058d8:	08006891 	.word	0x08006891
 80058dc:	080068bf 	.word	0x080068bf

080058e0 <__sflush_r>:
 80058e0:	898a      	ldrh	r2, [r1, #12]
 80058e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058e6:	4605      	mov	r5, r0
 80058e8:	0710      	lsls	r0, r2, #28
 80058ea:	460c      	mov	r4, r1
 80058ec:	d458      	bmi.n	80059a0 <__sflush_r+0xc0>
 80058ee:	684b      	ldr	r3, [r1, #4]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	dc05      	bgt.n	8005900 <__sflush_r+0x20>
 80058f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	dc02      	bgt.n	8005900 <__sflush_r+0x20>
 80058fa:	2000      	movs	r0, #0
 80058fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005900:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005902:	2e00      	cmp	r6, #0
 8005904:	d0f9      	beq.n	80058fa <__sflush_r+0x1a>
 8005906:	2300      	movs	r3, #0
 8005908:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800590c:	682f      	ldr	r7, [r5, #0]
 800590e:	602b      	str	r3, [r5, #0]
 8005910:	d032      	beq.n	8005978 <__sflush_r+0x98>
 8005912:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005914:	89a3      	ldrh	r3, [r4, #12]
 8005916:	075a      	lsls	r2, r3, #29
 8005918:	d505      	bpl.n	8005926 <__sflush_r+0x46>
 800591a:	6863      	ldr	r3, [r4, #4]
 800591c:	1ac0      	subs	r0, r0, r3
 800591e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005920:	b10b      	cbz	r3, 8005926 <__sflush_r+0x46>
 8005922:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005924:	1ac0      	subs	r0, r0, r3
 8005926:	2300      	movs	r3, #0
 8005928:	4602      	mov	r2, r0
 800592a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800592c:	6a21      	ldr	r1, [r4, #32]
 800592e:	4628      	mov	r0, r5
 8005930:	47b0      	blx	r6
 8005932:	1c43      	adds	r3, r0, #1
 8005934:	89a3      	ldrh	r3, [r4, #12]
 8005936:	d106      	bne.n	8005946 <__sflush_r+0x66>
 8005938:	6829      	ldr	r1, [r5, #0]
 800593a:	291d      	cmp	r1, #29
 800593c:	d82c      	bhi.n	8005998 <__sflush_r+0xb8>
 800593e:	4a2a      	ldr	r2, [pc, #168]	; (80059e8 <__sflush_r+0x108>)
 8005940:	40ca      	lsrs	r2, r1
 8005942:	07d6      	lsls	r6, r2, #31
 8005944:	d528      	bpl.n	8005998 <__sflush_r+0xb8>
 8005946:	2200      	movs	r2, #0
 8005948:	6062      	str	r2, [r4, #4]
 800594a:	04d9      	lsls	r1, r3, #19
 800594c:	6922      	ldr	r2, [r4, #16]
 800594e:	6022      	str	r2, [r4, #0]
 8005950:	d504      	bpl.n	800595c <__sflush_r+0x7c>
 8005952:	1c42      	adds	r2, r0, #1
 8005954:	d101      	bne.n	800595a <__sflush_r+0x7a>
 8005956:	682b      	ldr	r3, [r5, #0]
 8005958:	b903      	cbnz	r3, 800595c <__sflush_r+0x7c>
 800595a:	6560      	str	r0, [r4, #84]	; 0x54
 800595c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800595e:	602f      	str	r7, [r5, #0]
 8005960:	2900      	cmp	r1, #0
 8005962:	d0ca      	beq.n	80058fa <__sflush_r+0x1a>
 8005964:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005968:	4299      	cmp	r1, r3
 800596a:	d002      	beq.n	8005972 <__sflush_r+0x92>
 800596c:	4628      	mov	r0, r5
 800596e:	f000 f9f1 	bl	8005d54 <_free_r>
 8005972:	2000      	movs	r0, #0
 8005974:	6360      	str	r0, [r4, #52]	; 0x34
 8005976:	e7c1      	b.n	80058fc <__sflush_r+0x1c>
 8005978:	6a21      	ldr	r1, [r4, #32]
 800597a:	2301      	movs	r3, #1
 800597c:	4628      	mov	r0, r5
 800597e:	47b0      	blx	r6
 8005980:	1c41      	adds	r1, r0, #1
 8005982:	d1c7      	bne.n	8005914 <__sflush_r+0x34>
 8005984:	682b      	ldr	r3, [r5, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d0c4      	beq.n	8005914 <__sflush_r+0x34>
 800598a:	2b1d      	cmp	r3, #29
 800598c:	d001      	beq.n	8005992 <__sflush_r+0xb2>
 800598e:	2b16      	cmp	r3, #22
 8005990:	d101      	bne.n	8005996 <__sflush_r+0xb6>
 8005992:	602f      	str	r7, [r5, #0]
 8005994:	e7b1      	b.n	80058fa <__sflush_r+0x1a>
 8005996:	89a3      	ldrh	r3, [r4, #12]
 8005998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800599c:	81a3      	strh	r3, [r4, #12]
 800599e:	e7ad      	b.n	80058fc <__sflush_r+0x1c>
 80059a0:	690f      	ldr	r7, [r1, #16]
 80059a2:	2f00      	cmp	r7, #0
 80059a4:	d0a9      	beq.n	80058fa <__sflush_r+0x1a>
 80059a6:	0793      	lsls	r3, r2, #30
 80059a8:	680e      	ldr	r6, [r1, #0]
 80059aa:	bf08      	it	eq
 80059ac:	694b      	ldreq	r3, [r1, #20]
 80059ae:	600f      	str	r7, [r1, #0]
 80059b0:	bf18      	it	ne
 80059b2:	2300      	movne	r3, #0
 80059b4:	eba6 0807 	sub.w	r8, r6, r7
 80059b8:	608b      	str	r3, [r1, #8]
 80059ba:	f1b8 0f00 	cmp.w	r8, #0
 80059be:	dd9c      	ble.n	80058fa <__sflush_r+0x1a>
 80059c0:	6a21      	ldr	r1, [r4, #32]
 80059c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80059c4:	4643      	mov	r3, r8
 80059c6:	463a      	mov	r2, r7
 80059c8:	4628      	mov	r0, r5
 80059ca:	47b0      	blx	r6
 80059cc:	2800      	cmp	r0, #0
 80059ce:	dc06      	bgt.n	80059de <__sflush_r+0xfe>
 80059d0:	89a3      	ldrh	r3, [r4, #12]
 80059d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059d6:	81a3      	strh	r3, [r4, #12]
 80059d8:	f04f 30ff 	mov.w	r0, #4294967295
 80059dc:	e78e      	b.n	80058fc <__sflush_r+0x1c>
 80059de:	4407      	add	r7, r0
 80059e0:	eba8 0800 	sub.w	r8, r8, r0
 80059e4:	e7e9      	b.n	80059ba <__sflush_r+0xda>
 80059e6:	bf00      	nop
 80059e8:	20400001 	.word	0x20400001

080059ec <_fflush_r>:
 80059ec:	b538      	push	{r3, r4, r5, lr}
 80059ee:	690b      	ldr	r3, [r1, #16]
 80059f0:	4605      	mov	r5, r0
 80059f2:	460c      	mov	r4, r1
 80059f4:	b913      	cbnz	r3, 80059fc <_fflush_r+0x10>
 80059f6:	2500      	movs	r5, #0
 80059f8:	4628      	mov	r0, r5
 80059fa:	bd38      	pop	{r3, r4, r5, pc}
 80059fc:	b118      	cbz	r0, 8005a06 <_fflush_r+0x1a>
 80059fe:	6983      	ldr	r3, [r0, #24]
 8005a00:	b90b      	cbnz	r3, 8005a06 <_fflush_r+0x1a>
 8005a02:	f000 f887 	bl	8005b14 <__sinit>
 8005a06:	4b14      	ldr	r3, [pc, #80]	; (8005a58 <_fflush_r+0x6c>)
 8005a08:	429c      	cmp	r4, r3
 8005a0a:	d11b      	bne.n	8005a44 <_fflush_r+0x58>
 8005a0c:	686c      	ldr	r4, [r5, #4]
 8005a0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d0ef      	beq.n	80059f6 <_fflush_r+0xa>
 8005a16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a18:	07d0      	lsls	r0, r2, #31
 8005a1a:	d404      	bmi.n	8005a26 <_fflush_r+0x3a>
 8005a1c:	0599      	lsls	r1, r3, #22
 8005a1e:	d402      	bmi.n	8005a26 <_fflush_r+0x3a>
 8005a20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a22:	f000 f927 	bl	8005c74 <__retarget_lock_acquire_recursive>
 8005a26:	4628      	mov	r0, r5
 8005a28:	4621      	mov	r1, r4
 8005a2a:	f7ff ff59 	bl	80058e0 <__sflush_r>
 8005a2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a30:	07da      	lsls	r2, r3, #31
 8005a32:	4605      	mov	r5, r0
 8005a34:	d4e0      	bmi.n	80059f8 <_fflush_r+0xc>
 8005a36:	89a3      	ldrh	r3, [r4, #12]
 8005a38:	059b      	lsls	r3, r3, #22
 8005a3a:	d4dd      	bmi.n	80059f8 <_fflush_r+0xc>
 8005a3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a3e:	f000 f91a 	bl	8005c76 <__retarget_lock_release_recursive>
 8005a42:	e7d9      	b.n	80059f8 <_fflush_r+0xc>
 8005a44:	4b05      	ldr	r3, [pc, #20]	; (8005a5c <_fflush_r+0x70>)
 8005a46:	429c      	cmp	r4, r3
 8005a48:	d101      	bne.n	8005a4e <_fflush_r+0x62>
 8005a4a:	68ac      	ldr	r4, [r5, #8]
 8005a4c:	e7df      	b.n	8005a0e <_fflush_r+0x22>
 8005a4e:	4b04      	ldr	r3, [pc, #16]	; (8005a60 <_fflush_r+0x74>)
 8005a50:	429c      	cmp	r4, r3
 8005a52:	bf08      	it	eq
 8005a54:	68ec      	ldreq	r4, [r5, #12]
 8005a56:	e7da      	b.n	8005a0e <_fflush_r+0x22>
 8005a58:	080069e4 	.word	0x080069e4
 8005a5c:	08006a04 	.word	0x08006a04
 8005a60:	080069c4 	.word	0x080069c4

08005a64 <std>:
 8005a64:	2300      	movs	r3, #0
 8005a66:	b510      	push	{r4, lr}
 8005a68:	4604      	mov	r4, r0
 8005a6a:	e9c0 3300 	strd	r3, r3, [r0]
 8005a6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a72:	6083      	str	r3, [r0, #8]
 8005a74:	8181      	strh	r1, [r0, #12]
 8005a76:	6643      	str	r3, [r0, #100]	; 0x64
 8005a78:	81c2      	strh	r2, [r0, #14]
 8005a7a:	6183      	str	r3, [r0, #24]
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	2208      	movs	r2, #8
 8005a80:	305c      	adds	r0, #92	; 0x5c
 8005a82:	f7ff fcc9 	bl	8005418 <memset>
 8005a86:	4b05      	ldr	r3, [pc, #20]	; (8005a9c <std+0x38>)
 8005a88:	6263      	str	r3, [r4, #36]	; 0x24
 8005a8a:	4b05      	ldr	r3, [pc, #20]	; (8005aa0 <std+0x3c>)
 8005a8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a8e:	4b05      	ldr	r3, [pc, #20]	; (8005aa4 <std+0x40>)
 8005a90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a92:	4b05      	ldr	r3, [pc, #20]	; (8005aa8 <std+0x44>)
 8005a94:	6224      	str	r4, [r4, #32]
 8005a96:	6323      	str	r3, [r4, #48]	; 0x30
 8005a98:	bd10      	pop	{r4, pc}
 8005a9a:	bf00      	nop
 8005a9c:	08006511 	.word	0x08006511
 8005aa0:	08006533 	.word	0x08006533
 8005aa4:	0800656b 	.word	0x0800656b
 8005aa8:	0800658f 	.word	0x0800658f

08005aac <_cleanup_r>:
 8005aac:	4901      	ldr	r1, [pc, #4]	; (8005ab4 <_cleanup_r+0x8>)
 8005aae:	f000 b8c1 	b.w	8005c34 <_fwalk_reent>
 8005ab2:	bf00      	nop
 8005ab4:	080059ed 	.word	0x080059ed

08005ab8 <__sfmoreglue>:
 8005ab8:	b570      	push	{r4, r5, r6, lr}
 8005aba:	2268      	movs	r2, #104	; 0x68
 8005abc:	1e4d      	subs	r5, r1, #1
 8005abe:	4355      	muls	r5, r2
 8005ac0:	460e      	mov	r6, r1
 8005ac2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005ac6:	f000 f9b1 	bl	8005e2c <_malloc_r>
 8005aca:	4604      	mov	r4, r0
 8005acc:	b140      	cbz	r0, 8005ae0 <__sfmoreglue+0x28>
 8005ace:	2100      	movs	r1, #0
 8005ad0:	e9c0 1600 	strd	r1, r6, [r0]
 8005ad4:	300c      	adds	r0, #12
 8005ad6:	60a0      	str	r0, [r4, #8]
 8005ad8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005adc:	f7ff fc9c 	bl	8005418 <memset>
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	bd70      	pop	{r4, r5, r6, pc}

08005ae4 <__sfp_lock_acquire>:
 8005ae4:	4801      	ldr	r0, [pc, #4]	; (8005aec <__sfp_lock_acquire+0x8>)
 8005ae6:	f000 b8c5 	b.w	8005c74 <__retarget_lock_acquire_recursive>
 8005aea:	bf00      	nop
 8005aec:	2000044d 	.word	0x2000044d

08005af0 <__sfp_lock_release>:
 8005af0:	4801      	ldr	r0, [pc, #4]	; (8005af8 <__sfp_lock_release+0x8>)
 8005af2:	f000 b8c0 	b.w	8005c76 <__retarget_lock_release_recursive>
 8005af6:	bf00      	nop
 8005af8:	2000044d 	.word	0x2000044d

08005afc <__sinit_lock_acquire>:
 8005afc:	4801      	ldr	r0, [pc, #4]	; (8005b04 <__sinit_lock_acquire+0x8>)
 8005afe:	f000 b8b9 	b.w	8005c74 <__retarget_lock_acquire_recursive>
 8005b02:	bf00      	nop
 8005b04:	2000044e 	.word	0x2000044e

08005b08 <__sinit_lock_release>:
 8005b08:	4801      	ldr	r0, [pc, #4]	; (8005b10 <__sinit_lock_release+0x8>)
 8005b0a:	f000 b8b4 	b.w	8005c76 <__retarget_lock_release_recursive>
 8005b0e:	bf00      	nop
 8005b10:	2000044e 	.word	0x2000044e

08005b14 <__sinit>:
 8005b14:	b510      	push	{r4, lr}
 8005b16:	4604      	mov	r4, r0
 8005b18:	f7ff fff0 	bl	8005afc <__sinit_lock_acquire>
 8005b1c:	69a3      	ldr	r3, [r4, #24]
 8005b1e:	b11b      	cbz	r3, 8005b28 <__sinit+0x14>
 8005b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b24:	f7ff bff0 	b.w	8005b08 <__sinit_lock_release>
 8005b28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005b2c:	6523      	str	r3, [r4, #80]	; 0x50
 8005b2e:	4b13      	ldr	r3, [pc, #76]	; (8005b7c <__sinit+0x68>)
 8005b30:	4a13      	ldr	r2, [pc, #76]	; (8005b80 <__sinit+0x6c>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	62a2      	str	r2, [r4, #40]	; 0x28
 8005b36:	42a3      	cmp	r3, r4
 8005b38:	bf04      	itt	eq
 8005b3a:	2301      	moveq	r3, #1
 8005b3c:	61a3      	streq	r3, [r4, #24]
 8005b3e:	4620      	mov	r0, r4
 8005b40:	f000 f820 	bl	8005b84 <__sfp>
 8005b44:	6060      	str	r0, [r4, #4]
 8005b46:	4620      	mov	r0, r4
 8005b48:	f000 f81c 	bl	8005b84 <__sfp>
 8005b4c:	60a0      	str	r0, [r4, #8]
 8005b4e:	4620      	mov	r0, r4
 8005b50:	f000 f818 	bl	8005b84 <__sfp>
 8005b54:	2200      	movs	r2, #0
 8005b56:	60e0      	str	r0, [r4, #12]
 8005b58:	2104      	movs	r1, #4
 8005b5a:	6860      	ldr	r0, [r4, #4]
 8005b5c:	f7ff ff82 	bl	8005a64 <std>
 8005b60:	68a0      	ldr	r0, [r4, #8]
 8005b62:	2201      	movs	r2, #1
 8005b64:	2109      	movs	r1, #9
 8005b66:	f7ff ff7d 	bl	8005a64 <std>
 8005b6a:	68e0      	ldr	r0, [r4, #12]
 8005b6c:	2202      	movs	r2, #2
 8005b6e:	2112      	movs	r1, #18
 8005b70:	f7ff ff78 	bl	8005a64 <std>
 8005b74:	2301      	movs	r3, #1
 8005b76:	61a3      	str	r3, [r4, #24]
 8005b78:	e7d2      	b.n	8005b20 <__sinit+0xc>
 8005b7a:	bf00      	nop
 8005b7c:	0800680c 	.word	0x0800680c
 8005b80:	08005aad 	.word	0x08005aad

08005b84 <__sfp>:
 8005b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b86:	4607      	mov	r7, r0
 8005b88:	f7ff ffac 	bl	8005ae4 <__sfp_lock_acquire>
 8005b8c:	4b1e      	ldr	r3, [pc, #120]	; (8005c08 <__sfp+0x84>)
 8005b8e:	681e      	ldr	r6, [r3, #0]
 8005b90:	69b3      	ldr	r3, [r6, #24]
 8005b92:	b913      	cbnz	r3, 8005b9a <__sfp+0x16>
 8005b94:	4630      	mov	r0, r6
 8005b96:	f7ff ffbd 	bl	8005b14 <__sinit>
 8005b9a:	3648      	adds	r6, #72	; 0x48
 8005b9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	d503      	bpl.n	8005bac <__sfp+0x28>
 8005ba4:	6833      	ldr	r3, [r6, #0]
 8005ba6:	b30b      	cbz	r3, 8005bec <__sfp+0x68>
 8005ba8:	6836      	ldr	r6, [r6, #0]
 8005baa:	e7f7      	b.n	8005b9c <__sfp+0x18>
 8005bac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005bb0:	b9d5      	cbnz	r5, 8005be8 <__sfp+0x64>
 8005bb2:	4b16      	ldr	r3, [pc, #88]	; (8005c0c <__sfp+0x88>)
 8005bb4:	60e3      	str	r3, [r4, #12]
 8005bb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005bba:	6665      	str	r5, [r4, #100]	; 0x64
 8005bbc:	f000 f859 	bl	8005c72 <__retarget_lock_init_recursive>
 8005bc0:	f7ff ff96 	bl	8005af0 <__sfp_lock_release>
 8005bc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005bc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005bcc:	6025      	str	r5, [r4, #0]
 8005bce:	61a5      	str	r5, [r4, #24]
 8005bd0:	2208      	movs	r2, #8
 8005bd2:	4629      	mov	r1, r5
 8005bd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005bd8:	f7ff fc1e 	bl	8005418 <memset>
 8005bdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005be0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005be4:	4620      	mov	r0, r4
 8005be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005be8:	3468      	adds	r4, #104	; 0x68
 8005bea:	e7d9      	b.n	8005ba0 <__sfp+0x1c>
 8005bec:	2104      	movs	r1, #4
 8005bee:	4638      	mov	r0, r7
 8005bf0:	f7ff ff62 	bl	8005ab8 <__sfmoreglue>
 8005bf4:	4604      	mov	r4, r0
 8005bf6:	6030      	str	r0, [r6, #0]
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	d1d5      	bne.n	8005ba8 <__sfp+0x24>
 8005bfc:	f7ff ff78 	bl	8005af0 <__sfp_lock_release>
 8005c00:	230c      	movs	r3, #12
 8005c02:	603b      	str	r3, [r7, #0]
 8005c04:	e7ee      	b.n	8005be4 <__sfp+0x60>
 8005c06:	bf00      	nop
 8005c08:	0800680c 	.word	0x0800680c
 8005c0c:	ffff0001 	.word	0xffff0001

08005c10 <fiprintf>:
 8005c10:	b40e      	push	{r1, r2, r3}
 8005c12:	b503      	push	{r0, r1, lr}
 8005c14:	4601      	mov	r1, r0
 8005c16:	ab03      	add	r3, sp, #12
 8005c18:	4805      	ldr	r0, [pc, #20]	; (8005c30 <fiprintf+0x20>)
 8005c1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c1e:	6800      	ldr	r0, [r0, #0]
 8005c20:	9301      	str	r3, [sp, #4]
 8005c22:	f000 f9a1 	bl	8005f68 <_vfiprintf_r>
 8005c26:	b002      	add	sp, #8
 8005c28:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c2c:	b003      	add	sp, #12
 8005c2e:	4770      	bx	lr
 8005c30:	20000194 	.word	0x20000194

08005c34 <_fwalk_reent>:
 8005c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c38:	4606      	mov	r6, r0
 8005c3a:	4688      	mov	r8, r1
 8005c3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005c40:	2700      	movs	r7, #0
 8005c42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c46:	f1b9 0901 	subs.w	r9, r9, #1
 8005c4a:	d505      	bpl.n	8005c58 <_fwalk_reent+0x24>
 8005c4c:	6824      	ldr	r4, [r4, #0]
 8005c4e:	2c00      	cmp	r4, #0
 8005c50:	d1f7      	bne.n	8005c42 <_fwalk_reent+0xe>
 8005c52:	4638      	mov	r0, r7
 8005c54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c58:	89ab      	ldrh	r3, [r5, #12]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d907      	bls.n	8005c6e <_fwalk_reent+0x3a>
 8005c5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c62:	3301      	adds	r3, #1
 8005c64:	d003      	beq.n	8005c6e <_fwalk_reent+0x3a>
 8005c66:	4629      	mov	r1, r5
 8005c68:	4630      	mov	r0, r6
 8005c6a:	47c0      	blx	r8
 8005c6c:	4307      	orrs	r7, r0
 8005c6e:	3568      	adds	r5, #104	; 0x68
 8005c70:	e7e9      	b.n	8005c46 <_fwalk_reent+0x12>

08005c72 <__retarget_lock_init_recursive>:
 8005c72:	4770      	bx	lr

08005c74 <__retarget_lock_acquire_recursive>:
 8005c74:	4770      	bx	lr

08005c76 <__retarget_lock_release_recursive>:
 8005c76:	4770      	bx	lr

08005c78 <__swhatbuf_r>:
 8005c78:	b570      	push	{r4, r5, r6, lr}
 8005c7a:	460e      	mov	r6, r1
 8005c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c80:	2900      	cmp	r1, #0
 8005c82:	b096      	sub	sp, #88	; 0x58
 8005c84:	4614      	mov	r4, r2
 8005c86:	461d      	mov	r5, r3
 8005c88:	da08      	bge.n	8005c9c <__swhatbuf_r+0x24>
 8005c8a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	602a      	str	r2, [r5, #0]
 8005c92:	061a      	lsls	r2, r3, #24
 8005c94:	d410      	bmi.n	8005cb8 <__swhatbuf_r+0x40>
 8005c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c9a:	e00e      	b.n	8005cba <__swhatbuf_r+0x42>
 8005c9c:	466a      	mov	r2, sp
 8005c9e:	f000 fca5 	bl	80065ec <_fstat_r>
 8005ca2:	2800      	cmp	r0, #0
 8005ca4:	dbf1      	blt.n	8005c8a <__swhatbuf_r+0x12>
 8005ca6:	9a01      	ldr	r2, [sp, #4]
 8005ca8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005cac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005cb0:	425a      	negs	r2, r3
 8005cb2:	415a      	adcs	r2, r3
 8005cb4:	602a      	str	r2, [r5, #0]
 8005cb6:	e7ee      	b.n	8005c96 <__swhatbuf_r+0x1e>
 8005cb8:	2340      	movs	r3, #64	; 0x40
 8005cba:	2000      	movs	r0, #0
 8005cbc:	6023      	str	r3, [r4, #0]
 8005cbe:	b016      	add	sp, #88	; 0x58
 8005cc0:	bd70      	pop	{r4, r5, r6, pc}
	...

08005cc4 <__smakebuf_r>:
 8005cc4:	898b      	ldrh	r3, [r1, #12]
 8005cc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005cc8:	079d      	lsls	r5, r3, #30
 8005cca:	4606      	mov	r6, r0
 8005ccc:	460c      	mov	r4, r1
 8005cce:	d507      	bpl.n	8005ce0 <__smakebuf_r+0x1c>
 8005cd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005cd4:	6023      	str	r3, [r4, #0]
 8005cd6:	6123      	str	r3, [r4, #16]
 8005cd8:	2301      	movs	r3, #1
 8005cda:	6163      	str	r3, [r4, #20]
 8005cdc:	b002      	add	sp, #8
 8005cde:	bd70      	pop	{r4, r5, r6, pc}
 8005ce0:	ab01      	add	r3, sp, #4
 8005ce2:	466a      	mov	r2, sp
 8005ce4:	f7ff ffc8 	bl	8005c78 <__swhatbuf_r>
 8005ce8:	9900      	ldr	r1, [sp, #0]
 8005cea:	4605      	mov	r5, r0
 8005cec:	4630      	mov	r0, r6
 8005cee:	f000 f89d 	bl	8005e2c <_malloc_r>
 8005cf2:	b948      	cbnz	r0, 8005d08 <__smakebuf_r+0x44>
 8005cf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cf8:	059a      	lsls	r2, r3, #22
 8005cfa:	d4ef      	bmi.n	8005cdc <__smakebuf_r+0x18>
 8005cfc:	f023 0303 	bic.w	r3, r3, #3
 8005d00:	f043 0302 	orr.w	r3, r3, #2
 8005d04:	81a3      	strh	r3, [r4, #12]
 8005d06:	e7e3      	b.n	8005cd0 <__smakebuf_r+0xc>
 8005d08:	4b0d      	ldr	r3, [pc, #52]	; (8005d40 <__smakebuf_r+0x7c>)
 8005d0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005d0c:	89a3      	ldrh	r3, [r4, #12]
 8005d0e:	6020      	str	r0, [r4, #0]
 8005d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d14:	81a3      	strh	r3, [r4, #12]
 8005d16:	9b00      	ldr	r3, [sp, #0]
 8005d18:	6163      	str	r3, [r4, #20]
 8005d1a:	9b01      	ldr	r3, [sp, #4]
 8005d1c:	6120      	str	r0, [r4, #16]
 8005d1e:	b15b      	cbz	r3, 8005d38 <__smakebuf_r+0x74>
 8005d20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d24:	4630      	mov	r0, r6
 8005d26:	f000 fc73 	bl	8006610 <_isatty_r>
 8005d2a:	b128      	cbz	r0, 8005d38 <__smakebuf_r+0x74>
 8005d2c:	89a3      	ldrh	r3, [r4, #12]
 8005d2e:	f023 0303 	bic.w	r3, r3, #3
 8005d32:	f043 0301 	orr.w	r3, r3, #1
 8005d36:	81a3      	strh	r3, [r4, #12]
 8005d38:	89a0      	ldrh	r0, [r4, #12]
 8005d3a:	4305      	orrs	r5, r0
 8005d3c:	81a5      	strh	r5, [r4, #12]
 8005d3e:	e7cd      	b.n	8005cdc <__smakebuf_r+0x18>
 8005d40:	08005aad 	.word	0x08005aad

08005d44 <malloc>:
 8005d44:	4b02      	ldr	r3, [pc, #8]	; (8005d50 <malloc+0xc>)
 8005d46:	4601      	mov	r1, r0
 8005d48:	6818      	ldr	r0, [r3, #0]
 8005d4a:	f000 b86f 	b.w	8005e2c <_malloc_r>
 8005d4e:	bf00      	nop
 8005d50:	20000194 	.word	0x20000194

08005d54 <_free_r>:
 8005d54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d56:	2900      	cmp	r1, #0
 8005d58:	d044      	beq.n	8005de4 <_free_r+0x90>
 8005d5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d5e:	9001      	str	r0, [sp, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f1a1 0404 	sub.w	r4, r1, #4
 8005d66:	bfb8      	it	lt
 8005d68:	18e4      	addlt	r4, r4, r3
 8005d6a:	f000 fc73 	bl	8006654 <__malloc_lock>
 8005d6e:	4a1e      	ldr	r2, [pc, #120]	; (8005de8 <_free_r+0x94>)
 8005d70:	9801      	ldr	r0, [sp, #4]
 8005d72:	6813      	ldr	r3, [r2, #0]
 8005d74:	b933      	cbnz	r3, 8005d84 <_free_r+0x30>
 8005d76:	6063      	str	r3, [r4, #4]
 8005d78:	6014      	str	r4, [r2, #0]
 8005d7a:	b003      	add	sp, #12
 8005d7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d80:	f000 bc6e 	b.w	8006660 <__malloc_unlock>
 8005d84:	42a3      	cmp	r3, r4
 8005d86:	d908      	bls.n	8005d9a <_free_r+0x46>
 8005d88:	6825      	ldr	r5, [r4, #0]
 8005d8a:	1961      	adds	r1, r4, r5
 8005d8c:	428b      	cmp	r3, r1
 8005d8e:	bf01      	itttt	eq
 8005d90:	6819      	ldreq	r1, [r3, #0]
 8005d92:	685b      	ldreq	r3, [r3, #4]
 8005d94:	1949      	addeq	r1, r1, r5
 8005d96:	6021      	streq	r1, [r4, #0]
 8005d98:	e7ed      	b.n	8005d76 <_free_r+0x22>
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	b10b      	cbz	r3, 8005da4 <_free_r+0x50>
 8005da0:	42a3      	cmp	r3, r4
 8005da2:	d9fa      	bls.n	8005d9a <_free_r+0x46>
 8005da4:	6811      	ldr	r1, [r2, #0]
 8005da6:	1855      	adds	r5, r2, r1
 8005da8:	42a5      	cmp	r5, r4
 8005daa:	d10b      	bne.n	8005dc4 <_free_r+0x70>
 8005dac:	6824      	ldr	r4, [r4, #0]
 8005dae:	4421      	add	r1, r4
 8005db0:	1854      	adds	r4, r2, r1
 8005db2:	42a3      	cmp	r3, r4
 8005db4:	6011      	str	r1, [r2, #0]
 8005db6:	d1e0      	bne.n	8005d7a <_free_r+0x26>
 8005db8:	681c      	ldr	r4, [r3, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	6053      	str	r3, [r2, #4]
 8005dbe:	4421      	add	r1, r4
 8005dc0:	6011      	str	r1, [r2, #0]
 8005dc2:	e7da      	b.n	8005d7a <_free_r+0x26>
 8005dc4:	d902      	bls.n	8005dcc <_free_r+0x78>
 8005dc6:	230c      	movs	r3, #12
 8005dc8:	6003      	str	r3, [r0, #0]
 8005dca:	e7d6      	b.n	8005d7a <_free_r+0x26>
 8005dcc:	6825      	ldr	r5, [r4, #0]
 8005dce:	1961      	adds	r1, r4, r5
 8005dd0:	428b      	cmp	r3, r1
 8005dd2:	bf04      	itt	eq
 8005dd4:	6819      	ldreq	r1, [r3, #0]
 8005dd6:	685b      	ldreq	r3, [r3, #4]
 8005dd8:	6063      	str	r3, [r4, #4]
 8005dda:	bf04      	itt	eq
 8005ddc:	1949      	addeq	r1, r1, r5
 8005dde:	6021      	streq	r1, [r4, #0]
 8005de0:	6054      	str	r4, [r2, #4]
 8005de2:	e7ca      	b.n	8005d7a <_free_r+0x26>
 8005de4:	b003      	add	sp, #12
 8005de6:	bd30      	pop	{r4, r5, pc}
 8005de8:	20000450 	.word	0x20000450

08005dec <sbrk_aligned>:
 8005dec:	b570      	push	{r4, r5, r6, lr}
 8005dee:	4e0e      	ldr	r6, [pc, #56]	; (8005e28 <sbrk_aligned+0x3c>)
 8005df0:	460c      	mov	r4, r1
 8005df2:	6831      	ldr	r1, [r6, #0]
 8005df4:	4605      	mov	r5, r0
 8005df6:	b911      	cbnz	r1, 8005dfe <sbrk_aligned+0x12>
 8005df8:	f000 fb7a 	bl	80064f0 <_sbrk_r>
 8005dfc:	6030      	str	r0, [r6, #0]
 8005dfe:	4621      	mov	r1, r4
 8005e00:	4628      	mov	r0, r5
 8005e02:	f000 fb75 	bl	80064f0 <_sbrk_r>
 8005e06:	1c43      	adds	r3, r0, #1
 8005e08:	d00a      	beq.n	8005e20 <sbrk_aligned+0x34>
 8005e0a:	1cc4      	adds	r4, r0, #3
 8005e0c:	f024 0403 	bic.w	r4, r4, #3
 8005e10:	42a0      	cmp	r0, r4
 8005e12:	d007      	beq.n	8005e24 <sbrk_aligned+0x38>
 8005e14:	1a21      	subs	r1, r4, r0
 8005e16:	4628      	mov	r0, r5
 8005e18:	f000 fb6a 	bl	80064f0 <_sbrk_r>
 8005e1c:	3001      	adds	r0, #1
 8005e1e:	d101      	bne.n	8005e24 <sbrk_aligned+0x38>
 8005e20:	f04f 34ff 	mov.w	r4, #4294967295
 8005e24:	4620      	mov	r0, r4
 8005e26:	bd70      	pop	{r4, r5, r6, pc}
 8005e28:	20000454 	.word	0x20000454

08005e2c <_malloc_r>:
 8005e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e30:	1ccd      	adds	r5, r1, #3
 8005e32:	f025 0503 	bic.w	r5, r5, #3
 8005e36:	3508      	adds	r5, #8
 8005e38:	2d0c      	cmp	r5, #12
 8005e3a:	bf38      	it	cc
 8005e3c:	250c      	movcc	r5, #12
 8005e3e:	2d00      	cmp	r5, #0
 8005e40:	4607      	mov	r7, r0
 8005e42:	db01      	blt.n	8005e48 <_malloc_r+0x1c>
 8005e44:	42a9      	cmp	r1, r5
 8005e46:	d905      	bls.n	8005e54 <_malloc_r+0x28>
 8005e48:	230c      	movs	r3, #12
 8005e4a:	603b      	str	r3, [r7, #0]
 8005e4c:	2600      	movs	r6, #0
 8005e4e:	4630      	mov	r0, r6
 8005e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e54:	4e2e      	ldr	r6, [pc, #184]	; (8005f10 <_malloc_r+0xe4>)
 8005e56:	f000 fbfd 	bl	8006654 <__malloc_lock>
 8005e5a:	6833      	ldr	r3, [r6, #0]
 8005e5c:	461c      	mov	r4, r3
 8005e5e:	bb34      	cbnz	r4, 8005eae <_malloc_r+0x82>
 8005e60:	4629      	mov	r1, r5
 8005e62:	4638      	mov	r0, r7
 8005e64:	f7ff ffc2 	bl	8005dec <sbrk_aligned>
 8005e68:	1c43      	adds	r3, r0, #1
 8005e6a:	4604      	mov	r4, r0
 8005e6c:	d14d      	bne.n	8005f0a <_malloc_r+0xde>
 8005e6e:	6834      	ldr	r4, [r6, #0]
 8005e70:	4626      	mov	r6, r4
 8005e72:	2e00      	cmp	r6, #0
 8005e74:	d140      	bne.n	8005ef8 <_malloc_r+0xcc>
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	4631      	mov	r1, r6
 8005e7a:	4638      	mov	r0, r7
 8005e7c:	eb04 0803 	add.w	r8, r4, r3
 8005e80:	f000 fb36 	bl	80064f0 <_sbrk_r>
 8005e84:	4580      	cmp	r8, r0
 8005e86:	d13a      	bne.n	8005efe <_malloc_r+0xd2>
 8005e88:	6821      	ldr	r1, [r4, #0]
 8005e8a:	3503      	adds	r5, #3
 8005e8c:	1a6d      	subs	r5, r5, r1
 8005e8e:	f025 0503 	bic.w	r5, r5, #3
 8005e92:	3508      	adds	r5, #8
 8005e94:	2d0c      	cmp	r5, #12
 8005e96:	bf38      	it	cc
 8005e98:	250c      	movcc	r5, #12
 8005e9a:	4629      	mov	r1, r5
 8005e9c:	4638      	mov	r0, r7
 8005e9e:	f7ff ffa5 	bl	8005dec <sbrk_aligned>
 8005ea2:	3001      	adds	r0, #1
 8005ea4:	d02b      	beq.n	8005efe <_malloc_r+0xd2>
 8005ea6:	6823      	ldr	r3, [r4, #0]
 8005ea8:	442b      	add	r3, r5
 8005eaa:	6023      	str	r3, [r4, #0]
 8005eac:	e00e      	b.n	8005ecc <_malloc_r+0xa0>
 8005eae:	6822      	ldr	r2, [r4, #0]
 8005eb0:	1b52      	subs	r2, r2, r5
 8005eb2:	d41e      	bmi.n	8005ef2 <_malloc_r+0xc6>
 8005eb4:	2a0b      	cmp	r2, #11
 8005eb6:	d916      	bls.n	8005ee6 <_malloc_r+0xba>
 8005eb8:	1961      	adds	r1, r4, r5
 8005eba:	42a3      	cmp	r3, r4
 8005ebc:	6025      	str	r5, [r4, #0]
 8005ebe:	bf18      	it	ne
 8005ec0:	6059      	strne	r1, [r3, #4]
 8005ec2:	6863      	ldr	r3, [r4, #4]
 8005ec4:	bf08      	it	eq
 8005ec6:	6031      	streq	r1, [r6, #0]
 8005ec8:	5162      	str	r2, [r4, r5]
 8005eca:	604b      	str	r3, [r1, #4]
 8005ecc:	4638      	mov	r0, r7
 8005ece:	f104 060b 	add.w	r6, r4, #11
 8005ed2:	f000 fbc5 	bl	8006660 <__malloc_unlock>
 8005ed6:	f026 0607 	bic.w	r6, r6, #7
 8005eda:	1d23      	adds	r3, r4, #4
 8005edc:	1af2      	subs	r2, r6, r3
 8005ede:	d0b6      	beq.n	8005e4e <_malloc_r+0x22>
 8005ee0:	1b9b      	subs	r3, r3, r6
 8005ee2:	50a3      	str	r3, [r4, r2]
 8005ee4:	e7b3      	b.n	8005e4e <_malloc_r+0x22>
 8005ee6:	6862      	ldr	r2, [r4, #4]
 8005ee8:	42a3      	cmp	r3, r4
 8005eea:	bf0c      	ite	eq
 8005eec:	6032      	streq	r2, [r6, #0]
 8005eee:	605a      	strne	r2, [r3, #4]
 8005ef0:	e7ec      	b.n	8005ecc <_malloc_r+0xa0>
 8005ef2:	4623      	mov	r3, r4
 8005ef4:	6864      	ldr	r4, [r4, #4]
 8005ef6:	e7b2      	b.n	8005e5e <_malloc_r+0x32>
 8005ef8:	4634      	mov	r4, r6
 8005efa:	6876      	ldr	r6, [r6, #4]
 8005efc:	e7b9      	b.n	8005e72 <_malloc_r+0x46>
 8005efe:	230c      	movs	r3, #12
 8005f00:	603b      	str	r3, [r7, #0]
 8005f02:	4638      	mov	r0, r7
 8005f04:	f000 fbac 	bl	8006660 <__malloc_unlock>
 8005f08:	e7a1      	b.n	8005e4e <_malloc_r+0x22>
 8005f0a:	6025      	str	r5, [r4, #0]
 8005f0c:	e7de      	b.n	8005ecc <_malloc_r+0xa0>
 8005f0e:	bf00      	nop
 8005f10:	20000450 	.word	0x20000450

08005f14 <__sfputc_r>:
 8005f14:	6893      	ldr	r3, [r2, #8]
 8005f16:	3b01      	subs	r3, #1
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	b410      	push	{r4}
 8005f1c:	6093      	str	r3, [r2, #8]
 8005f1e:	da08      	bge.n	8005f32 <__sfputc_r+0x1e>
 8005f20:	6994      	ldr	r4, [r2, #24]
 8005f22:	42a3      	cmp	r3, r4
 8005f24:	db01      	blt.n	8005f2a <__sfputc_r+0x16>
 8005f26:	290a      	cmp	r1, #10
 8005f28:	d103      	bne.n	8005f32 <__sfputc_r+0x1e>
 8005f2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f2e:	f7ff bbf9 	b.w	8005724 <__swbuf_r>
 8005f32:	6813      	ldr	r3, [r2, #0]
 8005f34:	1c58      	adds	r0, r3, #1
 8005f36:	6010      	str	r0, [r2, #0]
 8005f38:	7019      	strb	r1, [r3, #0]
 8005f3a:	4608      	mov	r0, r1
 8005f3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <__sfputs_r>:
 8005f42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f44:	4606      	mov	r6, r0
 8005f46:	460f      	mov	r7, r1
 8005f48:	4614      	mov	r4, r2
 8005f4a:	18d5      	adds	r5, r2, r3
 8005f4c:	42ac      	cmp	r4, r5
 8005f4e:	d101      	bne.n	8005f54 <__sfputs_r+0x12>
 8005f50:	2000      	movs	r0, #0
 8005f52:	e007      	b.n	8005f64 <__sfputs_r+0x22>
 8005f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f58:	463a      	mov	r2, r7
 8005f5a:	4630      	mov	r0, r6
 8005f5c:	f7ff ffda 	bl	8005f14 <__sfputc_r>
 8005f60:	1c43      	adds	r3, r0, #1
 8005f62:	d1f3      	bne.n	8005f4c <__sfputs_r+0xa>
 8005f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f68 <_vfiprintf_r>:
 8005f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f6c:	460d      	mov	r5, r1
 8005f6e:	b09d      	sub	sp, #116	; 0x74
 8005f70:	4614      	mov	r4, r2
 8005f72:	4698      	mov	r8, r3
 8005f74:	4606      	mov	r6, r0
 8005f76:	b118      	cbz	r0, 8005f80 <_vfiprintf_r+0x18>
 8005f78:	6983      	ldr	r3, [r0, #24]
 8005f7a:	b90b      	cbnz	r3, 8005f80 <_vfiprintf_r+0x18>
 8005f7c:	f7ff fdca 	bl	8005b14 <__sinit>
 8005f80:	4b89      	ldr	r3, [pc, #548]	; (80061a8 <_vfiprintf_r+0x240>)
 8005f82:	429d      	cmp	r5, r3
 8005f84:	d11b      	bne.n	8005fbe <_vfiprintf_r+0x56>
 8005f86:	6875      	ldr	r5, [r6, #4]
 8005f88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f8a:	07d9      	lsls	r1, r3, #31
 8005f8c:	d405      	bmi.n	8005f9a <_vfiprintf_r+0x32>
 8005f8e:	89ab      	ldrh	r3, [r5, #12]
 8005f90:	059a      	lsls	r2, r3, #22
 8005f92:	d402      	bmi.n	8005f9a <_vfiprintf_r+0x32>
 8005f94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f96:	f7ff fe6d 	bl	8005c74 <__retarget_lock_acquire_recursive>
 8005f9a:	89ab      	ldrh	r3, [r5, #12]
 8005f9c:	071b      	lsls	r3, r3, #28
 8005f9e:	d501      	bpl.n	8005fa4 <_vfiprintf_r+0x3c>
 8005fa0:	692b      	ldr	r3, [r5, #16]
 8005fa2:	b9eb      	cbnz	r3, 8005fe0 <_vfiprintf_r+0x78>
 8005fa4:	4629      	mov	r1, r5
 8005fa6:	4630      	mov	r0, r6
 8005fa8:	f7ff fc0e 	bl	80057c8 <__swsetup_r>
 8005fac:	b1c0      	cbz	r0, 8005fe0 <_vfiprintf_r+0x78>
 8005fae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fb0:	07dc      	lsls	r4, r3, #31
 8005fb2:	d50e      	bpl.n	8005fd2 <_vfiprintf_r+0x6a>
 8005fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb8:	b01d      	add	sp, #116	; 0x74
 8005fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fbe:	4b7b      	ldr	r3, [pc, #492]	; (80061ac <_vfiprintf_r+0x244>)
 8005fc0:	429d      	cmp	r5, r3
 8005fc2:	d101      	bne.n	8005fc8 <_vfiprintf_r+0x60>
 8005fc4:	68b5      	ldr	r5, [r6, #8]
 8005fc6:	e7df      	b.n	8005f88 <_vfiprintf_r+0x20>
 8005fc8:	4b79      	ldr	r3, [pc, #484]	; (80061b0 <_vfiprintf_r+0x248>)
 8005fca:	429d      	cmp	r5, r3
 8005fcc:	bf08      	it	eq
 8005fce:	68f5      	ldreq	r5, [r6, #12]
 8005fd0:	e7da      	b.n	8005f88 <_vfiprintf_r+0x20>
 8005fd2:	89ab      	ldrh	r3, [r5, #12]
 8005fd4:	0598      	lsls	r0, r3, #22
 8005fd6:	d4ed      	bmi.n	8005fb4 <_vfiprintf_r+0x4c>
 8005fd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fda:	f7ff fe4c 	bl	8005c76 <__retarget_lock_release_recursive>
 8005fde:	e7e9      	b.n	8005fb4 <_vfiprintf_r+0x4c>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8005fe4:	2320      	movs	r3, #32
 8005fe6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005fea:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fee:	2330      	movs	r3, #48	; 0x30
 8005ff0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80061b4 <_vfiprintf_r+0x24c>
 8005ff4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ff8:	f04f 0901 	mov.w	r9, #1
 8005ffc:	4623      	mov	r3, r4
 8005ffe:	469a      	mov	sl, r3
 8006000:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006004:	b10a      	cbz	r2, 800600a <_vfiprintf_r+0xa2>
 8006006:	2a25      	cmp	r2, #37	; 0x25
 8006008:	d1f9      	bne.n	8005ffe <_vfiprintf_r+0x96>
 800600a:	ebba 0b04 	subs.w	fp, sl, r4
 800600e:	d00b      	beq.n	8006028 <_vfiprintf_r+0xc0>
 8006010:	465b      	mov	r3, fp
 8006012:	4622      	mov	r2, r4
 8006014:	4629      	mov	r1, r5
 8006016:	4630      	mov	r0, r6
 8006018:	f7ff ff93 	bl	8005f42 <__sfputs_r>
 800601c:	3001      	adds	r0, #1
 800601e:	f000 80aa 	beq.w	8006176 <_vfiprintf_r+0x20e>
 8006022:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006024:	445a      	add	r2, fp
 8006026:	9209      	str	r2, [sp, #36]	; 0x24
 8006028:	f89a 3000 	ldrb.w	r3, [sl]
 800602c:	2b00      	cmp	r3, #0
 800602e:	f000 80a2 	beq.w	8006176 <_vfiprintf_r+0x20e>
 8006032:	2300      	movs	r3, #0
 8006034:	f04f 32ff 	mov.w	r2, #4294967295
 8006038:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800603c:	f10a 0a01 	add.w	sl, sl, #1
 8006040:	9304      	str	r3, [sp, #16]
 8006042:	9307      	str	r3, [sp, #28]
 8006044:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006048:	931a      	str	r3, [sp, #104]	; 0x68
 800604a:	4654      	mov	r4, sl
 800604c:	2205      	movs	r2, #5
 800604e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006052:	4858      	ldr	r0, [pc, #352]	; (80061b4 <_vfiprintf_r+0x24c>)
 8006054:	f7fa f8cc 	bl	80001f0 <memchr>
 8006058:	9a04      	ldr	r2, [sp, #16]
 800605a:	b9d8      	cbnz	r0, 8006094 <_vfiprintf_r+0x12c>
 800605c:	06d1      	lsls	r1, r2, #27
 800605e:	bf44      	itt	mi
 8006060:	2320      	movmi	r3, #32
 8006062:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006066:	0713      	lsls	r3, r2, #28
 8006068:	bf44      	itt	mi
 800606a:	232b      	movmi	r3, #43	; 0x2b
 800606c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006070:	f89a 3000 	ldrb.w	r3, [sl]
 8006074:	2b2a      	cmp	r3, #42	; 0x2a
 8006076:	d015      	beq.n	80060a4 <_vfiprintf_r+0x13c>
 8006078:	9a07      	ldr	r2, [sp, #28]
 800607a:	4654      	mov	r4, sl
 800607c:	2000      	movs	r0, #0
 800607e:	f04f 0c0a 	mov.w	ip, #10
 8006082:	4621      	mov	r1, r4
 8006084:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006088:	3b30      	subs	r3, #48	; 0x30
 800608a:	2b09      	cmp	r3, #9
 800608c:	d94e      	bls.n	800612c <_vfiprintf_r+0x1c4>
 800608e:	b1b0      	cbz	r0, 80060be <_vfiprintf_r+0x156>
 8006090:	9207      	str	r2, [sp, #28]
 8006092:	e014      	b.n	80060be <_vfiprintf_r+0x156>
 8006094:	eba0 0308 	sub.w	r3, r0, r8
 8006098:	fa09 f303 	lsl.w	r3, r9, r3
 800609c:	4313      	orrs	r3, r2
 800609e:	9304      	str	r3, [sp, #16]
 80060a0:	46a2      	mov	sl, r4
 80060a2:	e7d2      	b.n	800604a <_vfiprintf_r+0xe2>
 80060a4:	9b03      	ldr	r3, [sp, #12]
 80060a6:	1d19      	adds	r1, r3, #4
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	9103      	str	r1, [sp, #12]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	bfbb      	ittet	lt
 80060b0:	425b      	neglt	r3, r3
 80060b2:	f042 0202 	orrlt.w	r2, r2, #2
 80060b6:	9307      	strge	r3, [sp, #28]
 80060b8:	9307      	strlt	r3, [sp, #28]
 80060ba:	bfb8      	it	lt
 80060bc:	9204      	strlt	r2, [sp, #16]
 80060be:	7823      	ldrb	r3, [r4, #0]
 80060c0:	2b2e      	cmp	r3, #46	; 0x2e
 80060c2:	d10c      	bne.n	80060de <_vfiprintf_r+0x176>
 80060c4:	7863      	ldrb	r3, [r4, #1]
 80060c6:	2b2a      	cmp	r3, #42	; 0x2a
 80060c8:	d135      	bne.n	8006136 <_vfiprintf_r+0x1ce>
 80060ca:	9b03      	ldr	r3, [sp, #12]
 80060cc:	1d1a      	adds	r2, r3, #4
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	9203      	str	r2, [sp, #12]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	bfb8      	it	lt
 80060d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80060da:	3402      	adds	r4, #2
 80060dc:	9305      	str	r3, [sp, #20]
 80060de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80061c4 <_vfiprintf_r+0x25c>
 80060e2:	7821      	ldrb	r1, [r4, #0]
 80060e4:	2203      	movs	r2, #3
 80060e6:	4650      	mov	r0, sl
 80060e8:	f7fa f882 	bl	80001f0 <memchr>
 80060ec:	b140      	cbz	r0, 8006100 <_vfiprintf_r+0x198>
 80060ee:	2340      	movs	r3, #64	; 0x40
 80060f0:	eba0 000a 	sub.w	r0, r0, sl
 80060f4:	fa03 f000 	lsl.w	r0, r3, r0
 80060f8:	9b04      	ldr	r3, [sp, #16]
 80060fa:	4303      	orrs	r3, r0
 80060fc:	3401      	adds	r4, #1
 80060fe:	9304      	str	r3, [sp, #16]
 8006100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006104:	482c      	ldr	r0, [pc, #176]	; (80061b8 <_vfiprintf_r+0x250>)
 8006106:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800610a:	2206      	movs	r2, #6
 800610c:	f7fa f870 	bl	80001f0 <memchr>
 8006110:	2800      	cmp	r0, #0
 8006112:	d03f      	beq.n	8006194 <_vfiprintf_r+0x22c>
 8006114:	4b29      	ldr	r3, [pc, #164]	; (80061bc <_vfiprintf_r+0x254>)
 8006116:	bb1b      	cbnz	r3, 8006160 <_vfiprintf_r+0x1f8>
 8006118:	9b03      	ldr	r3, [sp, #12]
 800611a:	3307      	adds	r3, #7
 800611c:	f023 0307 	bic.w	r3, r3, #7
 8006120:	3308      	adds	r3, #8
 8006122:	9303      	str	r3, [sp, #12]
 8006124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006126:	443b      	add	r3, r7
 8006128:	9309      	str	r3, [sp, #36]	; 0x24
 800612a:	e767      	b.n	8005ffc <_vfiprintf_r+0x94>
 800612c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006130:	460c      	mov	r4, r1
 8006132:	2001      	movs	r0, #1
 8006134:	e7a5      	b.n	8006082 <_vfiprintf_r+0x11a>
 8006136:	2300      	movs	r3, #0
 8006138:	3401      	adds	r4, #1
 800613a:	9305      	str	r3, [sp, #20]
 800613c:	4619      	mov	r1, r3
 800613e:	f04f 0c0a 	mov.w	ip, #10
 8006142:	4620      	mov	r0, r4
 8006144:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006148:	3a30      	subs	r2, #48	; 0x30
 800614a:	2a09      	cmp	r2, #9
 800614c:	d903      	bls.n	8006156 <_vfiprintf_r+0x1ee>
 800614e:	2b00      	cmp	r3, #0
 8006150:	d0c5      	beq.n	80060de <_vfiprintf_r+0x176>
 8006152:	9105      	str	r1, [sp, #20]
 8006154:	e7c3      	b.n	80060de <_vfiprintf_r+0x176>
 8006156:	fb0c 2101 	mla	r1, ip, r1, r2
 800615a:	4604      	mov	r4, r0
 800615c:	2301      	movs	r3, #1
 800615e:	e7f0      	b.n	8006142 <_vfiprintf_r+0x1da>
 8006160:	ab03      	add	r3, sp, #12
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	462a      	mov	r2, r5
 8006166:	4b16      	ldr	r3, [pc, #88]	; (80061c0 <_vfiprintf_r+0x258>)
 8006168:	a904      	add	r1, sp, #16
 800616a:	4630      	mov	r0, r6
 800616c:	f3af 8000 	nop.w
 8006170:	4607      	mov	r7, r0
 8006172:	1c78      	adds	r0, r7, #1
 8006174:	d1d6      	bne.n	8006124 <_vfiprintf_r+0x1bc>
 8006176:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006178:	07d9      	lsls	r1, r3, #31
 800617a:	d405      	bmi.n	8006188 <_vfiprintf_r+0x220>
 800617c:	89ab      	ldrh	r3, [r5, #12]
 800617e:	059a      	lsls	r2, r3, #22
 8006180:	d402      	bmi.n	8006188 <_vfiprintf_r+0x220>
 8006182:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006184:	f7ff fd77 	bl	8005c76 <__retarget_lock_release_recursive>
 8006188:	89ab      	ldrh	r3, [r5, #12]
 800618a:	065b      	lsls	r3, r3, #25
 800618c:	f53f af12 	bmi.w	8005fb4 <_vfiprintf_r+0x4c>
 8006190:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006192:	e711      	b.n	8005fb8 <_vfiprintf_r+0x50>
 8006194:	ab03      	add	r3, sp, #12
 8006196:	9300      	str	r3, [sp, #0]
 8006198:	462a      	mov	r2, r5
 800619a:	4b09      	ldr	r3, [pc, #36]	; (80061c0 <_vfiprintf_r+0x258>)
 800619c:	a904      	add	r1, sp, #16
 800619e:	4630      	mov	r0, r6
 80061a0:	f000 f880 	bl	80062a4 <_printf_i>
 80061a4:	e7e4      	b.n	8006170 <_vfiprintf_r+0x208>
 80061a6:	bf00      	nop
 80061a8:	080069e4 	.word	0x080069e4
 80061ac:	08006a04 	.word	0x08006a04
 80061b0:	080069c4 	.word	0x080069c4
 80061b4:	08006a24 	.word	0x08006a24
 80061b8:	08006a2e 	.word	0x08006a2e
 80061bc:	00000000 	.word	0x00000000
 80061c0:	08005f43 	.word	0x08005f43
 80061c4:	08006a2a 	.word	0x08006a2a

080061c8 <_printf_common>:
 80061c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061cc:	4616      	mov	r6, r2
 80061ce:	4699      	mov	r9, r3
 80061d0:	688a      	ldr	r2, [r1, #8]
 80061d2:	690b      	ldr	r3, [r1, #16]
 80061d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061d8:	4293      	cmp	r3, r2
 80061da:	bfb8      	it	lt
 80061dc:	4613      	movlt	r3, r2
 80061de:	6033      	str	r3, [r6, #0]
 80061e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061e4:	4607      	mov	r7, r0
 80061e6:	460c      	mov	r4, r1
 80061e8:	b10a      	cbz	r2, 80061ee <_printf_common+0x26>
 80061ea:	3301      	adds	r3, #1
 80061ec:	6033      	str	r3, [r6, #0]
 80061ee:	6823      	ldr	r3, [r4, #0]
 80061f0:	0699      	lsls	r1, r3, #26
 80061f2:	bf42      	ittt	mi
 80061f4:	6833      	ldrmi	r3, [r6, #0]
 80061f6:	3302      	addmi	r3, #2
 80061f8:	6033      	strmi	r3, [r6, #0]
 80061fa:	6825      	ldr	r5, [r4, #0]
 80061fc:	f015 0506 	ands.w	r5, r5, #6
 8006200:	d106      	bne.n	8006210 <_printf_common+0x48>
 8006202:	f104 0a19 	add.w	sl, r4, #25
 8006206:	68e3      	ldr	r3, [r4, #12]
 8006208:	6832      	ldr	r2, [r6, #0]
 800620a:	1a9b      	subs	r3, r3, r2
 800620c:	42ab      	cmp	r3, r5
 800620e:	dc26      	bgt.n	800625e <_printf_common+0x96>
 8006210:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006214:	1e13      	subs	r3, r2, #0
 8006216:	6822      	ldr	r2, [r4, #0]
 8006218:	bf18      	it	ne
 800621a:	2301      	movne	r3, #1
 800621c:	0692      	lsls	r2, r2, #26
 800621e:	d42b      	bmi.n	8006278 <_printf_common+0xb0>
 8006220:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006224:	4649      	mov	r1, r9
 8006226:	4638      	mov	r0, r7
 8006228:	47c0      	blx	r8
 800622a:	3001      	adds	r0, #1
 800622c:	d01e      	beq.n	800626c <_printf_common+0xa4>
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	68e5      	ldr	r5, [r4, #12]
 8006232:	6832      	ldr	r2, [r6, #0]
 8006234:	f003 0306 	and.w	r3, r3, #6
 8006238:	2b04      	cmp	r3, #4
 800623a:	bf08      	it	eq
 800623c:	1aad      	subeq	r5, r5, r2
 800623e:	68a3      	ldr	r3, [r4, #8]
 8006240:	6922      	ldr	r2, [r4, #16]
 8006242:	bf0c      	ite	eq
 8006244:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006248:	2500      	movne	r5, #0
 800624a:	4293      	cmp	r3, r2
 800624c:	bfc4      	itt	gt
 800624e:	1a9b      	subgt	r3, r3, r2
 8006250:	18ed      	addgt	r5, r5, r3
 8006252:	2600      	movs	r6, #0
 8006254:	341a      	adds	r4, #26
 8006256:	42b5      	cmp	r5, r6
 8006258:	d11a      	bne.n	8006290 <_printf_common+0xc8>
 800625a:	2000      	movs	r0, #0
 800625c:	e008      	b.n	8006270 <_printf_common+0xa8>
 800625e:	2301      	movs	r3, #1
 8006260:	4652      	mov	r2, sl
 8006262:	4649      	mov	r1, r9
 8006264:	4638      	mov	r0, r7
 8006266:	47c0      	blx	r8
 8006268:	3001      	adds	r0, #1
 800626a:	d103      	bne.n	8006274 <_printf_common+0xac>
 800626c:	f04f 30ff 	mov.w	r0, #4294967295
 8006270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006274:	3501      	adds	r5, #1
 8006276:	e7c6      	b.n	8006206 <_printf_common+0x3e>
 8006278:	18e1      	adds	r1, r4, r3
 800627a:	1c5a      	adds	r2, r3, #1
 800627c:	2030      	movs	r0, #48	; 0x30
 800627e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006282:	4422      	add	r2, r4
 8006284:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006288:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800628c:	3302      	adds	r3, #2
 800628e:	e7c7      	b.n	8006220 <_printf_common+0x58>
 8006290:	2301      	movs	r3, #1
 8006292:	4622      	mov	r2, r4
 8006294:	4649      	mov	r1, r9
 8006296:	4638      	mov	r0, r7
 8006298:	47c0      	blx	r8
 800629a:	3001      	adds	r0, #1
 800629c:	d0e6      	beq.n	800626c <_printf_common+0xa4>
 800629e:	3601      	adds	r6, #1
 80062a0:	e7d9      	b.n	8006256 <_printf_common+0x8e>
	...

080062a4 <_printf_i>:
 80062a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062a8:	7e0f      	ldrb	r7, [r1, #24]
 80062aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80062ac:	2f78      	cmp	r7, #120	; 0x78
 80062ae:	4691      	mov	r9, r2
 80062b0:	4680      	mov	r8, r0
 80062b2:	460c      	mov	r4, r1
 80062b4:	469a      	mov	sl, r3
 80062b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80062ba:	d807      	bhi.n	80062cc <_printf_i+0x28>
 80062bc:	2f62      	cmp	r7, #98	; 0x62
 80062be:	d80a      	bhi.n	80062d6 <_printf_i+0x32>
 80062c0:	2f00      	cmp	r7, #0
 80062c2:	f000 80d8 	beq.w	8006476 <_printf_i+0x1d2>
 80062c6:	2f58      	cmp	r7, #88	; 0x58
 80062c8:	f000 80a3 	beq.w	8006412 <_printf_i+0x16e>
 80062cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062d4:	e03a      	b.n	800634c <_printf_i+0xa8>
 80062d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062da:	2b15      	cmp	r3, #21
 80062dc:	d8f6      	bhi.n	80062cc <_printf_i+0x28>
 80062de:	a101      	add	r1, pc, #4	; (adr r1, 80062e4 <_printf_i+0x40>)
 80062e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062e4:	0800633d 	.word	0x0800633d
 80062e8:	08006351 	.word	0x08006351
 80062ec:	080062cd 	.word	0x080062cd
 80062f0:	080062cd 	.word	0x080062cd
 80062f4:	080062cd 	.word	0x080062cd
 80062f8:	080062cd 	.word	0x080062cd
 80062fc:	08006351 	.word	0x08006351
 8006300:	080062cd 	.word	0x080062cd
 8006304:	080062cd 	.word	0x080062cd
 8006308:	080062cd 	.word	0x080062cd
 800630c:	080062cd 	.word	0x080062cd
 8006310:	0800645d 	.word	0x0800645d
 8006314:	08006381 	.word	0x08006381
 8006318:	0800643f 	.word	0x0800643f
 800631c:	080062cd 	.word	0x080062cd
 8006320:	080062cd 	.word	0x080062cd
 8006324:	0800647f 	.word	0x0800647f
 8006328:	080062cd 	.word	0x080062cd
 800632c:	08006381 	.word	0x08006381
 8006330:	080062cd 	.word	0x080062cd
 8006334:	080062cd 	.word	0x080062cd
 8006338:	08006447 	.word	0x08006447
 800633c:	682b      	ldr	r3, [r5, #0]
 800633e:	1d1a      	adds	r2, r3, #4
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	602a      	str	r2, [r5, #0]
 8006344:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006348:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800634c:	2301      	movs	r3, #1
 800634e:	e0a3      	b.n	8006498 <_printf_i+0x1f4>
 8006350:	6820      	ldr	r0, [r4, #0]
 8006352:	6829      	ldr	r1, [r5, #0]
 8006354:	0606      	lsls	r6, r0, #24
 8006356:	f101 0304 	add.w	r3, r1, #4
 800635a:	d50a      	bpl.n	8006372 <_printf_i+0xce>
 800635c:	680e      	ldr	r6, [r1, #0]
 800635e:	602b      	str	r3, [r5, #0]
 8006360:	2e00      	cmp	r6, #0
 8006362:	da03      	bge.n	800636c <_printf_i+0xc8>
 8006364:	232d      	movs	r3, #45	; 0x2d
 8006366:	4276      	negs	r6, r6
 8006368:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800636c:	485e      	ldr	r0, [pc, #376]	; (80064e8 <_printf_i+0x244>)
 800636e:	230a      	movs	r3, #10
 8006370:	e019      	b.n	80063a6 <_printf_i+0x102>
 8006372:	680e      	ldr	r6, [r1, #0]
 8006374:	602b      	str	r3, [r5, #0]
 8006376:	f010 0f40 	tst.w	r0, #64	; 0x40
 800637a:	bf18      	it	ne
 800637c:	b236      	sxthne	r6, r6
 800637e:	e7ef      	b.n	8006360 <_printf_i+0xbc>
 8006380:	682b      	ldr	r3, [r5, #0]
 8006382:	6820      	ldr	r0, [r4, #0]
 8006384:	1d19      	adds	r1, r3, #4
 8006386:	6029      	str	r1, [r5, #0]
 8006388:	0601      	lsls	r1, r0, #24
 800638a:	d501      	bpl.n	8006390 <_printf_i+0xec>
 800638c:	681e      	ldr	r6, [r3, #0]
 800638e:	e002      	b.n	8006396 <_printf_i+0xf2>
 8006390:	0646      	lsls	r6, r0, #25
 8006392:	d5fb      	bpl.n	800638c <_printf_i+0xe8>
 8006394:	881e      	ldrh	r6, [r3, #0]
 8006396:	4854      	ldr	r0, [pc, #336]	; (80064e8 <_printf_i+0x244>)
 8006398:	2f6f      	cmp	r7, #111	; 0x6f
 800639a:	bf0c      	ite	eq
 800639c:	2308      	moveq	r3, #8
 800639e:	230a      	movne	r3, #10
 80063a0:	2100      	movs	r1, #0
 80063a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063a6:	6865      	ldr	r5, [r4, #4]
 80063a8:	60a5      	str	r5, [r4, #8]
 80063aa:	2d00      	cmp	r5, #0
 80063ac:	bfa2      	ittt	ge
 80063ae:	6821      	ldrge	r1, [r4, #0]
 80063b0:	f021 0104 	bicge.w	r1, r1, #4
 80063b4:	6021      	strge	r1, [r4, #0]
 80063b6:	b90e      	cbnz	r6, 80063bc <_printf_i+0x118>
 80063b8:	2d00      	cmp	r5, #0
 80063ba:	d04d      	beq.n	8006458 <_printf_i+0x1b4>
 80063bc:	4615      	mov	r5, r2
 80063be:	fbb6 f1f3 	udiv	r1, r6, r3
 80063c2:	fb03 6711 	mls	r7, r3, r1, r6
 80063c6:	5dc7      	ldrb	r7, [r0, r7]
 80063c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80063cc:	4637      	mov	r7, r6
 80063ce:	42bb      	cmp	r3, r7
 80063d0:	460e      	mov	r6, r1
 80063d2:	d9f4      	bls.n	80063be <_printf_i+0x11a>
 80063d4:	2b08      	cmp	r3, #8
 80063d6:	d10b      	bne.n	80063f0 <_printf_i+0x14c>
 80063d8:	6823      	ldr	r3, [r4, #0]
 80063da:	07de      	lsls	r6, r3, #31
 80063dc:	d508      	bpl.n	80063f0 <_printf_i+0x14c>
 80063de:	6923      	ldr	r3, [r4, #16]
 80063e0:	6861      	ldr	r1, [r4, #4]
 80063e2:	4299      	cmp	r1, r3
 80063e4:	bfde      	ittt	le
 80063e6:	2330      	movle	r3, #48	; 0x30
 80063e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80063ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80063f0:	1b52      	subs	r2, r2, r5
 80063f2:	6122      	str	r2, [r4, #16]
 80063f4:	f8cd a000 	str.w	sl, [sp]
 80063f8:	464b      	mov	r3, r9
 80063fa:	aa03      	add	r2, sp, #12
 80063fc:	4621      	mov	r1, r4
 80063fe:	4640      	mov	r0, r8
 8006400:	f7ff fee2 	bl	80061c8 <_printf_common>
 8006404:	3001      	adds	r0, #1
 8006406:	d14c      	bne.n	80064a2 <_printf_i+0x1fe>
 8006408:	f04f 30ff 	mov.w	r0, #4294967295
 800640c:	b004      	add	sp, #16
 800640e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006412:	4835      	ldr	r0, [pc, #212]	; (80064e8 <_printf_i+0x244>)
 8006414:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006418:	6829      	ldr	r1, [r5, #0]
 800641a:	6823      	ldr	r3, [r4, #0]
 800641c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006420:	6029      	str	r1, [r5, #0]
 8006422:	061d      	lsls	r5, r3, #24
 8006424:	d514      	bpl.n	8006450 <_printf_i+0x1ac>
 8006426:	07df      	lsls	r7, r3, #31
 8006428:	bf44      	itt	mi
 800642a:	f043 0320 	orrmi.w	r3, r3, #32
 800642e:	6023      	strmi	r3, [r4, #0]
 8006430:	b91e      	cbnz	r6, 800643a <_printf_i+0x196>
 8006432:	6823      	ldr	r3, [r4, #0]
 8006434:	f023 0320 	bic.w	r3, r3, #32
 8006438:	6023      	str	r3, [r4, #0]
 800643a:	2310      	movs	r3, #16
 800643c:	e7b0      	b.n	80063a0 <_printf_i+0xfc>
 800643e:	6823      	ldr	r3, [r4, #0]
 8006440:	f043 0320 	orr.w	r3, r3, #32
 8006444:	6023      	str	r3, [r4, #0]
 8006446:	2378      	movs	r3, #120	; 0x78
 8006448:	4828      	ldr	r0, [pc, #160]	; (80064ec <_printf_i+0x248>)
 800644a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800644e:	e7e3      	b.n	8006418 <_printf_i+0x174>
 8006450:	0659      	lsls	r1, r3, #25
 8006452:	bf48      	it	mi
 8006454:	b2b6      	uxthmi	r6, r6
 8006456:	e7e6      	b.n	8006426 <_printf_i+0x182>
 8006458:	4615      	mov	r5, r2
 800645a:	e7bb      	b.n	80063d4 <_printf_i+0x130>
 800645c:	682b      	ldr	r3, [r5, #0]
 800645e:	6826      	ldr	r6, [r4, #0]
 8006460:	6961      	ldr	r1, [r4, #20]
 8006462:	1d18      	adds	r0, r3, #4
 8006464:	6028      	str	r0, [r5, #0]
 8006466:	0635      	lsls	r5, r6, #24
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	d501      	bpl.n	8006470 <_printf_i+0x1cc>
 800646c:	6019      	str	r1, [r3, #0]
 800646e:	e002      	b.n	8006476 <_printf_i+0x1d2>
 8006470:	0670      	lsls	r0, r6, #25
 8006472:	d5fb      	bpl.n	800646c <_printf_i+0x1c8>
 8006474:	8019      	strh	r1, [r3, #0]
 8006476:	2300      	movs	r3, #0
 8006478:	6123      	str	r3, [r4, #16]
 800647a:	4615      	mov	r5, r2
 800647c:	e7ba      	b.n	80063f4 <_printf_i+0x150>
 800647e:	682b      	ldr	r3, [r5, #0]
 8006480:	1d1a      	adds	r2, r3, #4
 8006482:	602a      	str	r2, [r5, #0]
 8006484:	681d      	ldr	r5, [r3, #0]
 8006486:	6862      	ldr	r2, [r4, #4]
 8006488:	2100      	movs	r1, #0
 800648a:	4628      	mov	r0, r5
 800648c:	f7f9 feb0 	bl	80001f0 <memchr>
 8006490:	b108      	cbz	r0, 8006496 <_printf_i+0x1f2>
 8006492:	1b40      	subs	r0, r0, r5
 8006494:	6060      	str	r0, [r4, #4]
 8006496:	6863      	ldr	r3, [r4, #4]
 8006498:	6123      	str	r3, [r4, #16]
 800649a:	2300      	movs	r3, #0
 800649c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064a0:	e7a8      	b.n	80063f4 <_printf_i+0x150>
 80064a2:	6923      	ldr	r3, [r4, #16]
 80064a4:	462a      	mov	r2, r5
 80064a6:	4649      	mov	r1, r9
 80064a8:	4640      	mov	r0, r8
 80064aa:	47d0      	blx	sl
 80064ac:	3001      	adds	r0, #1
 80064ae:	d0ab      	beq.n	8006408 <_printf_i+0x164>
 80064b0:	6823      	ldr	r3, [r4, #0]
 80064b2:	079b      	lsls	r3, r3, #30
 80064b4:	d413      	bmi.n	80064de <_printf_i+0x23a>
 80064b6:	68e0      	ldr	r0, [r4, #12]
 80064b8:	9b03      	ldr	r3, [sp, #12]
 80064ba:	4298      	cmp	r0, r3
 80064bc:	bfb8      	it	lt
 80064be:	4618      	movlt	r0, r3
 80064c0:	e7a4      	b.n	800640c <_printf_i+0x168>
 80064c2:	2301      	movs	r3, #1
 80064c4:	4632      	mov	r2, r6
 80064c6:	4649      	mov	r1, r9
 80064c8:	4640      	mov	r0, r8
 80064ca:	47d0      	blx	sl
 80064cc:	3001      	adds	r0, #1
 80064ce:	d09b      	beq.n	8006408 <_printf_i+0x164>
 80064d0:	3501      	adds	r5, #1
 80064d2:	68e3      	ldr	r3, [r4, #12]
 80064d4:	9903      	ldr	r1, [sp, #12]
 80064d6:	1a5b      	subs	r3, r3, r1
 80064d8:	42ab      	cmp	r3, r5
 80064da:	dcf2      	bgt.n	80064c2 <_printf_i+0x21e>
 80064dc:	e7eb      	b.n	80064b6 <_printf_i+0x212>
 80064de:	2500      	movs	r5, #0
 80064e0:	f104 0619 	add.w	r6, r4, #25
 80064e4:	e7f5      	b.n	80064d2 <_printf_i+0x22e>
 80064e6:	bf00      	nop
 80064e8:	08006a35 	.word	0x08006a35
 80064ec:	08006a46 	.word	0x08006a46

080064f0 <_sbrk_r>:
 80064f0:	b538      	push	{r3, r4, r5, lr}
 80064f2:	4d06      	ldr	r5, [pc, #24]	; (800650c <_sbrk_r+0x1c>)
 80064f4:	2300      	movs	r3, #0
 80064f6:	4604      	mov	r4, r0
 80064f8:	4608      	mov	r0, r1
 80064fa:	602b      	str	r3, [r5, #0]
 80064fc:	f7fb f832 	bl	8001564 <_sbrk>
 8006500:	1c43      	adds	r3, r0, #1
 8006502:	d102      	bne.n	800650a <_sbrk_r+0x1a>
 8006504:	682b      	ldr	r3, [r5, #0]
 8006506:	b103      	cbz	r3, 800650a <_sbrk_r+0x1a>
 8006508:	6023      	str	r3, [r4, #0]
 800650a:	bd38      	pop	{r3, r4, r5, pc}
 800650c:	20000458 	.word	0x20000458

08006510 <__sread>:
 8006510:	b510      	push	{r4, lr}
 8006512:	460c      	mov	r4, r1
 8006514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006518:	f000 f8a8 	bl	800666c <_read_r>
 800651c:	2800      	cmp	r0, #0
 800651e:	bfab      	itete	ge
 8006520:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006522:	89a3      	ldrhlt	r3, [r4, #12]
 8006524:	181b      	addge	r3, r3, r0
 8006526:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800652a:	bfac      	ite	ge
 800652c:	6563      	strge	r3, [r4, #84]	; 0x54
 800652e:	81a3      	strhlt	r3, [r4, #12]
 8006530:	bd10      	pop	{r4, pc}

08006532 <__swrite>:
 8006532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006536:	461f      	mov	r7, r3
 8006538:	898b      	ldrh	r3, [r1, #12]
 800653a:	05db      	lsls	r3, r3, #23
 800653c:	4605      	mov	r5, r0
 800653e:	460c      	mov	r4, r1
 8006540:	4616      	mov	r6, r2
 8006542:	d505      	bpl.n	8006550 <__swrite+0x1e>
 8006544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006548:	2302      	movs	r3, #2
 800654a:	2200      	movs	r2, #0
 800654c:	f000 f870 	bl	8006630 <_lseek_r>
 8006550:	89a3      	ldrh	r3, [r4, #12]
 8006552:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006556:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800655a:	81a3      	strh	r3, [r4, #12]
 800655c:	4632      	mov	r2, r6
 800655e:	463b      	mov	r3, r7
 8006560:	4628      	mov	r0, r5
 8006562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006566:	f000 b817 	b.w	8006598 <_write_r>

0800656a <__sseek>:
 800656a:	b510      	push	{r4, lr}
 800656c:	460c      	mov	r4, r1
 800656e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006572:	f000 f85d 	bl	8006630 <_lseek_r>
 8006576:	1c43      	adds	r3, r0, #1
 8006578:	89a3      	ldrh	r3, [r4, #12]
 800657a:	bf15      	itete	ne
 800657c:	6560      	strne	r0, [r4, #84]	; 0x54
 800657e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006582:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006586:	81a3      	strheq	r3, [r4, #12]
 8006588:	bf18      	it	ne
 800658a:	81a3      	strhne	r3, [r4, #12]
 800658c:	bd10      	pop	{r4, pc}

0800658e <__sclose>:
 800658e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006592:	f000 b81b 	b.w	80065cc <_close_r>
	...

08006598 <_write_r>:
 8006598:	b538      	push	{r3, r4, r5, lr}
 800659a:	4d07      	ldr	r5, [pc, #28]	; (80065b8 <_write_r+0x20>)
 800659c:	4604      	mov	r4, r0
 800659e:	4608      	mov	r0, r1
 80065a0:	4611      	mov	r1, r2
 80065a2:	2200      	movs	r2, #0
 80065a4:	602a      	str	r2, [r5, #0]
 80065a6:	461a      	mov	r2, r3
 80065a8:	f7fa fb70 	bl	8000c8c <_write>
 80065ac:	1c43      	adds	r3, r0, #1
 80065ae:	d102      	bne.n	80065b6 <_write_r+0x1e>
 80065b0:	682b      	ldr	r3, [r5, #0]
 80065b2:	b103      	cbz	r3, 80065b6 <_write_r+0x1e>
 80065b4:	6023      	str	r3, [r4, #0]
 80065b6:	bd38      	pop	{r3, r4, r5, pc}
 80065b8:	20000458 	.word	0x20000458

080065bc <abort>:
 80065bc:	b508      	push	{r3, lr}
 80065be:	2006      	movs	r0, #6
 80065c0:	f000 f88e 	bl	80066e0 <raise>
 80065c4:	2001      	movs	r0, #1
 80065c6:	f7fa ff71 	bl	80014ac <_exit>
	...

080065cc <_close_r>:
 80065cc:	b538      	push	{r3, r4, r5, lr}
 80065ce:	4d06      	ldr	r5, [pc, #24]	; (80065e8 <_close_r+0x1c>)
 80065d0:	2300      	movs	r3, #0
 80065d2:	4604      	mov	r4, r0
 80065d4:	4608      	mov	r0, r1
 80065d6:	602b      	str	r3, [r5, #0]
 80065d8:	f7fa ff8f 	bl	80014fa <_close>
 80065dc:	1c43      	adds	r3, r0, #1
 80065de:	d102      	bne.n	80065e6 <_close_r+0x1a>
 80065e0:	682b      	ldr	r3, [r5, #0]
 80065e2:	b103      	cbz	r3, 80065e6 <_close_r+0x1a>
 80065e4:	6023      	str	r3, [r4, #0]
 80065e6:	bd38      	pop	{r3, r4, r5, pc}
 80065e8:	20000458 	.word	0x20000458

080065ec <_fstat_r>:
 80065ec:	b538      	push	{r3, r4, r5, lr}
 80065ee:	4d07      	ldr	r5, [pc, #28]	; (800660c <_fstat_r+0x20>)
 80065f0:	2300      	movs	r3, #0
 80065f2:	4604      	mov	r4, r0
 80065f4:	4608      	mov	r0, r1
 80065f6:	4611      	mov	r1, r2
 80065f8:	602b      	str	r3, [r5, #0]
 80065fa:	f7fa ff8a 	bl	8001512 <_fstat>
 80065fe:	1c43      	adds	r3, r0, #1
 8006600:	d102      	bne.n	8006608 <_fstat_r+0x1c>
 8006602:	682b      	ldr	r3, [r5, #0]
 8006604:	b103      	cbz	r3, 8006608 <_fstat_r+0x1c>
 8006606:	6023      	str	r3, [r4, #0]
 8006608:	bd38      	pop	{r3, r4, r5, pc}
 800660a:	bf00      	nop
 800660c:	20000458 	.word	0x20000458

08006610 <_isatty_r>:
 8006610:	b538      	push	{r3, r4, r5, lr}
 8006612:	4d06      	ldr	r5, [pc, #24]	; (800662c <_isatty_r+0x1c>)
 8006614:	2300      	movs	r3, #0
 8006616:	4604      	mov	r4, r0
 8006618:	4608      	mov	r0, r1
 800661a:	602b      	str	r3, [r5, #0]
 800661c:	f7fa ff89 	bl	8001532 <_isatty>
 8006620:	1c43      	adds	r3, r0, #1
 8006622:	d102      	bne.n	800662a <_isatty_r+0x1a>
 8006624:	682b      	ldr	r3, [r5, #0]
 8006626:	b103      	cbz	r3, 800662a <_isatty_r+0x1a>
 8006628:	6023      	str	r3, [r4, #0]
 800662a:	bd38      	pop	{r3, r4, r5, pc}
 800662c:	20000458 	.word	0x20000458

08006630 <_lseek_r>:
 8006630:	b538      	push	{r3, r4, r5, lr}
 8006632:	4d07      	ldr	r5, [pc, #28]	; (8006650 <_lseek_r+0x20>)
 8006634:	4604      	mov	r4, r0
 8006636:	4608      	mov	r0, r1
 8006638:	4611      	mov	r1, r2
 800663a:	2200      	movs	r2, #0
 800663c:	602a      	str	r2, [r5, #0]
 800663e:	461a      	mov	r2, r3
 8006640:	f7fa ff82 	bl	8001548 <_lseek>
 8006644:	1c43      	adds	r3, r0, #1
 8006646:	d102      	bne.n	800664e <_lseek_r+0x1e>
 8006648:	682b      	ldr	r3, [r5, #0]
 800664a:	b103      	cbz	r3, 800664e <_lseek_r+0x1e>
 800664c:	6023      	str	r3, [r4, #0]
 800664e:	bd38      	pop	{r3, r4, r5, pc}
 8006650:	20000458 	.word	0x20000458

08006654 <__malloc_lock>:
 8006654:	4801      	ldr	r0, [pc, #4]	; (800665c <__malloc_lock+0x8>)
 8006656:	f7ff bb0d 	b.w	8005c74 <__retarget_lock_acquire_recursive>
 800665a:	bf00      	nop
 800665c:	2000044c 	.word	0x2000044c

08006660 <__malloc_unlock>:
 8006660:	4801      	ldr	r0, [pc, #4]	; (8006668 <__malloc_unlock+0x8>)
 8006662:	f7ff bb08 	b.w	8005c76 <__retarget_lock_release_recursive>
 8006666:	bf00      	nop
 8006668:	2000044c 	.word	0x2000044c

0800666c <_read_r>:
 800666c:	b538      	push	{r3, r4, r5, lr}
 800666e:	4d07      	ldr	r5, [pc, #28]	; (800668c <_read_r+0x20>)
 8006670:	4604      	mov	r4, r0
 8006672:	4608      	mov	r0, r1
 8006674:	4611      	mov	r1, r2
 8006676:	2200      	movs	r2, #0
 8006678:	602a      	str	r2, [r5, #0]
 800667a:	461a      	mov	r2, r3
 800667c:	f7fa ff20 	bl	80014c0 <_read>
 8006680:	1c43      	adds	r3, r0, #1
 8006682:	d102      	bne.n	800668a <_read_r+0x1e>
 8006684:	682b      	ldr	r3, [r5, #0]
 8006686:	b103      	cbz	r3, 800668a <_read_r+0x1e>
 8006688:	6023      	str	r3, [r4, #0]
 800668a:	bd38      	pop	{r3, r4, r5, pc}
 800668c:	20000458 	.word	0x20000458

08006690 <_raise_r>:
 8006690:	291f      	cmp	r1, #31
 8006692:	b538      	push	{r3, r4, r5, lr}
 8006694:	4604      	mov	r4, r0
 8006696:	460d      	mov	r5, r1
 8006698:	d904      	bls.n	80066a4 <_raise_r+0x14>
 800669a:	2316      	movs	r3, #22
 800669c:	6003      	str	r3, [r0, #0]
 800669e:	f04f 30ff 	mov.w	r0, #4294967295
 80066a2:	bd38      	pop	{r3, r4, r5, pc}
 80066a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80066a6:	b112      	cbz	r2, 80066ae <_raise_r+0x1e>
 80066a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80066ac:	b94b      	cbnz	r3, 80066c2 <_raise_r+0x32>
 80066ae:	4620      	mov	r0, r4
 80066b0:	f000 f830 	bl	8006714 <_getpid_r>
 80066b4:	462a      	mov	r2, r5
 80066b6:	4601      	mov	r1, r0
 80066b8:	4620      	mov	r0, r4
 80066ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066be:	f000 b817 	b.w	80066f0 <_kill_r>
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d00a      	beq.n	80066dc <_raise_r+0x4c>
 80066c6:	1c59      	adds	r1, r3, #1
 80066c8:	d103      	bne.n	80066d2 <_raise_r+0x42>
 80066ca:	2316      	movs	r3, #22
 80066cc:	6003      	str	r3, [r0, #0]
 80066ce:	2001      	movs	r0, #1
 80066d0:	e7e7      	b.n	80066a2 <_raise_r+0x12>
 80066d2:	2400      	movs	r4, #0
 80066d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80066d8:	4628      	mov	r0, r5
 80066da:	4798      	blx	r3
 80066dc:	2000      	movs	r0, #0
 80066de:	e7e0      	b.n	80066a2 <_raise_r+0x12>

080066e0 <raise>:
 80066e0:	4b02      	ldr	r3, [pc, #8]	; (80066ec <raise+0xc>)
 80066e2:	4601      	mov	r1, r0
 80066e4:	6818      	ldr	r0, [r3, #0]
 80066e6:	f7ff bfd3 	b.w	8006690 <_raise_r>
 80066ea:	bf00      	nop
 80066ec:	20000194 	.word	0x20000194

080066f0 <_kill_r>:
 80066f0:	b538      	push	{r3, r4, r5, lr}
 80066f2:	4d07      	ldr	r5, [pc, #28]	; (8006710 <_kill_r+0x20>)
 80066f4:	2300      	movs	r3, #0
 80066f6:	4604      	mov	r4, r0
 80066f8:	4608      	mov	r0, r1
 80066fa:	4611      	mov	r1, r2
 80066fc:	602b      	str	r3, [r5, #0]
 80066fe:	f7fa fec5 	bl	800148c <_kill>
 8006702:	1c43      	adds	r3, r0, #1
 8006704:	d102      	bne.n	800670c <_kill_r+0x1c>
 8006706:	682b      	ldr	r3, [r5, #0]
 8006708:	b103      	cbz	r3, 800670c <_kill_r+0x1c>
 800670a:	6023      	str	r3, [r4, #0]
 800670c:	bd38      	pop	{r3, r4, r5, pc}
 800670e:	bf00      	nop
 8006710:	20000458 	.word	0x20000458

08006714 <_getpid_r>:
 8006714:	f7fa beb2 	b.w	800147c <_getpid>

08006718 <_init>:
 8006718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800671a:	bf00      	nop
 800671c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800671e:	bc08      	pop	{r3}
 8006720:	469e      	mov	lr, r3
 8006722:	4770      	bx	lr

08006724 <_fini>:
 8006724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006726:	bf00      	nop
 8006728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800672a:	bc08      	pop	{r3}
 800672c:	469e      	mov	lr, r3
 800672e:	4770      	bx	lr
