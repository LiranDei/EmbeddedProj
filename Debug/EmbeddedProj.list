
EmbeddedProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  0800876c  0800876c  0001876c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a94  08008a94  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  08008a94  08008a94  00018a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a9c  08008a9c  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a9c  08008a9c  00018a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008aa0  08008aa0  00018aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08008aa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  200001f8  08008c9c  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000052c  08008c9c  0002052c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000184b7  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ed4  00000000  00000000  000386df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001468  00000000  00000000  0003b5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001330  00000000  00000000  0003ca20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ab69  00000000  00000000  0003dd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a24  00000000  00000000  000688b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010919e  00000000  00000000  000802dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018947b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006190  00000000  00000000  001894cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008754 	.word	0x08008754

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	08008754 	.word	0x08008754

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <initBtnClicks>:

BTN_CLICK* btn;


void initBtnClicks(BTN_CLICK* btnClick, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	4613      	mov	r3, r2
 80005a0:	80fb      	strh	r3, [r7, #6]
	btnClick->GPIOx = GPIOx;
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	68ba      	ldr	r2, [r7, #8]
 80005a6:	601a      	str	r2, [r3, #0]
	btnClick->GPIO_Pin = GPIO_Pin;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	88fa      	ldrh	r2, [r7, #6]
 80005ac:	809a      	strh	r2, [r3, #4]
	btnClick->noiseWait = OFF;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	2200      	movs	r2, #0
 80005b2:	71da      	strb	r2, [r3, #7]
	btnClick->status = WAITING_FIRST_CLICK;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	2200      	movs	r2, #0
 80005b8:	719a      	strb	r2, [r3, #6]
	btnClick->counter = 0;
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	2200      	movs	r2, #0
 80005be:	615a      	str	r2, [r3, #20]
	btnClick->bounceCounter = 0;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	2200      	movs	r2, #0
 80005c4:	611a      	str	r2, [r3, #16]
	btn = btnClick;
 80005c6:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <initBtnClicks+0x44>)
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	6013      	str	r3, [r2, #0]
}
 80005cc:	bf00      	nop
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	20000214 	.word	0x20000214

080005dc <btnOnClickInterrupt>:

void btnOnClickInterrupt(uint16_t GPIO_Pin)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	80fb      	strh	r3, [r7, #6]
	if(!(HAL_GPIO_ReadPin(btn->GPIOx, btn->GPIO_Pin)))
 80005e6:	4b2c      	ldr	r3, [pc, #176]	; (8000698 <btnOnClickInterrupt+0xbc>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	4b2a      	ldr	r3, [pc, #168]	; (8000698 <btnOnClickInterrupt+0xbc>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	889b      	ldrh	r3, [r3, #4]
 80005f2:	4619      	mov	r1, r3
 80005f4:	4610      	mov	r0, r2
 80005f6:	f003 f921 	bl	800383c <HAL_GPIO_ReadPin>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d129      	bne.n	8000654 <btnOnClickInterrupt+0x78>
	{
		if(btn->status == WAITING_FIRST_CLICK || btn->status == WAITING_FOR_LONG_PRESS)
 8000600:	4b25      	ldr	r3, [pc, #148]	; (8000698 <btnOnClickInterrupt+0xbc>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	799b      	ldrb	r3, [r3, #6]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d004      	beq.n	8000614 <btnOnClickInterrupt+0x38>
 800060a:	4b23      	ldr	r3, [pc, #140]	; (8000698 <btnOnClickInterrupt+0xbc>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	799b      	ldrb	r3, [r3, #6]
 8000610:	2b03      	cmp	r3, #3
 8000612:	d10e      	bne.n	8000632 <btnOnClickInterrupt+0x56>
		{
			btn->firstClick = HAL_GetTick();
 8000614:	f001 fae8 	bl	8001be8 <HAL_GetTick>
 8000618:	4602      	mov	r2, r0
 800061a:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <btnOnClickInterrupt+0xbc>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	609a      	str	r2, [r3, #8]
			btn->status = WAITING_FOR_RELEASE;
 8000620:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <btnOnClickInterrupt+0xbc>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2201      	movs	r2, #1
 8000626:	719a      	strb	r2, [r3, #6]
			btn->counter = 0;
 8000628:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <btnOnClickInterrupt+0xbc>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2200      	movs	r2, #0
 800062e:	615a      	str	r2, [r3, #20]
			btn->status = WAITING_FIRST_CLICK;
		}

	}

}
 8000630:	e02d      	b.n	800068e <btnOnClickInterrupt+0xb2>
		else if(btn->status == WAITING_FOR_DOUBLE)
 8000632:	4b19      	ldr	r3, [pc, #100]	; (8000698 <btnOnClickInterrupt+0xbc>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	799b      	ldrb	r3, [r3, #6]
 8000638:	2b02      	cmp	r3, #2
 800063a:	d128      	bne.n	800068e <btnOnClickInterrupt+0xb2>
			btn->counter = 0;
 800063c:	4b16      	ldr	r3, [pc, #88]	; (8000698 <btnOnClickInterrupt+0xbc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2200      	movs	r2, #0
 8000642:	615a      	str	r2, [r3, #20]
			printf("was double click\n\r");
 8000644:	4815      	ldr	r0, [pc, #84]	; (800069c <btnOnClickInterrupt+0xc0>)
 8000646:	f006 ff0d 	bl	8007464 <iprintf>
			btn->status = WAITING_FOR_LONG_PRESS;
 800064a:	4b13      	ldr	r3, [pc, #76]	; (8000698 <btnOnClickInterrupt+0xbc>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2203      	movs	r2, #3
 8000650:	719a      	strb	r2, [r3, #6]
}
 8000652:	e01c      	b.n	800068e <btnOnClickInterrupt+0xb2>
		if(btn->status == WAITING_FOR_RELEASE)
 8000654:	4b10      	ldr	r3, [pc, #64]	; (8000698 <btnOnClickInterrupt+0xbc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	799b      	ldrb	r3, [r3, #6]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d10e      	bne.n	800067c <btnOnClickInterrupt+0xa0>
			btn->secondClick = HAL_GetTick();
 800065e:	f001 fac3 	bl	8001be8 <HAL_GetTick>
 8000662:	4602      	mov	r2, r0
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <btnOnClickInterrupt+0xbc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	60da      	str	r2, [r3, #12]
			btn->counter = 0;
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <btnOnClickInterrupt+0xbc>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2200      	movs	r2, #0
 8000670:	615a      	str	r2, [r3, #20]
			btn->status = WAITING_FOR_DOUBLE;
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <btnOnClickInterrupt+0xbc>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2202      	movs	r2, #2
 8000678:	719a      	strb	r2, [r3, #6]
}
 800067a:	e008      	b.n	800068e <btnOnClickInterrupt+0xb2>
		else if(btn->status == WAITING_FOR_LONG_PRESS)
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <btnOnClickInterrupt+0xbc>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	799b      	ldrb	r3, [r3, #6]
 8000682:	2b03      	cmp	r3, #3
 8000684:	d103      	bne.n	800068e <btnOnClickInterrupt+0xb2>
			btn->status = WAITING_FIRST_CLICK;
 8000686:	4b04      	ldr	r3, [pc, #16]	; (8000698 <btnOnClickInterrupt+0xbc>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2200      	movs	r2, #0
 800068c:	719a      	strb	r2, [r3, #6]
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000214 	.word	0x20000214
 800069c:	0800876c 	.word	0x0800876c

080006a0 <handleClicks>:

void handleClicks()
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	if(btn->noiseWait == ON)
 80006a4:	4b41      	ldr	r3, [pc, #260]	; (80007ac <handleClicks+0x10c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	79db      	ldrb	r3, [r3, #7]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d118      	bne.n	80006e0 <handleClicks+0x40>
	{
		btn->bounceCounter++;
 80006ae:	4b3f      	ldr	r3, [pc, #252]	; (80007ac <handleClicks+0x10c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	691a      	ldr	r2, [r3, #16]
 80006b4:	3201      	adds	r2, #1
 80006b6:	611a      	str	r2, [r3, #16]
		if(btn->bounceCounter >= BOUNCE_TIME_WAIT)
 80006b8:	4b3c      	ldr	r3, [pc, #240]	; (80007ac <handleClicks+0x10c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	691b      	ldr	r3, [r3, #16]
 80006be:	2b13      	cmp	r3, #19
 80006c0:	dd72      	ble.n	80007a8 <handleClicks+0x108>
		{
			btn->noiseWait = OFF;
 80006c2:	4b3a      	ldr	r3, [pc, #232]	; (80007ac <handleClicks+0x10c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2200      	movs	r2, #0
 80006c8:	71da      	strb	r2, [r3, #7]
			btn->bounceCounter = 0;
 80006ca:	4b38      	ldr	r3, [pc, #224]	; (80007ac <handleClicks+0x10c>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
			btnOnClickInterrupt(btn->GPIO_Pin);
 80006d2:	4b36      	ldr	r3, [pc, #216]	; (80007ac <handleClicks+0x10c>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	889b      	ldrh	r3, [r3, #4]
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ff7f 	bl	80005dc <btnOnClickInterrupt>
			}
			break;

		}
	}
}
 80006de:	e063      	b.n	80007a8 <handleClicks+0x108>
		if(btn->status != WAITING_FIRST_CLICK)
 80006e0:	4b32      	ldr	r3, [pc, #200]	; (80007ac <handleClicks+0x10c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	799b      	ldrb	r3, [r3, #6]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d004      	beq.n	80006f4 <handleClicks+0x54>
			btn->counter++;
 80006ea:	4b30      	ldr	r3, [pc, #192]	; (80007ac <handleClicks+0x10c>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	695a      	ldr	r2, [r3, #20]
 80006f0:	3201      	adds	r2, #1
 80006f2:	615a      	str	r2, [r3, #20]
		switch(btn->status)
 80006f4:	4b2d      	ldr	r3, [pc, #180]	; (80007ac <handleClicks+0x10c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	799b      	ldrb	r3, [r3, #6]
 80006fa:	2b03      	cmp	r3, #3
 80006fc:	d040      	beq.n	8000780 <handleClicks+0xe0>
 80006fe:	2b03      	cmp	r3, #3
 8000700:	dc52      	bgt.n	80007a8 <handleClicks+0x108>
 8000702:	2b01      	cmp	r3, #1
 8000704:	d002      	beq.n	800070c <handleClicks+0x6c>
 8000706:	2b02      	cmp	r3, #2
 8000708:	d00b      	beq.n	8000722 <handleClicks+0x82>
}
 800070a:	e04d      	b.n	80007a8 <handleClicks+0x108>
			if(btn->counter > 1000)
 800070c:	4b27      	ldr	r3, [pc, #156]	; (80007ac <handleClicks+0x10c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000716:	dd42      	ble.n	800079e <handleClicks+0xfe>
				btn->status = WAITING_FOR_LONG_PRESS;
 8000718:	4b24      	ldr	r3, [pc, #144]	; (80007ac <handleClicks+0x10c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2203      	movs	r2, #3
 800071e:	719a      	strb	r2, [r3, #6]
			break;
 8000720:	e03d      	b.n	800079e <handleClicks+0xfe>
			if(btn->counter > 200)//wasnt double click
 8000722:	4b22      	ldr	r3, [pc, #136]	; (80007ac <handleClicks+0x10c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	695b      	ldr	r3, [r3, #20]
 8000728:	2bc8      	cmp	r3, #200	; 0xc8
 800072a:	dd3a      	ble.n	80007a2 <handleClicks+0x102>
				btn->status = WAITING_FIRST_CLICK;
 800072c:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <handleClicks+0x10c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2200      	movs	r2, #0
 8000732:	719a      	strb	r2, [r3, #6]
				btn->counter = 0;
 8000734:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <handleClicks+0x10c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2200      	movs	r2, #0
 800073a:	615a      	str	r2, [r3, #20]
				if(btn->secondClick - btn->firstClick < 500)
 800073c:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <handleClicks+0x10c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	68da      	ldr	r2, [r3, #12]
 8000742:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <handleClicks+0x10c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	689b      	ldr	r3, [r3, #8]
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800074e:	da0b      	bge.n	8000768 <handleClicks+0xc8>
					printf("Thats was short<%d>\n\r", btn->secondClick - btn->firstClick);
 8000750:	4b16      	ldr	r3, [pc, #88]	; (80007ac <handleClicks+0x10c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	68da      	ldr	r2, [r3, #12]
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <handleClicks+0x10c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	689b      	ldr	r3, [r3, #8]
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	4619      	mov	r1, r3
 8000760:	4813      	ldr	r0, [pc, #76]	; (80007b0 <handleClicks+0x110>)
 8000762:	f006 fe7f 	bl	8007464 <iprintf>
			break;
 8000766:	e01c      	b.n	80007a2 <handleClicks+0x102>
					printf("Thats was long<%d>\n\r", btn->secondClick - btn->firstClick);
 8000768:	4b10      	ldr	r3, [pc, #64]	; (80007ac <handleClicks+0x10c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	68da      	ldr	r2, [r3, #12]
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <handleClicks+0x10c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	4619      	mov	r1, r3
 8000778:	480e      	ldr	r0, [pc, #56]	; (80007b4 <handleClicks+0x114>)
 800077a:	f006 fe73 	bl	8007464 <iprintf>
			break;
 800077e:	e010      	b.n	80007a2 <handleClicks+0x102>
			if(btn->status == WAITING_FOR_LONG_PRESS)
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <handleClicks+0x10c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	799b      	ldrb	r3, [r3, #6]
 8000786:	2b03      	cmp	r3, #3
 8000788:	d10d      	bne.n	80007a6 <handleClicks+0x106>
				if(btn->counter > 1000)
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <handleClicks+0x10c>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	695b      	ldr	r3, [r3, #20]
 8000790:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000794:	dd07      	ble.n	80007a6 <handleClicks+0x106>
					printf("long\n\r");
 8000796:	4808      	ldr	r0, [pc, #32]	; (80007b8 <handleClicks+0x118>)
 8000798:	f006 fe64 	bl	8007464 <iprintf>
			break;
 800079c:	e003      	b.n	80007a6 <handleClicks+0x106>
			break;
 800079e:	bf00      	nop
 80007a0:	e002      	b.n	80007a8 <handleClicks+0x108>
			break;
 80007a2:	bf00      	nop
 80007a4:	e000      	b.n	80007a8 <handleClicks+0x108>
			break;
 80007a6:	bf00      	nop
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000214 	.word	0x20000214
 80007b0:	08008780 	.word	0x08008780
 80007b4:	08008798 	.word	0x08008798
 80007b8:	080087b0 	.word	0x080087b0

080007bc <changeFreq>:
							{Re, 2500}};

static int index = 0;

void changeFreq (TIM_HandleTypeDef * htim3, TIM_HandleTypeDef * htim6)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]

	index = (index+1) % MUSIC_SIZE;
 80007c6:	4b23      	ldr	r3, [pc, #140]	; (8000854 <changeFreq+0x98>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	1c59      	adds	r1, r3, #1
 80007cc:	4b22      	ldr	r3, [pc, #136]	; (8000858 <changeFreq+0x9c>)
 80007ce:	fb83 2301 	smull	r2, r3, r3, r1
 80007d2:	111a      	asrs	r2, r3, #4
 80007d4:	17cb      	asrs	r3, r1, #31
 80007d6:	1ad2      	subs	r2, r2, r3
 80007d8:	4613      	mov	r3, r2
 80007da:	00db      	lsls	r3, r3, #3
 80007dc:	1a9b      	subs	r3, r3, r2
 80007de:	00da      	lsls	r2, r3, #3
 80007e0:	1ad2      	subs	r2, r2, r3
 80007e2:	1a8a      	subs	r2, r1, r2
 80007e4:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <changeFreq+0x98>)
 80007e6:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(htim3, 0);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2200      	movs	r2, #0
 80007ee:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(htim3, music[index].note);
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <changeFreq+0x98>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a19      	ldr	r2, [pc, #100]	; (800085c <changeFreq+0xa0>)
 80007f6:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <changeFreq+0x98>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a15      	ldr	r2, [pc, #84]	; (800085c <changeFreq+0xa0>)
 8000806:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800080a:	461a      	mov	r2, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_1, (music[index].note)/2 );
 8000810:	4b10      	ldr	r3, [pc, #64]	; (8000854 <changeFreq+0x98>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a11      	ldr	r2, [pc, #68]	; (800085c <changeFreq+0xa0>)
 8000816:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800081a:	085b      	lsrs	r3, r3, #1
 800081c:	b29a      	uxth	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_AUTORELOAD(htim6, music[index].period);
 8000824:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <changeFreq+0x98>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a0c      	ldr	r2, [pc, #48]	; (800085c <changeFreq+0xa0>)
 800082a:	00db      	lsls	r3, r3, #3
 800082c:	4413      	add	r3, r2
 800082e:	685a      	ldr	r2, [r3, #4]
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	62da      	str	r2, [r3, #44]	; 0x2c
 8000836:	4b07      	ldr	r3, [pc, #28]	; (8000854 <changeFreq+0x98>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a08      	ldr	r2, [pc, #32]	; (800085c <changeFreq+0xa0>)
 800083c:	00db      	lsls	r3, r3, #3
 800083e:	4413      	add	r3, r2
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	461a      	mov	r2, r3
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	60da      	str	r2, [r3, #12]

}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	2000021c 	.word	0x2000021c
 8000858:	5397829d 	.word	0x5397829d
 800085c:	20000000 	.word	0x20000000

08000860 <onOffMusic>:

void onOffMusic(TIM_HandleTypeDef * htim3)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	if(!press)
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <onOffMusic+0x50>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d10a      	bne.n	8000886 <onOffMusic+0x26>
		{
			HAL_TIM_Base_Start(htim3);
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f004 fbbd 	bl	8004ff0 <HAL_TIM_Base_Start>
			HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_1);
 8000876:	2100      	movs	r1, #0
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f004 fd3f 	bl	80052fc <HAL_TIM_PWM_Start>
			HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800087e:	201d      	movs	r0, #29
 8000880:	f002 fe17 	bl	80034b2 <HAL_NVIC_EnableIRQ>
 8000884:	e006      	b.n	8000894 <onOffMusic+0x34>
		}
		else
		{
			HAL_TIM_Base_Stop(htim3);
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f004 fc1a 	bl	80050c0 <HAL_TIM_Base_Stop>
			HAL_TIM_PWM_Stop(htim3, TIM_CHANNEL_1);
 800088c:	2100      	movs	r1, #0
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f004 fe3a 	bl	8005508 <HAL_TIM_PWM_Stop>
		}
	press = (press+1)%2;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <onOffMusic+0x50>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	3301      	adds	r3, #1
 800089a:	2b00      	cmp	r3, #0
 800089c:	f003 0301 	and.w	r3, r3, #1
 80008a0:	bfb8      	it	lt
 80008a2:	425b      	neglt	r3, r3
 80008a4:	4a02      	ldr	r2, [pc, #8]	; (80008b0 <onOffMusic+0x50>)
 80008a6:	6013      	str	r3, [r2, #0]

}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000218 	.word	0x20000218

080008b4 <clockInit>:
 */

#include <Clock.h>

void clockInit (CLOCK* clock)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	clock->ms = 0;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
	clock->sec = 0;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2200      	movs	r2, #0
 80008c6:	711a      	strb	r2, [r3, #4]
	clock->min = 0;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2200      	movs	r2, #0
 80008cc:	715a      	strb	r2, [r3, #5]
	clock->hour = 0;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2200      	movs	r2, #0
 80008d2:	719a      	strb	r2, [r3, #6]
}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <increaseQlock>:

void increaseQlock(CLOCK* clock)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	if(clock->ms >= MSECS_TO_SEC)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008f0:	db08      	blt.n	8000904 <increaseQlock+0x24>
	{
		clock->ms = 0;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
		clock->sec++;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	791b      	ldrb	r3, [r3, #4]
 80008fc:	3301      	adds	r3, #1
 80008fe:	b2da      	uxtb	r2, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	711a      	strb	r2, [r3, #4]
	}
	if(clock->sec >= SECS_IN_MIN)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	791b      	ldrb	r3, [r3, #4]
 8000908:	2b3b      	cmp	r3, #59	; 0x3b
 800090a:	d908      	bls.n	800091e <increaseQlock+0x3e>
	{
		clock->sec = 0;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2200      	movs	r2, #0
 8000910:	711a      	strb	r2, [r3, #4]
		clock->min++;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	795b      	ldrb	r3, [r3, #5]
 8000916:	3301      	adds	r3, #1
 8000918:	b2da      	uxtb	r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	715a      	strb	r2, [r3, #5]
	}
	if(clock->min >= MINS_IN_HOUR)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	795b      	ldrb	r3, [r3, #5]
 8000922:	2b3b      	cmp	r3, #59	; 0x3b
 8000924:	d908      	bls.n	8000938 <increaseQlock+0x58>
	{
		clock->min = 0;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2200      	movs	r2, #0
 800092a:	715a      	strb	r2, [r3, #5]
		clock->hour++;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	799b      	ldrb	r3, [r3, #6]
 8000930:	3301      	adds	r3, #1
 8000932:	b2da      	uxtb	r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	719a      	strb	r2, [r3, #6]
	}

}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <clockOnInterrupt>:

void clockOnInterrupt(CLOCK* clock)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	clock->ms++;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	1c5a      	adds	r2, r3, #1
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	601a      	str	r2, [r3, #0]
	increaseQlock(clock);
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f7ff ffc2 	bl	80008e0 <increaseQlock>

}
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <printTime>:

void printTime(CLOCK* clock)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	printf("%d:%d:%d\n\r",clock->hour,clock->min, clock->sec);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	799b      	ldrb	r3, [r3, #6]
 8000970:	4619      	mov	r1, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	795b      	ldrb	r3, [r3, #5]
 8000976:	461a      	mov	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	791b      	ldrb	r3, [r3, #4]
 800097c:	4803      	ldr	r0, [pc, #12]	; (800098c <printTime+0x28>)
 800097e:	f006 fd71 	bl	8007464 <iprintf>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	080087b8 	.word	0x080087b8

08000990 <htimInit>:
int cmdcount = 0;
TIM_HandleTypeDef* htimFour;
LIGHT_SENSOR* lightSensor;

void htimInit(TIM_HandleTypeDef* htim4)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	htimFour = htim4;
 8000998:	4a04      	ldr	r2, [pc, #16]	; (80009ac <htimInit+0x1c>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6013      	str	r3, [r2, #0]
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000294 	.word	0x20000294

080009b0 <ledInit>:


void ledInit(LED* led, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	4613      	mov	r3, r2
 80009bc:	80fb      	strh	r3, [r7, #6]
	led->state = STATE_OFF;
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	2200      	movs	r2, #0
 80009c2:	701a      	strb	r2, [r3, #0]
	led->GPIOx = GPIOx;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	68ba      	ldr	r2, [r7, #8]
 80009c8:	605a      	str	r2, [r3, #4]
	led->GPIO_Pin = GPIO_Pin;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	88fa      	ldrh	r2, [r7, #6]
 80009ce:	811a      	strh	r2, [r3, #8]
	led->counter = 0;
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
	led->period = START_PERIOD;
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	220a      	movs	r2, #10
 80009da:	615a      	str	r2, [r3, #20]
	if(led->GPIO_Pin == RedLed_Pin)
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	891b      	ldrh	r3, [r3, #8]
 80009e0:	2b40      	cmp	r3, #64	; 0x40
 80009e2:	d103      	bne.n	80009ec <ledInit+0x3c>
	{
		ledRed = led;
 80009e4:	4a06      	ldr	r2, [pc, #24]	; (8000a00 <ledInit+0x50>)
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	6013      	str	r3, [r2, #0]
	}
	else
	{
		ledBlue = led;
	}
}
 80009ea:	e002      	b.n	80009f2 <ledInit+0x42>
		ledBlue = led;
 80009ec:	4a05      	ldr	r2, [pc, #20]	; (8000a04 <ledInit+0x54>)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	6013      	str	r3, [r2, #0]
}
 80009f2:	bf00      	nop
 80009f4:	3714      	adds	r7, #20
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	20000220 	.word	0x20000220
 8000a04:	20000224 	.word	0x20000224

08000a08 <ledOn>:


void ledOn(LED* led)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	led->state = STATE_ON;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2201      	movs	r2, #1
 8000a14:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, 1);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6858      	ldr	r0, [r3, #4]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	891b      	ldrh	r3, [r3, #8]
 8000a1e:	2201      	movs	r2, #1
 8000a20:	4619      	mov	r1, r3
 8000a22:	f002 ff23 	bl	800386c <HAL_GPIO_WritePin>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <ledOff>:

void ledOff(LED* led)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b082      	sub	sp, #8
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
	led->state = STATE_OFF;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, 0);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6858      	ldr	r0, [r3, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	891b      	ldrh	r3, [r3, #8]
 8000a44:	2200      	movs	r2, #0
 8000a46:	4619      	mov	r1, r3
 8000a48:	f002 ff10 	bl	800386c <HAL_GPIO_WritePin>
}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <ledBlink>:

void ledBlink(LED* led, int period)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]
	led->state = STATE_BLINKING;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2203      	movs	r2, #3
 8000a62:	701a      	strb	r2, [r3, #0]
	led->period = period;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	683a      	ldr	r2, [r7, #0]
 8000a68:	615a      	str	r2, [r3, #20]
	led->counter = 0;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <ledOnTimerInterrupt>:

void ledOnTimerInterrupt(LED* led)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	if(led->state == STATE_BLINKING && led->counter == led->period)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b03      	cmp	r3, #3
 8000a8a:	d111      	bne.n	8000ab0 <ledOnTimerInterrupt+0x34>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	691a      	ldr	r2, [r3, #16]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	695b      	ldr	r3, [r3, #20]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d10b      	bne.n	8000ab0 <ledOnTimerInterrupt+0x34>
	{
		HAL_GPIO_TogglePin(led->GPIOx, led->GPIO_Pin);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	685a      	ldr	r2, [r3, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	891b      	ldrh	r3, [r3, #8]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	f002 fefa 	bl	800389c <HAL_GPIO_TogglePin>
		led->counter = 0;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
 8000aae:	e005      	b.n	8000abc <ledOnTimerInterrupt+0x40>
	}

	else
	{
		led ->counter++;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	691b      	ldr	r3, [r3, #16]
 8000ab4:	1c5a      	adds	r2, r3, #1
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	611a      	str	r2, [r3, #16]

	}

}
 8000aba:	bf00      	nop
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <setBrightness>:

void setBrightness (LED* led, int brightness)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
	led->state = STATE_BRIGHTNESS;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(htimFour);
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <setBrightness+0x38>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f004 fb19 	bl	8005110 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(htimFour,TIM_CHANNEL_1);
 8000ade:	4b07      	ldr	r3, [pc, #28]	; (8000afc <setBrightness+0x38>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f004 fda5 	bl	8005634 <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(htimFour,TIM_CHANNEL_1, brightness);
 8000aea:	4b04      	ldr	r3, [pc, #16]	; (8000afc <setBrightness+0x38>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	683a      	ldr	r2, [r7, #0]
 8000af2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000294 	.word	0x20000294

08000b00 <commTask>:
{

}

int commTask(UART_HandleTypeDef* huart2)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef Status = HAL_UART_Receive(huart2, &ch, 1, 0);
 8000b08:	2300      	movs	r3, #0
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	491f      	ldr	r1, [pc, #124]	; (8000b8c <commTask+0x8c>)
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f005 ff38 	bl	8006984 <HAL_UART_Receive>
 8000b14:	4603      	mov	r3, r0
 8000b16:	73fb      	strb	r3, [r7, #15]
	if (Status != HAL_OK) {
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <commTask+0x22>
		return 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e030      	b.n	8000b84 <commTask+0x84>
	}
	if (ch != '\r' && ch != '\n')
 8000b22:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <commTask+0x8c>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b0d      	cmp	r3, #13
 8000b28:	d01c      	beq.n	8000b64 <commTask+0x64>
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <commTask+0x8c>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b0a      	cmp	r3, #10
 8000b30:	d018      	beq.n	8000b64 <commTask+0x64>
	{
		HAL_UART_Transmit(huart2, &ch, 1, 0xFFFF);
 8000b32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b36:	2201      	movs	r2, #1
 8000b38:	4914      	ldr	r1, [pc, #80]	; (8000b8c <commTask+0x8c>)
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f005 fe8e 	bl	800685c <HAL_UART_Transmit>

		if (cmdcount >= MAX_BUFFER_LENGTH)
 8000b40:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <commTask+0x90>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b63      	cmp	r3, #99	; 0x63
 8000b46:	dd02      	ble.n	8000b4e <commTask+0x4e>
		{
			cmdcount = 0;
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <commTask+0x90>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <commTask+0x90>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	1c5a      	adds	r2, r3, #1
 8000b54:	490e      	ldr	r1, [pc, #56]	; (8000b90 <commTask+0x90>)
 8000b56:	600a      	str	r2, [r1, #0]
 8000b58:	4a0c      	ldr	r2, [pc, #48]	; (8000b8c <commTask+0x8c>)
 8000b5a:	7811      	ldrb	r1, [r2, #0]
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	; (8000b94 <commTask+0x94>)
 8000b5e:	54d1      	strb	r1, [r2, r3]
		return 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	e00f      	b.n	8000b84 <commTask+0x84>
	}
	HAL_UART_Transmit(huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 8000b64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b68:	2202      	movs	r2, #2
 8000b6a:	490b      	ldr	r1, [pc, #44]	; (8000b98 <commTask+0x98>)
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f005 fe75 	bl	800685c <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 8000b72:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <commTask+0x90>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a07      	ldr	r2, [pc, #28]	; (8000b94 <commTask+0x94>)
 8000b78:	2100      	movs	r1, #0
 8000b7a:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 8000b7c:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <commTask+0x90>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
	return 1;
 8000b82:	2301      	movs	r3, #1
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000228 	.word	0x20000228
 8000b90:	20000290 	.word	0x20000290
 8000b94:	2000022c 	.word	0x2000022c
 8000b98:	080087c4 	.word	0x080087c4

08000b9c <handleCommand>:

void handleCommand()
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af00      	add	r7, sp, #0
	char cmd[20];
	//sscanf((const char*)cmdbuffer, "%s", cmd);
	char* tokens;
	tokens = strtok(cmdbuffer,"  \r");
 8000ba2:	4952      	ldr	r1, [pc, #328]	; (8000cec <handleCommand+0x150>)
 8000ba4:	4852      	ldr	r0, [pc, #328]	; (8000cf0 <handleCommand+0x154>)
 8000ba6:	f006 fcf3 	bl	8007590 <strtok>
 8000baa:	61f8      	str	r0, [r7, #28]
	strcpy(cmd,tokens);
 8000bac:	463b      	mov	r3, r7
 8000bae:	69f9      	ldr	r1, [r7, #28]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f006 fce5 	bl	8007580 <strcpy>
	HAL_TIM_Base_Stop_IT(htimFour);
 8000bb6:	4b4f      	ldr	r3, [pc, #316]	; (8000cf4 <handleCommand+0x158>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f004 fb18 	bl	80051f0 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop_IT(htimFour,TIM_CHANNEL_1);
 8000bc0:	4b4c      	ldr	r3, [pc, #304]	; (8000cf4 <handleCommand+0x158>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f004 fe88 	bl	80058dc <HAL_TIM_PWM_Stop_IT>

	if (strcmp(cmd, "full") == 0)
 8000bcc:	463b      	mov	r3, r7
 8000bce:	494a      	ldr	r1, [pc, #296]	; (8000cf8 <handleCommand+0x15c>)
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fafd 	bl	80001d0 <strcmp>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d10a      	bne.n	8000bf2 <handleCommand+0x56>
	{
		ledOn(ledRed);
 8000bdc:	4b47      	ldr	r3, [pc, #284]	; (8000cfc <handleCommand+0x160>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff ff11 	bl	8000a08 <ledOn>
		ledOn(ledBlue);
 8000be6:	4b46      	ldr	r3, [pc, #280]	; (8000d00 <handleCommand+0x164>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff ff0c 	bl	8000a08 <ledOn>
	}
	else
	{
		printf("Invalid command\r\n");
	}
}
 8000bf0:	e078      	b.n	8000ce4 <handleCommand+0x148>
	else if (strcmp(cmd, "half") == 0)
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	4943      	ldr	r1, [pc, #268]	; (8000d04 <handleCommand+0x168>)
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff faea 	bl	80001d0 <strcmp>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d11a      	bne.n	8000c38 <handleCommand+0x9c>
		tokens = strtok(NULL, "  \r");
 8000c02:	493a      	ldr	r1, [pc, #232]	; (8000cec <handleCommand+0x150>)
 8000c04:	2000      	movs	r0, #0
 8000c06:	f006 fcc3 	bl	8007590 <strtok>
 8000c0a:	61f8      	str	r0, [r7, #28]
		strcpy(cmd,tokens);
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	69f9      	ldr	r1, [r7, #28]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f006 fcb5 	bl	8007580 <strcpy>
		strcpy(cmd,tokens);
 8000c16:	463b      	mov	r3, r7
 8000c18:	69f9      	ldr	r1, [r7, #28]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f006 fcb0 	bl	8007580 <strcpy>
		value = (int)atoi((const)cmd);
 8000c20:	463b      	mov	r3, r7
 8000c22:	4618      	mov	r0, r3
 8000c24:	f006 fbe7 	bl	80073f6 <atoi>
 8000c28:	6178      	str	r0, [r7, #20]
		setBrightness(ledBlue, value);
 8000c2a:	4b35      	ldr	r3, [pc, #212]	; (8000d00 <handleCommand+0x164>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	6979      	ldr	r1, [r7, #20]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff ff47 	bl	8000ac4 <setBrightness>
}
 8000c36:	e055      	b.n	8000ce4 <handleCommand+0x148>
	else if (strcmp(cmd, "blink") == 0)
 8000c38:	463b      	mov	r3, r7
 8000c3a:	4933      	ldr	r1, [pc, #204]	; (8000d08 <handleCommand+0x16c>)
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fac7 	bl	80001d0 <strcmp>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d10e      	bne.n	8000c66 <handleCommand+0xca>
		ledBlink(ledRed, 700);
 8000c48:	4b2c      	ldr	r3, [pc, #176]	; (8000cfc <handleCommand+0x160>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff feff 	bl	8000a54 <ledBlink>
		ledBlink(ledBlue, 300);
 8000c56:	4b2a      	ldr	r3, [pc, #168]	; (8000d00 <handleCommand+0x164>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fef8 	bl	8000a54 <ledBlink>
}
 8000c64:	e03e      	b.n	8000ce4 <handleCommand+0x148>
	else if(strcmp(cmd, "off") == 0)
 8000c66:	463b      	mov	r3, r7
 8000c68:	4928      	ldr	r1, [pc, #160]	; (8000d0c <handleCommand+0x170>)
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fab0 	bl	80001d0 <strcmp>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d10a      	bne.n	8000c8c <handleCommand+0xf0>
		ledOff(ledRed);
 8000c76:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <handleCommand+0x160>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff fed7 	bl	8000a2e <ledOff>
		ledOff(ledBlue);
 8000c80:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <handleCommand+0x164>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fed2 	bl	8000a2e <ledOff>
}
 8000c8a:	e02b      	b.n	8000ce4 <handleCommand+0x148>
	else if(strcmp(cmd, "set") == 0)
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	4920      	ldr	r1, [pc, #128]	; (8000d10 <handleCommand+0x174>)
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fa9d 	bl	80001d0 <strcmp>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d120      	bne.n	8000cde <handleCommand+0x142>
		tokens = strtok(NULL, "  \r");
 8000c9c:	4913      	ldr	r1, [pc, #76]	; (8000cec <handleCommand+0x150>)
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f006 fc76 	bl	8007590 <strtok>
 8000ca4:	61f8      	str	r0, [r7, #28]
	    strcpy(cmd,tokens);
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	69f9      	ldr	r1, [r7, #28]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f006 fc68 	bl	8007580 <strcpy>
		strcpy(cmd,tokens);
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	69f9      	ldr	r1, [r7, #28]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f006 fc63 	bl	8007580 <strcpy>
		value = (int)atoi((const)cmd);
 8000cba:	463b      	mov	r3, r7
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f006 fb9a 	bl	80073f6 <atoi>
 8000cc2:	61b8      	str	r0, [r7, #24]
		ledBlink(ledBlue, value);
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <handleCommand+0x164>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	69b9      	ldr	r1, [r7, #24]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fec2 	bl	8000a54 <ledBlink>
		ledBlink(ledRed, value);
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <handleCommand+0x160>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	69b9      	ldr	r1, [r7, #24]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff febc 	bl	8000a54 <ledBlink>
}
 8000cdc:	e002      	b.n	8000ce4 <handleCommand+0x148>
		printf("Invalid command\r\n");
 8000cde:	480d      	ldr	r0, [pc, #52]	; (8000d14 <handleCommand+0x178>)
 8000ce0:	f006 fc46 	bl	8007570 <puts>
}
 8000ce4:	bf00      	nop
 8000ce6:	3720      	adds	r7, #32
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	080087c8 	.word	0x080087c8
 8000cf0:	2000022c 	.word	0x2000022c
 8000cf4:	20000294 	.word	0x20000294
 8000cf8:	080087cc 	.word	0x080087cc
 8000cfc:	20000220 	.word	0x20000220
 8000d00:	20000224 	.word	0x20000224
 8000d04:	080087d4 	.word	0x080087d4
 8000d08:	080087dc 	.word	0x080087dc
 8000d0c:	080087e4 	.word	0x080087e4
 8000d10:	080087e8 	.word	0x080087e8
 8000d14:	080087ec 	.word	0x080087ec

08000d18 <myMain>:
void myMain(UART_HandleTypeDef* huart2)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	if (commTask(huart2))
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff feed 	bl	8000b00 <commTask>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <myMain+0x18>
	{
		handleCommand();
 8000d2c:	f7ff ff36 	bl	8000b9c <handleCommand>
	}
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <lightSensorInit>:
 */
#include "Sensor.h"


void lightSensorInit(LIGHT_SENSOR* lightSensor,ADC_HandleTypeDef* light)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
	lightSensor->light = light;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	683a      	ldr	r2, [r7, #0]
 8000d46:	601a      	str	r2, [r3, #0]
	lightSensor->maxLightValue = MAX_LIGHT_VAlUE;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000d4e:	605a      	str	r2, [r3, #4]
	lightSensor->maxLedValue = MAX_LED_VALUE;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	220a      	movs	r2, #10
 8000d54:	60da      	str	r2, [r3, #12]
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
	...

08000d64 <calcLedValue>:

void calcLedValue(LIGHT_SENSOR* lightSensor)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	int lightValue = HAL_ADC_GetValue(lightSensor->light);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f001 fbc3 	bl	80024fc <HAL_ADC_GetValue>
 8000d76:	4603      	mov	r3, r0
 8000d78:	60fb      	str	r3, [r7, #12]
	lightSensor->ledValue = (MAX_LED_VALUE * lightValue + (MAX_LIGHT_VAlUE/2))/MAX_LIGHT_VAlUE;
 8000d7a:	68fa      	ldr	r2, [r7, #12]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	4413      	add	r3, r2
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8000d88:	4a06      	ldr	r2, [pc, #24]	; (8000da4 <calcLedValue+0x40>)
 8000d8a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d8e:	441a      	add	r2, r3
 8000d90:	12d2      	asrs	r2, r2, #11
 8000d92:	17db      	asrs	r3, r3, #31
 8000d94:	1ad2      	subs	r2, r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	611a      	str	r2, [r3, #16]

}
 8000d9a:	bf00      	nop
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	80080081 	.word	0x80080081

08000da8 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int fd, char* ptr, int len) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbc:	68b9      	ldr	r1, [r7, #8]
 8000dbe:	4804      	ldr	r0, [pc, #16]	; (8000dd0 <_write+0x28>)
 8000dc0:	f005 fd4c 	bl	800685c <HAL_UART_Transmit>
    return len;
 8000dc4:	687b      	ldr	r3, [r7, #4]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	2000042c 	.word	0x2000042c

08000dd4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	if(htim == &htim6)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a13      	ldr	r2, [pc, #76]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d104      	bne.n	8000dee <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		changeFreq(&htim3, &htim6);// for the buzzer
 8000de4:	4911      	ldr	r1, [pc, #68]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000de6:	4812      	ldr	r0, [pc, #72]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000de8:	f7ff fce8 	bl	80007bc <changeFreq>
	}
	else if(htim == &htim4)
	{
		HAL_GPIO_WritePin(GPIOA,BlueLed_Pin , 1);
	}
}
 8000dec:	e019      	b.n	8000e22 <HAL_TIM_PeriodElapsedCallback+0x4e>
	else if (htim == &htim7)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a10      	ldr	r2, [pc, #64]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d10b      	bne.n	8000e0e <HAL_TIM_PeriodElapsedCallback+0x3a>
		handleClicks();
 8000df6:	f7ff fc53 	bl	80006a0 <handleClicks>
		clockOnInterrupt(&myQlock);
 8000dfa:	480f      	ldr	r0, [pc, #60]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000dfc:	f7ff fda2 	bl	8000944 <clockOnInterrupt>
		ledOnTimerInterrupt(&ledR);
 8000e00:	480e      	ldr	r0, [pc, #56]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000e02:	f7ff fe3b 	bl	8000a7c <ledOnTimerInterrupt>
		ledOnTimerInterrupt(&ledB);
 8000e06:	480e      	ldr	r0, [pc, #56]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000e08:	f7ff fe38 	bl	8000a7c <ledOnTimerInterrupt>
}
 8000e0c:	e009      	b.n	8000e22 <HAL_TIM_PeriodElapsedCallback+0x4e>
	else if(htim == &htim4)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a0c      	ldr	r2, [pc, #48]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d105      	bne.n	8000e22 <HAL_TIM_PeriodElapsedCallback+0x4e>
		HAL_GPIO_WritePin(GPIOA,BlueLed_Pin , 1);
 8000e16:	2201      	movs	r2, #1
 8000e18:	2120      	movs	r1, #32
 8000e1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e1e:	f002 fd25 	bl	800386c <HAL_GPIO_WritePin>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000394 	.word	0x20000394
 8000e30:	200002fc 	.word	0x200002fc
 8000e34:	200003e0 	.word	0x200003e0
 8000e38:	200004e0 	.word	0x200004e0
 8000e3c:	200004b0 	.word	0x200004b0
 8000e40:	200004c8 	.word	0x200004c8
 8000e44:	20000348 	.word	0x20000348

08000e48 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef * htim)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA,BlueLed_Pin , 0);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2120      	movs	r1, #32
 8000e54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e58:	f002 fd08 	bl	800386c <HAL_GPIO_WritePin>
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == rightBtn_Pin)
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e74:	d105      	bne.n	8000e82 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		onOffMusic (&htim3);//turn on/off the music
 8000e76:	4808      	ldr	r0, [pc, #32]	; (8000e98 <HAL_GPIO_EXTI_Callback+0x34>)
 8000e78:	f7ff fcf2 	bl	8000860 <onOffMusic>
		printTime(&myQlock);// print time of running
 8000e7c:	4807      	ldr	r0, [pc, #28]	; (8000e9c <HAL_GPIO_EXTI_Callback+0x38>)
 8000e7e:	f7ff fd71 	bl	8000964 <printTime>
	}

	if(GPIO_Pin == leftBtn_Pin)
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	2b08      	cmp	r3, #8
 8000e86:	d102      	bne.n	8000e8e <HAL_GPIO_EXTI_Callback+0x2a>
	{
		//HAL_GPIO_TogglePin(GPIOA, BlueLed_Pin);
		//onClickInterrupt(GPIO_Pin);//print short click/long click
		btnClick.noiseWait = ON;
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	71da      	strb	r2, [r3, #7]

	}

}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200002fc 	.word	0x200002fc
 8000e9c:	200004e0 	.word	0x200004e0
 8000ea0:	200004e8 	.word	0x200004e8

08000ea4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc2)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a08      	ldr	r2, [pc, #32]	; (8000ed0 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d108      	bne.n	8000ec6 <HAL_ADC_ConvCpltCallback+0x22>
	{
		calcLedValue(&light);
 8000eb4:	4807      	ldr	r0, [pc, #28]	; (8000ed4 <HAL_ADC_ConvCpltCallback+0x30>)
 8000eb6:	f7ff ff55 	bl	8000d64 <calcLedValue>
		setBrightness(&ledB,light.ledValue);
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_ADC_ConvCpltCallback+0x30>)
 8000ebc:	691b      	ldr	r3, [r3, #16]
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <HAL_ADC_ConvCpltCallback+0x34>)
 8000ec2:	f7ff fdff 	bl	8000ac4 <setBrightness>
	}
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000298 	.word	0x20000298
 8000ed4:	20000500 	.word	0x20000500
 8000ed8:	200004c8 	.word	0x200004c8

08000edc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee0:	f000 fe12 	bl	8001b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee4:	f000 f858 	bl	8000f98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee8:	f000 fa60 	bl	80013ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000eec:	f000 fa2e 	bl	800134c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000ef0:	f000 f908 	bl	8001104 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000ef4:	f000 f9bc 	bl	8001270 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000ef8:	f000 f9f2 	bl	80012e0 <MX_TIM7_Init>
  MX_TIM4_Init();
 8000efc:	f000 f95e 	bl	80011bc <MX_TIM4_Init>
  MX_ADC2_Init();
 8000f00:	f000 f89c 	bl	800103c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8000f04:	4819      	ldr	r0, [pc, #100]	; (8000f6c <main+0x90>)
 8000f06:	f004 f903 	bl	8005110 <HAL_TIM_Base_Start_IT>
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000f0a:	2036      	movs	r0, #54	; 0x36
 8000f0c:	f002 fad1 	bl	80034b2 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT(&htim7);
 8000f10:	4817      	ldr	r0, [pc, #92]	; (8000f70 <main+0x94>)
 8000f12:	f004 f8fd 	bl	8005110 <HAL_TIM_Base_Start_IT>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000f16:	2037      	movs	r0, #55	; 0x37
 8000f18:	f002 facb 	bl	80034b2 <HAL_NVIC_EnableIRQ>
  ledInit(&ledR, GPIOA, RedLed_Pin);
 8000f1c:	2240      	movs	r2, #64	; 0x40
 8000f1e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000f22:	4814      	ldr	r0, [pc, #80]	; (8000f74 <main+0x98>)
 8000f24:	f7ff fd44 	bl	80009b0 <ledInit>
  ledInit(&ledB, GPIOA, BlueLed_Pin);
 8000f28:	2220      	movs	r2, #32
 8000f2a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000f2e:	4812      	ldr	r0, [pc, #72]	; (8000f78 <main+0x9c>)
 8000f30:	f7ff fd3e 	bl	80009b0 <ledInit>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f34:	201e      	movs	r0, #30
 8000f36:	f002 fabc 	bl	80034b2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000f3a:	2012      	movs	r0, #18
 8000f3c:	f002 fab9 	bl	80034b2 <HAL_NVIC_EnableIRQ>
  HAL_ADC_Start_IT(&hadc2);
 8000f40:	480e      	ldr	r0, [pc, #56]	; (8000f7c <main+0xa0>)
 8000f42:	f001 f9a9 	bl	8002298 <HAL_ADC_Start_IT>
  htimInit(&htim4);
 8000f46:	480e      	ldr	r0, [pc, #56]	; (8000f80 <main+0xa4>)
 8000f48:	f7ff fd22 	bl	8000990 <htimInit>
  lightSensorInit(&light, &hadc2);
 8000f4c:	490b      	ldr	r1, [pc, #44]	; (8000f7c <main+0xa0>)
 8000f4e:	480d      	ldr	r0, [pc, #52]	; (8000f84 <main+0xa8>)
 8000f50:	f7ff fef2 	bl	8000d38 <lightSensorInit>
//  installLed(&ledR,&ledB);
  initBtnClicks(&btnClick,leftBtn_GPIO_Port,leftBtn_Pin);
 8000f54:	2208      	movs	r2, #8
 8000f56:	490c      	ldr	r1, [pc, #48]	; (8000f88 <main+0xac>)
 8000f58:	480c      	ldr	r0, [pc, #48]	; (8000f8c <main+0xb0>)
 8000f5a:	f7ff fb1b 	bl	8000594 <initBtnClicks>
  clockInit(&myQlock);
 8000f5e:	480c      	ldr	r0, [pc, #48]	; (8000f90 <main+0xb4>)
 8000f60:	f7ff fca8 	bl	80008b4 <clockInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  myMain(&huart2);
 8000f64:	480b      	ldr	r0, [pc, #44]	; (8000f94 <main+0xb8>)
 8000f66:	f7ff fed7 	bl	8000d18 <myMain>
 8000f6a:	e7fb      	b.n	8000f64 <main+0x88>
 8000f6c:	20000394 	.word	0x20000394
 8000f70:	200003e0 	.word	0x200003e0
 8000f74:	200004b0 	.word	0x200004b0
 8000f78:	200004c8 	.word	0x200004c8
 8000f7c:	20000298 	.word	0x20000298
 8000f80:	20000348 	.word	0x20000348
 8000f84:	20000500 	.word	0x20000500
 8000f88:	48000400 	.word	0x48000400
 8000f8c:	200004e8 	.word	0x200004e8
 8000f90:	200004e0 	.word	0x200004e0
 8000f94:	2000042c 	.word	0x2000042c

08000f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b096      	sub	sp, #88	; 0x58
 8000f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	2244      	movs	r2, #68	; 0x44
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f006 fa54 	bl	8007454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fac:	463b      	mov	r3, r7
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]
 8000fb8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fba:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fbe:	f002 fcad 	bl	800391c <HAL_PWREx_ControlVoltageScaling>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fc8:	f000 fa84 	bl	80014d4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fd4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fd6:	2310      	movs	r3, #16
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000fe6:	230a      	movs	r3, #10
 8000fe8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000fea:	2307      	movs	r3, #7
 8000fec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f002 fce4 	bl	80039c8 <HAL_RCC_OscConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001006:	f000 fa65 	bl	80014d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100a:	230f      	movs	r3, #15
 800100c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800100e:	2303      	movs	r3, #3
 8001010:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800101e:	463b      	mov	r3, r7
 8001020:	2104      	movs	r1, #4
 8001022:	4618      	mov	r0, r3
 8001024:	f003 f8ac 	bl	8004180 <HAL_RCC_ClockConfig>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800102e:	f000 fa51 	bl	80014d4 <Error_Handler>
  }
}
 8001032:	bf00      	nop
 8001034:	3758      	adds	r7, #88	; 0x58
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001042:	463b      	mov	r3, r7
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
 8001050:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001052:	4b29      	ldr	r3, [pc, #164]	; (80010f8 <MX_ADC2_Init+0xbc>)
 8001054:	4a29      	ldr	r2, [pc, #164]	; (80010fc <MX_ADC2_Init+0xc0>)
 8001056:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 8001058:	4b27      	ldr	r3, [pc, #156]	; (80010f8 <MX_ADC2_Init+0xbc>)
 800105a:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
 800105e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001060:	4b25      	ldr	r3, [pc, #148]	; (80010f8 <MX_ADC2_Init+0xbc>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001066:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <MX_ADC2_Init+0xbc>)
 8001068:	2200      	movs	r2, #0
 800106a:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800106c:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <MX_ADC2_Init+0xbc>)
 800106e:	2200      	movs	r2, #0
 8001070:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001072:	4b21      	ldr	r3, [pc, #132]	; (80010f8 <MX_ADC2_Init+0xbc>)
 8001074:	2204      	movs	r2, #4
 8001076:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001078:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <MX_ADC2_Init+0xbc>)
 800107a:	2200      	movs	r2, #0
 800107c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800107e:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <MX_ADC2_Init+0xbc>)
 8001080:	2201      	movs	r2, #1
 8001082:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8001084:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <MX_ADC2_Init+0xbc>)
 8001086:	2201      	movs	r2, #1
 8001088:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800108a:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <MX_ADC2_Init+0xbc>)
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <MX_ADC2_Init+0xbc>)
 8001094:	2200      	movs	r2, #0
 8001096:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001098:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <MX_ADC2_Init+0xbc>)
 800109a:	2200      	movs	r2, #0
 800109c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800109e:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <MX_ADC2_Init+0xbc>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010a6:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <MX_ADC2_Init+0xbc>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <MX_ADC2_Init+0xbc>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010b4:	4810      	ldr	r0, [pc, #64]	; (80010f8 <MX_ADC2_Init+0xbc>)
 80010b6:	f000 ff99 	bl	8001fec <HAL_ADC_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 80010c0:	f000 fa08 	bl	80014d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80010c4:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <MX_ADC2_Init+0xc4>)
 80010c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010c8:	2306      	movs	r3, #6
 80010ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010d0:	237f      	movs	r3, #127	; 0x7f
 80010d2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010d4:	2304      	movs	r3, #4
 80010d6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010dc:	463b      	mov	r3, r7
 80010de:	4619      	mov	r1, r3
 80010e0:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_ADC2_Init+0xbc>)
 80010e2:	f001 fc47 	bl	8002974 <HAL_ADC_ConfigChannel>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 80010ec:	f000 f9f2 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000298 	.word	0x20000298
 80010fc:	50040100 	.word	0x50040100
 8001100:	19200040 	.word	0x19200040

08001104 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800110a:	f107 031c 	add.w	r3, r7, #28
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001116:	463b      	mov	r3, r7
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
 8001124:	615a      	str	r2, [r3, #20]
 8001126:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001128:	4b22      	ldr	r3, [pc, #136]	; (80011b4 <MX_TIM3_Init+0xb0>)
 800112a:	4a23      	ldr	r2, [pc, #140]	; (80011b8 <MX_TIM3_Init+0xb4>)
 800112c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 800112e:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <MX_TIM3_Init+0xb0>)
 8001130:	f240 321f 	movw	r2, #799	; 0x31f
 8001134:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001136:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <MX_TIM3_Init+0xb0>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 381;
 800113c:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <MX_TIM3_Init+0xb0>)
 800113e:	f240 127d 	movw	r2, #381	; 0x17d
 8001142:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <MX_TIM3_Init+0xb0>)
 8001146:	2200      	movs	r2, #0
 8001148:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114a:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <MX_TIM3_Init+0xb0>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001150:	4818      	ldr	r0, [pc, #96]	; (80011b4 <MX_TIM3_Init+0xb0>)
 8001152:	f004 f87c 	bl	800524e <HAL_TIM_PWM_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 800115c:	f000 f9ba 	bl	80014d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001164:	2300      	movs	r3, #0
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	4619      	mov	r1, r3
 800116e:	4811      	ldr	r0, [pc, #68]	; (80011b4 <MX_TIM3_Init+0xb0>)
 8001170:	f005 fa80 	bl	8006674 <HAL_TIMEx_MasterConfigSynchronization>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800117a:	f000 f9ab 	bl	80014d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800117e:	2360      	movs	r3, #96	; 0x60
 8001180:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800118e:	463b      	mov	r3, r7
 8001190:	2200      	movs	r2, #0
 8001192:	4619      	mov	r1, r3
 8001194:	4807      	ldr	r0, [pc, #28]	; (80011b4 <MX_TIM3_Init+0xb0>)
 8001196:	f004 fda5 	bl	8005ce4 <HAL_TIM_PWM_ConfigChannel>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80011a0:	f000 f998 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011a4:	4803      	ldr	r0, [pc, #12]	; (80011b4 <MX_TIM3_Init+0xb0>)
 80011a6:	f000 faab 	bl	8001700 <HAL_TIM_MspPostInit>

}
 80011aa:	bf00      	nop
 80011ac:	3728      	adds	r7, #40	; 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200002fc 	.word	0x200002fc
 80011b8:	40000400 	.word	0x40000400

080011bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	; 0x28
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ce:	463b      	mov	r3, r7
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
 80011dc:	615a      	str	r2, [r3, #20]
 80011de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011e0:	4b21      	ldr	r3, [pc, #132]	; (8001268 <MX_TIM4_Init+0xac>)
 80011e2:	4a22      	ldr	r2, [pc, #136]	; (800126c <MX_TIM4_Init+0xb0>)
 80011e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 999;
 80011e6:	4b20      	ldr	r3, [pc, #128]	; (8001268 <MX_TIM4_Init+0xac>)
 80011e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011ec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ee:	4b1e      	ldr	r3, [pc, #120]	; (8001268 <MX_TIM4_Init+0xac>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9;
 80011f4:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <MX_TIM4_Init+0xac>)
 80011f6:	2209      	movs	r2, #9
 80011f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011fa:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <MX_TIM4_Init+0xac>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001200:	4b19      	ldr	r3, [pc, #100]	; (8001268 <MX_TIM4_Init+0xac>)
 8001202:	2200      	movs	r2, #0
 8001204:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001206:	4818      	ldr	r0, [pc, #96]	; (8001268 <MX_TIM4_Init+0xac>)
 8001208:	f004 f821 	bl	800524e <HAL_TIM_PWM_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001212:	f000 f95f 	bl	80014d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	4619      	mov	r1, r3
 8001224:	4810      	ldr	r0, [pc, #64]	; (8001268 <MX_TIM4_Init+0xac>)
 8001226:	f005 fa25 	bl	8006674 <HAL_TIMEx_MasterConfigSynchronization>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001230:	f000 f950 	bl	80014d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001234:	2360      	movs	r3, #96	; 0x60
 8001236:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800123c:	2300      	movs	r3, #0
 800123e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001244:	463b      	mov	r3, r7
 8001246:	2200      	movs	r2, #0
 8001248:	4619      	mov	r1, r3
 800124a:	4807      	ldr	r0, [pc, #28]	; (8001268 <MX_TIM4_Init+0xac>)
 800124c:	f004 fd4a 	bl	8005ce4 <HAL_TIM_PWM_ConfigChannel>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001256:	f000 f93d 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800125a:	4803      	ldr	r0, [pc, #12]	; (8001268 <MX_TIM4_Init+0xac>)
 800125c:	f000 fa50 	bl	8001700 <HAL_TIM_MspPostInit>

}
 8001260:	bf00      	nop
 8001262:	3728      	adds	r7, #40	; 0x28
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000348 	.word	0x20000348
 800126c:	40000800 	.word	0x40000800

08001270 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001280:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <MX_TIM6_Init+0x68>)
 8001282:	4a16      	ldr	r2, [pc, #88]	; (80012dc <MX_TIM6_Init+0x6c>)
 8001284:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8001286:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <MX_TIM6_Init+0x68>)
 8001288:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800128c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128e:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <MX_TIM6_Init+0x68>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1999;
 8001294:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <MX_TIM6_Init+0x68>)
 8001296:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800129a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <MX_TIM6_Init+0x68>)
 800129e:	2200      	movs	r2, #0
 80012a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80012a2:	480d      	ldr	r0, [pc, #52]	; (80012d8 <MX_TIM6_Init+0x68>)
 80012a4:	f003 fe4c 	bl	8004f40 <HAL_TIM_Base_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80012ae:	f000 f911 	bl	80014d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	4619      	mov	r1, r3
 80012be:	4806      	ldr	r0, [pc, #24]	; (80012d8 <MX_TIM6_Init+0x68>)
 80012c0:	f005 f9d8 	bl	8006674 <HAL_TIMEx_MasterConfigSynchronization>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80012ca:	f000 f903 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000394 	.word	0x20000394
 80012dc:	40001000 	.word	0x40001000

080012e0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80012f0:	4b14      	ldr	r3, [pc, #80]	; (8001344 <MX_TIM7_Init+0x64>)
 80012f2:	4a15      	ldr	r2, [pc, #84]	; (8001348 <MX_TIM7_Init+0x68>)
 80012f4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 80012f6:	4b13      	ldr	r3, [pc, #76]	; (8001344 <MX_TIM7_Init+0x64>)
 80012f8:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80012fc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <MX_TIM7_Init+0x64>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8001304:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <MX_TIM7_Init+0x64>)
 8001306:	2209      	movs	r2, #9
 8001308:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <MX_TIM7_Init+0x64>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001310:	480c      	ldr	r0, [pc, #48]	; (8001344 <MX_TIM7_Init+0x64>)
 8001312:	f003 fe15 	bl	8004f40 <HAL_TIM_Base_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800131c:	f000 f8da 	bl	80014d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001320:	2300      	movs	r3, #0
 8001322:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	4619      	mov	r1, r3
 800132c:	4805      	ldr	r0, [pc, #20]	; (8001344 <MX_TIM7_Init+0x64>)
 800132e:	f005 f9a1 	bl	8006674 <HAL_TIMEx_MasterConfigSynchronization>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001338:	f000 f8cc 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800133c:	bf00      	nop
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200003e0 	.word	0x200003e0
 8001348:	40001400 	.word	0x40001400

0800134c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001350:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <MX_USART2_UART_Init+0x58>)
 8001352:	4a15      	ldr	r2, [pc, #84]	; (80013a8 <MX_USART2_UART_Init+0x5c>)
 8001354:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001356:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <MX_USART2_UART_Init+0x58>)
 8001358:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800135c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800135e:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <MX_USART2_UART_Init+0x58>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <MX_USART2_UART_Init+0x58>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <MX_USART2_UART_Init+0x58>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <MX_USART2_UART_Init+0x58>)
 8001372:	220c      	movs	r2, #12
 8001374:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <MX_USART2_UART_Init+0x58>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <MX_USART2_UART_Init+0x58>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <MX_USART2_UART_Init+0x58>)
 8001384:	2200      	movs	r2, #0
 8001386:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <MX_USART2_UART_Init+0x58>)
 800138a:	2200      	movs	r2, #0
 800138c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800138e:	4805      	ldr	r0, [pc, #20]	; (80013a4 <MX_USART2_UART_Init+0x58>)
 8001390:	f005 fa16 	bl	80067c0 <HAL_UART_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800139a:	f000 f89b 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2000042c 	.word	0x2000042c
 80013a8:	40004400 	.word	0x40004400

080013ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c2:	4b41      	ldr	r3, [pc, #260]	; (80014c8 <MX_GPIO_Init+0x11c>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	4a40      	ldr	r2, [pc, #256]	; (80014c8 <MX_GPIO_Init+0x11c>)
 80013c8:	f043 0304 	orr.w	r3, r3, #4
 80013cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ce:	4b3e      	ldr	r3, [pc, #248]	; (80014c8 <MX_GPIO_Init+0x11c>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	f003 0304 	and.w	r3, r3, #4
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013da:	4b3b      	ldr	r3, [pc, #236]	; (80014c8 <MX_GPIO_Init+0x11c>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013de:	4a3a      	ldr	r2, [pc, #232]	; (80014c8 <MX_GPIO_Init+0x11c>)
 80013e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013e6:	4b38      	ldr	r3, [pc, #224]	; (80014c8 <MX_GPIO_Init+0x11c>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	4b35      	ldr	r3, [pc, #212]	; (80014c8 <MX_GPIO_Init+0x11c>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f6:	4a34      	ldr	r2, [pc, #208]	; (80014c8 <MX_GPIO_Init+0x11c>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013fe:	4b32      	ldr	r3, [pc, #200]	; (80014c8 <MX_GPIO_Init+0x11c>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800140a:	4b2f      	ldr	r3, [pc, #188]	; (80014c8 <MX_GPIO_Init+0x11c>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	4a2e      	ldr	r2, [pc, #184]	; (80014c8 <MX_GPIO_Init+0x11c>)
 8001410:	f043 0302 	orr.w	r3, r3, #2
 8001414:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001416:	4b2c      	ldr	r3, [pc, #176]	; (80014c8 <MX_GPIO_Init+0x11c>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BlueLed_Pin|RedLed_Pin, GPIO_PIN_RESET);
 8001422:	2200      	movs	r2, #0
 8001424:	2160      	movs	r1, #96	; 0x60
 8001426:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800142a:	f002 fa1f 	bl	800386c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800142e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001434:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	4619      	mov	r1, r3
 8001444:	4821      	ldr	r0, [pc, #132]	; (80014cc <MX_GPIO_Init+0x120>)
 8001446:	f002 f84f 	bl	80034e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BlueLed_Pin RedLed_Pin */
  GPIO_InitStruct.Pin = BlueLed_Pin|RedLed_Pin;
 800144a:	2360      	movs	r3, #96	; 0x60
 800144c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144e:	2301      	movs	r3, #1
 8001450:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2300      	movs	r3, #0
 8001458:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001464:	f002 f840 	bl	80034e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : rightBtn_Pin */
  GPIO_InitStruct.Pin = rightBtn_Pin;
 8001468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800146c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800146e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001472:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(rightBtn_GPIO_Port, &GPIO_InitStruct);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001482:	f002 f831 	bl	80034e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : leftBtn_Pin */
  GPIO_InitStruct.Pin = leftBtn_Pin;
 8001486:	2308      	movs	r3, #8
 8001488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800148a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800148e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(leftBtn_GPIO_Port, &GPIO_InitStruct);
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	4619      	mov	r1, r3
 800149a:	480d      	ldr	r0, [pc, #52]	; (80014d0 <MX_GPIO_Init+0x124>)
 800149c:	f002 f824 	bl	80034e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2100      	movs	r1, #0
 80014a4:	2009      	movs	r0, #9
 80014a6:	f001 ffe8 	bl	800347a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80014aa:	2009      	movs	r0, #9
 80014ac:	f002 f801 	bl	80034b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014b0:	2200      	movs	r2, #0
 80014b2:	2100      	movs	r1, #0
 80014b4:	2028      	movs	r0, #40	; 0x28
 80014b6:	f001 ffe0 	bl	800347a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014ba:	2028      	movs	r0, #40	; 0x28
 80014bc:	f001 fff9 	bl	80034b2 <HAL_NVIC_EnableIRQ>

}
 80014c0:	bf00      	nop
 80014c2:	3728      	adds	r7, #40	; 0x28
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40021000 	.word	0x40021000
 80014cc:	48000800 	.word	0x48000800
 80014d0:	48000400 	.word	0x48000400

080014d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d8:	b672      	cpsid	i
}
 80014da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014dc:	e7fe      	b.n	80014dc <Error_Handler+0x8>
	...

080014e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e6:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <HAL_MspInit+0x44>)
 80014e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ea:	4a0e      	ldr	r2, [pc, #56]	; (8001524 <HAL_MspInit+0x44>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6613      	str	r3, [r2, #96]	; 0x60
 80014f2:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <HAL_MspInit+0x44>)
 80014f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <HAL_MspInit+0x44>)
 8001500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001502:	4a08      	ldr	r2, [pc, #32]	; (8001524 <HAL_MspInit+0x44>)
 8001504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001508:	6593      	str	r3, [r2, #88]	; 0x58
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_MspInit+0x44>)
 800150c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40021000 	.word	0x40021000

08001528 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b0ac      	sub	sp, #176	; 0xb0
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	2288      	movs	r2, #136	; 0x88
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f005 ff83 	bl	8007454 <memset>
  if(hadc->Instance==ADC2)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a2b      	ldr	r2, [pc, #172]	; (8001600 <HAL_ADC_MspInit+0xd8>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d14f      	bne.n	80015f8 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001558:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800155c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800155e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001562:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001566:	2302      	movs	r3, #2
 8001568:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800156a:	2301      	movs	r3, #1
 800156c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800156e:	2308      	movs	r3, #8
 8001570:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001572:	2307      	movs	r3, #7
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001576:	2302      	movs	r3, #2
 8001578:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800157a:	2302      	movs	r3, #2
 800157c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800157e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001582:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4618      	mov	r0, r3
 800158a:	f003 f81d 	bl	80045c8 <HAL_RCCEx_PeriphCLKConfig>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001594:	f7ff ff9e 	bl	80014d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001598:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <HAL_ADC_MspInit+0xdc>)
 800159a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159c:	4a19      	ldr	r2, [pc, #100]	; (8001604 <HAL_ADC_MspInit+0xdc>)
 800159e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a4:	4b17      	ldr	r3, [pc, #92]	; (8001604 <HAL_ADC_MspInit+0xdc>)
 80015a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <HAL_ADC_MspInit+0xdc>)
 80015b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b4:	4a13      	ldr	r2, [pc, #76]	; (8001604 <HAL_ADC_MspInit+0xdc>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <HAL_ADC_MspInit+0xdc>)
 80015be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA1     ------> ADC2_IN6
    */
    GPIO_InitStruct.Pin = LightSensor_Pin;
 80015c8:	2302      	movs	r3, #2
 80015ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015ce:	230b      	movs	r3, #11
 80015d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(LightSensor_GPIO_Port, &GPIO_InitStruct);
 80015da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015de:	4619      	mov	r1, r3
 80015e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e4:	f001 ff80 	bl	80034e8 <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2100      	movs	r1, #0
 80015ec:	2012      	movs	r0, #18
 80015ee:	f001 ff44 	bl	800347a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80015f2:	2012      	movs	r0, #18
 80015f4:	f001 ff5d 	bl	80034b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80015f8:	bf00      	nop
 80015fa:	37b0      	adds	r7, #176	; 0xb0
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	50040100 	.word	0x50040100
 8001604:	40021000 	.word	0x40021000

08001608 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a16      	ldr	r2, [pc, #88]	; (8001670 <HAL_TIM_PWM_MspInit+0x68>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d10c      	bne.n	8001634 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800161a:	4b16      	ldr	r3, [pc, #88]	; (8001674 <HAL_TIM_PWM_MspInit+0x6c>)
 800161c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161e:	4a15      	ldr	r2, [pc, #84]	; (8001674 <HAL_TIM_PWM_MspInit+0x6c>)
 8001620:	f043 0302 	orr.w	r3, r3, #2
 8001624:	6593      	str	r3, [r2, #88]	; 0x58
 8001626:	4b13      	ldr	r3, [pc, #76]	; (8001674 <HAL_TIM_PWM_MspInit+0x6c>)
 8001628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001632:	e018      	b.n	8001666 <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM4)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a0f      	ldr	r2, [pc, #60]	; (8001678 <HAL_TIM_PWM_MspInit+0x70>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d113      	bne.n	8001666 <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800163e:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <HAL_TIM_PWM_MspInit+0x6c>)
 8001640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001642:	4a0c      	ldr	r2, [pc, #48]	; (8001674 <HAL_TIM_PWM_MspInit+0x6c>)
 8001644:	f043 0304 	orr.w	r3, r3, #4
 8001648:	6593      	str	r3, [r2, #88]	; 0x58
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <HAL_TIM_PWM_MspInit+0x6c>)
 800164c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164e:	f003 0304 	and.w	r3, r3, #4
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	2100      	movs	r1, #0
 800165a:	201e      	movs	r0, #30
 800165c:	f001 ff0d 	bl	800347a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001660:	201e      	movs	r0, #30
 8001662:	f001 ff26 	bl	80034b2 <HAL_NVIC_EnableIRQ>
}
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40000400 	.word	0x40000400
 8001674:	40021000 	.word	0x40021000
 8001678:	40000800 	.word	0x40000800

0800167c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a1a      	ldr	r2, [pc, #104]	; (80016f4 <HAL_TIM_Base_MspInit+0x78>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d114      	bne.n	80016b8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800168e:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <HAL_TIM_Base_MspInit+0x7c>)
 8001690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001692:	4a19      	ldr	r2, [pc, #100]	; (80016f8 <HAL_TIM_Base_MspInit+0x7c>)
 8001694:	f043 0310 	orr.w	r3, r3, #16
 8001698:	6593      	str	r3, [r2, #88]	; 0x58
 800169a:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <HAL_TIM_Base_MspInit+0x7c>)
 800169c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169e:	f003 0310 	and.w	r3, r3, #16
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2100      	movs	r1, #0
 80016aa:	2036      	movs	r0, #54	; 0x36
 80016ac:	f001 fee5 	bl	800347a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016b0:	2036      	movs	r0, #54	; 0x36
 80016b2:	f001 fefe 	bl	80034b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80016b6:	e018      	b.n	80016ea <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0f      	ldr	r2, [pc, #60]	; (80016fc <HAL_TIM_Base_MspInit+0x80>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d113      	bne.n	80016ea <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80016c2:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <HAL_TIM_Base_MspInit+0x7c>)
 80016c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c6:	4a0c      	ldr	r2, [pc, #48]	; (80016f8 <HAL_TIM_Base_MspInit+0x7c>)
 80016c8:	f043 0320 	orr.w	r3, r3, #32
 80016cc:	6593      	str	r3, [r2, #88]	; 0x58
 80016ce:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <HAL_TIM_Base_MspInit+0x7c>)
 80016d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d2:	f003 0320 	and.w	r3, r3, #32
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80016da:	2200      	movs	r2, #0
 80016dc:	2100      	movs	r1, #0
 80016de:	2037      	movs	r0, #55	; 0x37
 80016e0:	f001 fecb 	bl	800347a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80016e4:	2037      	movs	r0, #55	; 0x37
 80016e6:	f001 fee4 	bl	80034b2 <HAL_NVIC_EnableIRQ>
}
 80016ea:	bf00      	nop
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40001000 	.word	0x40001000
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40001400 	.word	0x40001400

08001700 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08a      	sub	sp, #40	; 0x28
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a22      	ldr	r2, [pc, #136]	; (80017a8 <HAL_TIM_MspPostInit+0xa8>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d11c      	bne.n	800175c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001722:	4b22      	ldr	r3, [pc, #136]	; (80017ac <HAL_TIM_MspPostInit+0xac>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001726:	4a21      	ldr	r2, [pc, #132]	; (80017ac <HAL_TIM_MspPostInit+0xac>)
 8001728:	f043 0302 	orr.w	r3, r3, #2
 800172c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800172e:	4b1f      	ldr	r3, [pc, #124]	; (80017ac <HAL_TIM_MspPostInit+0xac>)
 8001730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800173a:	2310      	movs	r3, #16
 800173c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001746:	2300      	movs	r3, #0
 8001748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800174a:	2302      	movs	r3, #2
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	4619      	mov	r1, r3
 8001754:	4816      	ldr	r0, [pc, #88]	; (80017b0 <HAL_TIM_MspPostInit+0xb0>)
 8001756:	f001 fec7 	bl	80034e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800175a:	e020      	b.n	800179e <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM4)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a14      	ldr	r2, [pc, #80]	; (80017b4 <HAL_TIM_MspPostInit+0xb4>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d11b      	bne.n	800179e <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001766:	4b11      	ldr	r3, [pc, #68]	; (80017ac <HAL_TIM_MspPostInit+0xac>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176a:	4a10      	ldr	r2, [pc, #64]	; (80017ac <HAL_TIM_MspPostInit+0xac>)
 800176c:	f043 0302 	orr.w	r3, r3, #2
 8001770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <HAL_TIM_MspPostInit+0xac>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800177e:	2340      	movs	r3, #64	; 0x40
 8001780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	2300      	movs	r3, #0
 800178c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800178e:	2302      	movs	r3, #2
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	4619      	mov	r1, r3
 8001798:	4805      	ldr	r0, [pc, #20]	; (80017b0 <HAL_TIM_MspPostInit+0xb0>)
 800179a:	f001 fea5 	bl	80034e8 <HAL_GPIO_Init>
}
 800179e:	bf00      	nop
 80017a0:	3728      	adds	r7, #40	; 0x28
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40000400 	.word	0x40000400
 80017ac:	40021000 	.word	0x40021000
 80017b0:	48000400 	.word	0x48000400
 80017b4:	40000800 	.word	0x40000800

080017b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b0ac      	sub	sp, #176	; 0xb0
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	2288      	movs	r2, #136	; 0x88
 80017d6:	2100      	movs	r1, #0
 80017d8:	4618      	mov	r0, r3
 80017da:	f005 fe3b 	bl	8007454 <memset>
  if(huart->Instance==USART2)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a21      	ldr	r2, [pc, #132]	; (8001868 <HAL_UART_MspInit+0xb0>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d13b      	bne.n	8001860 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017e8:	2302      	movs	r3, #2
 80017ea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017ec:	2300      	movs	r3, #0
 80017ee:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	4618      	mov	r0, r3
 80017f6:	f002 fee7 	bl	80045c8 <HAL_RCCEx_PeriphCLKConfig>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001800:	f7ff fe68 	bl	80014d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001804:	4b19      	ldr	r3, [pc, #100]	; (800186c <HAL_UART_MspInit+0xb4>)
 8001806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001808:	4a18      	ldr	r2, [pc, #96]	; (800186c <HAL_UART_MspInit+0xb4>)
 800180a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800180e:	6593      	str	r3, [r2, #88]	; 0x58
 8001810:	4b16      	ldr	r3, [pc, #88]	; (800186c <HAL_UART_MspInit+0xb4>)
 8001812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181c:	4b13      	ldr	r3, [pc, #76]	; (800186c <HAL_UART_MspInit+0xb4>)
 800181e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001820:	4a12      	ldr	r2, [pc, #72]	; (800186c <HAL_UART_MspInit+0xb4>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001828:	4b10      	ldr	r3, [pc, #64]	; (800186c <HAL_UART_MspInit+0xb4>)
 800182a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001834:	230c      	movs	r3, #12
 8001836:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001846:	2303      	movs	r3, #3
 8001848:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800184c:	2307      	movs	r3, #7
 800184e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001852:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001856:	4619      	mov	r1, r3
 8001858:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800185c:	f001 fe44 	bl	80034e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001860:	bf00      	nop
 8001862:	37b0      	adds	r7, #176	; 0xb0
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40004400 	.word	0x40004400
 800186c:	40021000 	.word	0x40021000

08001870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001874:	e7fe      	b.n	8001874 <NMI_Handler+0x4>

08001876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187a:	e7fe      	b.n	800187a <HardFault_Handler+0x4>

0800187c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001880:	e7fe      	b.n	8001880 <MemManage_Handler+0x4>

08001882 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001886:	e7fe      	b.n	8001886 <BusFault_Handler+0x4>

08001888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800188c:	e7fe      	b.n	800188c <UsageFault_Handler+0x4>

0800188e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018bc:	f000 f980 	bl	8001bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(leftBtn_Pin);
 80018c8:	2008      	movs	r0, #8
 80018ca:	f002 f801 	bl	80038d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 80018d8:	4802      	ldr	r0, [pc, #8]	; (80018e4 <ADC1_2_IRQHandler+0x10>)
 80018da:	f000 fe1d 	bl	8002518 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000298 	.word	0x20000298

080018e8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80018ec:	4802      	ldr	r0, [pc, #8]	; (80018f8 <TIM4_IRQHandler+0x10>)
 80018ee:	f004 f8d9 	bl	8005aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000348 	.word	0x20000348

080018fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(rightBtn_Pin);
 8001900:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001904:	f001 ffe4 	bl	80038d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001908:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800190c:	f001 ffe0 	bl	80038d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}

08001914 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001918:	4802      	ldr	r0, [pc, #8]	; (8001924 <TIM6_DAC_IRQHandler+0x10>)
 800191a:	f004 f8c3 	bl	8005aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000394 	.word	0x20000394

08001928 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800192c:	4802      	ldr	r0, [pc, #8]	; (8001938 <TIM7_IRQHandler+0x10>)
 800192e:	f004 f8b9 	bl	8005aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	200003e0 	.word	0x200003e0

0800193c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
	return 1;
 8001940:	2301      	movs	r3, #1
}
 8001942:	4618      	mov	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <_kill>:

int _kill(int pid, int sig)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001956:	f005 fd53 	bl	8007400 <__errno>
 800195a:	4603      	mov	r3, r0
 800195c:	2216      	movs	r2, #22
 800195e:	601a      	str	r2, [r3, #0]
	return -1;
 8001960:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001964:	4618      	mov	r0, r3
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <_exit>:

void _exit (int status)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001974:	f04f 31ff 	mov.w	r1, #4294967295
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff ffe7 	bl	800194c <_kill>
	while (1) {}		/* Make sure we hang here */
 800197e:	e7fe      	b.n	800197e <_exit+0x12>

08001980 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	e00a      	b.n	80019a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001992:	f3af 8000 	nop.w
 8001996:	4601      	mov	r1, r0
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	1c5a      	adds	r2, r3, #1
 800199c:	60ba      	str	r2, [r7, #8]
 800199e:	b2ca      	uxtb	r2, r1
 80019a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	3301      	adds	r3, #1
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	dbf0      	blt.n	8001992 <_read+0x12>
	}

return len;
 80019b0:	687b      	ldr	r3, [r7, #4]
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <_close>:
	}
	return len;
}

int _close(int file)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
	return -1;
 80019c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019e2:	605a      	str	r2, [r3, #4]
	return 0;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <_isatty>:

int _isatty(int file)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
	return 1;
 80019fa:	2301      	movs	r3, #1
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
	return 0;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a2c:	4a14      	ldr	r2, [pc, #80]	; (8001a80 <_sbrk+0x5c>)
 8001a2e:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <_sbrk+0x60>)
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a38:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <_sbrk+0x64>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d102      	bne.n	8001a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a40:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <_sbrk+0x64>)
 8001a42:	4a12      	ldr	r2, [pc, #72]	; (8001a8c <_sbrk+0x68>)
 8001a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a46:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <_sbrk+0x64>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d207      	bcs.n	8001a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a54:	f005 fcd4 	bl	8007400 <__errno>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	220c      	movs	r2, #12
 8001a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a62:	e009      	b.n	8001a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a64:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <_sbrk+0x64>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a6a:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <_sbrk+0x64>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	4a05      	ldr	r2, [pc, #20]	; (8001a88 <_sbrk+0x64>)
 8001a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a76:	68fb      	ldr	r3, [r7, #12]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20018000 	.word	0x20018000
 8001a84:	00000400 	.word	0x00000400
 8001a88:	20000514 	.word	0x20000514
 8001a8c:	20000530 	.word	0x20000530

08001a90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <SystemInit+0x20>)
 8001a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a9a:	4a05      	ldr	r2, [pc, #20]	; (8001ab0 <SystemInit+0x20>)
 8001a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ab4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ab8:	f7ff ffea 	bl	8001a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001abc:	480c      	ldr	r0, [pc, #48]	; (8001af0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001abe:	490d      	ldr	r1, [pc, #52]	; (8001af4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ac0:	4a0d      	ldr	r2, [pc, #52]	; (8001af8 <LoopForever+0xe>)
  movs r3, #0
 8001ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac4:	e002      	b.n	8001acc <LoopCopyDataInit>

08001ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aca:	3304      	adds	r3, #4

08001acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad0:	d3f9      	bcc.n	8001ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ad4:	4c0a      	ldr	r4, [pc, #40]	; (8001b00 <LoopForever+0x16>)
  movs r3, #0
 8001ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad8:	e001      	b.n	8001ade <LoopFillZerobss>

08001ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001adc:	3204      	adds	r2, #4

08001ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae0:	d3fb      	bcc.n	8001ada <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ae2:	f005 fc93 	bl	800740c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ae6:	f7ff f9f9 	bl	8000edc <main>

08001aea <LoopForever>:

LoopForever:
    b LoopForever
 8001aea:	e7fe      	b.n	8001aea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001aec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af4:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8001af8:	08008aa4 	.word	0x08008aa4
  ldr r2, =_sbss
 8001afc:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8001b00:	2000052c 	.word	0x2000052c

08001b04 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b04:	e7fe      	b.n	8001b04 <ADC3_IRQHandler>
	...

08001b08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b12:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <HAL_Init+0x3c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <HAL_Init+0x3c>)
 8001b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b1c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b1e:	2003      	movs	r0, #3
 8001b20:	f001 fca0 	bl	8003464 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b24:	2000      	movs	r0, #0
 8001b26:	f000 f80f 	bl	8001b48 <HAL_InitTick>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d002      	beq.n	8001b36 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	71fb      	strb	r3, [r7, #7]
 8001b34:	e001      	b.n	8001b3a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b36:	f7ff fcd3 	bl	80014e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40022000 	.word	0x40022000

08001b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b50:	2300      	movs	r3, #0
 8001b52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b54:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <HAL_InitTick+0x6c>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d023      	beq.n	8001ba4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b5c:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <HAL_InitTick+0x70>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <HAL_InitTick+0x6c>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	4619      	mov	r1, r3
 8001b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b72:	4618      	mov	r0, r3
 8001b74:	f001 fcab 	bl	80034ce <HAL_SYSTICK_Config>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10f      	bne.n	8001b9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b0f      	cmp	r3, #15
 8001b82:	d809      	bhi.n	8001b98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b84:	2200      	movs	r2, #0
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	f04f 30ff 	mov.w	r0, #4294967295
 8001b8c:	f001 fc75 	bl	800347a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b90:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <HAL_InitTick+0x74>)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	e007      	b.n	8001ba8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	73fb      	strb	r3, [r7, #15]
 8001b9c:	e004      	b.n	8001ba8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	73fb      	strb	r3, [r7, #15]
 8001ba2:	e001      	b.n	8001ba8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000190 	.word	0x20000190
 8001bb8:	20000188 	.word	0x20000188
 8001bbc:	2000018c 	.word	0x2000018c

08001bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_IncTick+0x20>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <HAL_IncTick+0x24>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4413      	add	r3, r2
 8001bd0:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <HAL_IncTick+0x24>)
 8001bd2:	6013      	str	r3, [r2, #0]
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	20000190 	.word	0x20000190
 8001be4:	20000518 	.word	0x20000518

08001be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return uwTick;
 8001bec:	4b03      	ldr	r3, [pc, #12]	; (8001bfc <HAL_GetTick+0x14>)
 8001bee:	681b      	ldr	r3, [r3, #0]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	20000518 	.word	0x20000518

08001c00 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	431a      	orrs	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	609a      	str	r2, [r3, #8]
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b087      	sub	sp, #28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
 8001c74:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	3360      	adds	r3, #96	; 0x60
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b08      	ldr	r3, [pc, #32]	; (8001cac <LL_ADC_SetOffset+0x44>)
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	4313      	orrs	r3, r2
 8001c98:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ca0:	bf00      	nop
 8001ca2:	371c      	adds	r7, #28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	03fff000 	.word	0x03fff000

08001cb0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	3360      	adds	r3, #96	; 0x60
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b087      	sub	sp, #28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	3360      	adds	r3, #96	; 0x60
 8001cec:	461a      	mov	r2, r3
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	431a      	orrs	r2, r3
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d06:	bf00      	nop
 8001d08:	371c      	adds	r7, #28
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b087      	sub	sp, #28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	3330      	adds	r3, #48	; 0x30
 8001d48:	461a      	mov	r2, r3
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	0a1b      	lsrs	r3, r3, #8
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	f003 030c 	and.w	r3, r3, #12
 8001d54:	4413      	add	r3, r2
 8001d56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f003 031f 	and.w	r3, r3, #31
 8001d62:	211f      	movs	r1, #31
 8001d64:	fa01 f303 	lsl.w	r3, r1, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	401a      	ands	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	0e9b      	lsrs	r3, r3, #26
 8001d70:	f003 011f 	and.w	r1, r3, #31
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	f003 031f 	and.w	r3, r3, #31
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d84:	bf00      	nop
 8001d86:	371c      	adds	r7, #28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001da4:	2301      	movs	r3, #1
 8001da6:	e000      	b.n	8001daa <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b087      	sub	sp, #28
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	60f8      	str	r0, [r7, #12]
 8001dbe:	60b9      	str	r1, [r7, #8]
 8001dc0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	3314      	adds	r3, #20
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	0e5b      	lsrs	r3, r3, #25
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	4413      	add	r3, r2
 8001dd4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	0d1b      	lsrs	r3, r3, #20
 8001dde:	f003 031f 	and.w	r3, r3, #31
 8001de2:	2107      	movs	r1, #7
 8001de4:	fa01 f303 	lsl.w	r3, r1, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	401a      	ands	r2, r3
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	0d1b      	lsrs	r3, r3, #20
 8001df0:	f003 031f 	and.w	r3, r3, #31
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e00:	bf00      	nop
 8001e02:	371c      	adds	r7, #28
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e24:	43db      	mvns	r3, r3
 8001e26:	401a      	ands	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f003 0318 	and.w	r3, r3, #24
 8001e2e:	4908      	ldr	r1, [pc, #32]	; (8001e50 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e30:	40d9      	lsrs	r1, r3
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	400b      	ands	r3, r1
 8001e36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e42:	bf00      	nop
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	0007ffff 	.word	0x0007ffff

08001e54 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 031f 	and.w	r3, r3, #31
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001e9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6093      	str	r3, [r2, #8]
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ec0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ec4:	d101      	bne.n	8001eca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001ee8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001eec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f14:	d101      	bne.n	8001f1a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f3c:	f043 0201 	orr.w	r2, r3, #1
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d101      	bne.n	8001f68 <LL_ADC_IsEnabled+0x18>
 8001f64:	2301      	movs	r3, #1
 8001f66:	e000      	b.n	8001f6a <LL_ADC_IsEnabled+0x1a>
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f86:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f8a:	f043 0204 	orr.w	r2, r3, #4
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 0304 	and.w	r3, r3, #4
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	d101      	bne.n	8001fb6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d101      	bne.n	8001fdc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e000      	b.n	8001fde <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fec:	b590      	push	{r4, r7, lr}
 8001fee:	b089      	sub	sp, #36	; 0x24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e136      	b.n	8002274 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002010:	2b00      	cmp	r3, #0
 8002012:	d109      	bne.n	8002028 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff fa87 	bl	8001528 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff ff3f 	bl	8001eb0 <LL_ADC_IsDeepPowerDownEnabled>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d004      	beq.n	8002042 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff ff25 	bl	8001e8c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff ff5a 	bl	8001f00 <LL_ADC_IsInternalRegulatorEnabled>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d115      	bne.n	800207e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff ff3e 	bl	8001ed8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800205c:	4b87      	ldr	r3, [pc, #540]	; (800227c <HAL_ADC_Init+0x290>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	099b      	lsrs	r3, r3, #6
 8002062:	4a87      	ldr	r2, [pc, #540]	; (8002280 <HAL_ADC_Init+0x294>)
 8002064:	fba2 2303 	umull	r2, r3, r2, r3
 8002068:	099b      	lsrs	r3, r3, #6
 800206a:	3301      	adds	r3, #1
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002070:	e002      	b.n	8002078 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	3b01      	subs	r3, #1
 8002076:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f9      	bne.n	8002072 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff ff3c 	bl	8001f00 <LL_ADC_IsInternalRegulatorEnabled>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10d      	bne.n	80020aa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002092:	f043 0210 	orr.w	r2, r3, #16
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	f043 0201 	orr.w	r2, r3, #1
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff ff75 	bl	8001f9e <LL_ADC_REG_IsConversionOngoing>
 80020b4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ba:	f003 0310 	and.w	r3, r3, #16
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f040 80cf 	bne.w	8002262 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f040 80cb 	bne.w	8002262 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80020d4:	f043 0202 	orr.w	r2, r3, #2
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff35 	bl	8001f50 <LL_ADC_IsEnabled>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d115      	bne.n	8002118 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020ec:	4865      	ldr	r0, [pc, #404]	; (8002284 <HAL_ADC_Init+0x298>)
 80020ee:	f7ff ff2f 	bl	8001f50 <LL_ADC_IsEnabled>
 80020f2:	4604      	mov	r4, r0
 80020f4:	4864      	ldr	r0, [pc, #400]	; (8002288 <HAL_ADC_Init+0x29c>)
 80020f6:	f7ff ff2b 	bl	8001f50 <LL_ADC_IsEnabled>
 80020fa:	4603      	mov	r3, r0
 80020fc:	431c      	orrs	r4, r3
 80020fe:	4863      	ldr	r0, [pc, #396]	; (800228c <HAL_ADC_Init+0x2a0>)
 8002100:	f7ff ff26 	bl	8001f50 <LL_ADC_IsEnabled>
 8002104:	4603      	mov	r3, r0
 8002106:	4323      	orrs	r3, r4
 8002108:	2b00      	cmp	r3, #0
 800210a:	d105      	bne.n	8002118 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	4619      	mov	r1, r3
 8002112:	485f      	ldr	r0, [pc, #380]	; (8002290 <HAL_ADC_Init+0x2a4>)
 8002114:	f7ff fd74 	bl	8001c00 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	7e5b      	ldrb	r3, [r3, #25]
 800211c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002122:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002128:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800212e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002136:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002138:	4313      	orrs	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d106      	bne.n	8002154 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214a:	3b01      	subs	r3, #1
 800214c:	045b      	lsls	r3, r3, #17
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4313      	orrs	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002158:	2b00      	cmp	r3, #0
 800215a:	d009      	beq.n	8002170 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002160:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002168:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4313      	orrs	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68da      	ldr	r2, [r3, #12]
 8002176:	4b47      	ldr	r3, [pc, #284]	; (8002294 <HAL_ADC_Init+0x2a8>)
 8002178:	4013      	ands	r3, r2
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6812      	ldr	r2, [r2, #0]
 800217e:	69b9      	ldr	r1, [r7, #24]
 8002180:	430b      	orrs	r3, r1
 8002182:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff08 	bl	8001f9e <LL_ADC_REG_IsConversionOngoing>
 800218e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff ff15 	bl	8001fc4 <LL_ADC_INJ_IsConversionOngoing>
 800219a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d13d      	bne.n	800221e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d13a      	bne.n	800221e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80021ac:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021b4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021c4:	f023 0302 	bic.w	r3, r3, #2
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	6812      	ldr	r2, [r2, #0]
 80021cc:	69b9      	ldr	r1, [r7, #24]
 80021ce:	430b      	orrs	r3, r1
 80021d0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d118      	bne.n	800220e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80021e6:	f023 0304 	bic.w	r3, r3, #4
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021f2:	4311      	orrs	r1, r2
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021f8:	4311      	orrs	r1, r2
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80021fe:	430a      	orrs	r2, r1
 8002200:	431a      	orrs	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 0201 	orr.w	r2, r2, #1
 800220a:	611a      	str	r2, [r3, #16]
 800220c:	e007      	b.n	800221e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	691a      	ldr	r2, [r3, #16]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 0201 	bic.w	r2, r2, #1
 800221c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d10c      	bne.n	8002240 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222c:	f023 010f 	bic.w	r1, r3, #15
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	1e5a      	subs	r2, r3, #1
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	430a      	orrs	r2, r1
 800223c:	631a      	str	r2, [r3, #48]	; 0x30
 800223e:	e007      	b.n	8002250 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 020f 	bic.w	r2, r2, #15
 800224e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002254:	f023 0303 	bic.w	r3, r3, #3
 8002258:	f043 0201 	orr.w	r2, r3, #1
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	655a      	str	r2, [r3, #84]	; 0x54
 8002260:	e007      	b.n	8002272 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002266:	f043 0210 	orr.w	r2, r3, #16
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002272:	7ffb      	ldrb	r3, [r7, #31]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3724      	adds	r7, #36	; 0x24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd90      	pop	{r4, r7, pc}
 800227c:	20000188 	.word	0x20000188
 8002280:	053e2d63 	.word	0x053e2d63
 8002284:	50040000 	.word	0x50040000
 8002288:	50040100 	.word	0x50040100
 800228c:	50040200 	.word	0x50040200
 8002290:	50040300 	.word	0x50040300
 8002294:	fff0c007 	.word	0xfff0c007

08002298 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022a0:	4893      	ldr	r0, [pc, #588]	; (80024f0 <HAL_ADC_Start_IT+0x258>)
 80022a2:	f7ff fdd7 	bl	8001e54 <LL_ADC_GetMultimode>
 80022a6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff fe76 	bl	8001f9e <LL_ADC_REG_IsConversionOngoing>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f040 8111 	bne.w	80024dc <HAL_ADC_Start_IT+0x244>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d101      	bne.n	80022c8 <HAL_ADC_Start_IT+0x30>
 80022c4:	2302      	movs	r3, #2
 80022c6:	e10e      	b.n	80024e6 <HAL_ADC_Start_IT+0x24e>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 ff3f 	bl	8003154 <ADC_Enable>
 80022d6:	4603      	mov	r3, r0
 80022d8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80022da:	7dfb      	ldrb	r3, [r7, #23]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f040 80f8 	bne.w	80024d2 <HAL_ADC_Start_IT+0x23a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022ea:	f023 0301 	bic.w	r3, r3, #1
 80022ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a7e      	ldr	r2, [pc, #504]	; (80024f4 <HAL_ADC_Start_IT+0x25c>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d002      	beq.n	8002306 <HAL_ADC_Start_IT+0x6e>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	e000      	b.n	8002308 <HAL_ADC_Start_IT+0x70>
 8002306:	4b7c      	ldr	r3, [pc, #496]	; (80024f8 <HAL_ADC_Start_IT+0x260>)
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6812      	ldr	r2, [r2, #0]
 800230c:	4293      	cmp	r3, r2
 800230e:	d002      	beq.n	8002316 <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d105      	bne.n	8002322 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002326:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d006      	beq.n	800233c <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002332:	f023 0206 	bic.w	r2, r3, #6
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	659a      	str	r2, [r3, #88]	; 0x58
 800233a:	e002      	b.n	8002342 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	221c      	movs	r2, #28
 8002348:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 021c 	bic.w	r2, r2, #28
 8002360:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	2b08      	cmp	r3, #8
 8002368:	d108      	bne.n	800237c <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f042 0208 	orr.w	r2, r2, #8
 8002378:	605a      	str	r2, [r3, #4]
          break;
 800237a:	e008      	b.n	800238e <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0204 	orr.w	r2, r2, #4
 800238a:	605a      	str	r2, [r3, #4]
          break;
 800238c:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002392:	2b00      	cmp	r3, #0
 8002394:	d107      	bne.n	80023a6 <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f042 0210 	orr.w	r2, r2, #16
 80023a4:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a52      	ldr	r2, [pc, #328]	; (80024f4 <HAL_ADC_Start_IT+0x25c>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d002      	beq.n	80023b6 <HAL_ADC_Start_IT+0x11e>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	e000      	b.n	80023b8 <HAL_ADC_Start_IT+0x120>
 80023b6:	4b50      	ldr	r3, [pc, #320]	; (80024f8 <HAL_ADC_Start_IT+0x260>)
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	4293      	cmp	r3, r2
 80023be:	d008      	beq.n	80023d2 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d005      	beq.n	80023d2 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	2b05      	cmp	r3, #5
 80023ca:	d002      	beq.n	80023d2 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	2b09      	cmp	r3, #9
 80023d0:	d13b      	bne.n	800244a <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d02d      	beq.n	800243c <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	2b08      	cmp	r3, #8
 80023f6:	d110      	bne.n	800241a <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0220 	bic.w	r2, r2, #32
 8002406:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002416:	605a      	str	r2, [r3, #4]
              break;
 8002418:	e011      	b.n	800243e <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002428:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f042 0220 	orr.w	r2, r2, #32
 8002438:	605a      	str	r2, [r3, #4]
              break;
 800243a:	e000      	b.n	800243e <HAL_ADC_Start_IT+0x1a6>
          }
        }
 800243c:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff fd97 	bl	8001f76 <LL_ADC_REG_StartConversion>
 8002448:	e04c      	b.n	80024e4 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a26      	ldr	r2, [pc, #152]	; (80024f4 <HAL_ADC_Start_IT+0x25c>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d002      	beq.n	8002466 <HAL_ADC_Start_IT+0x1ce>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	e000      	b.n	8002468 <HAL_ADC_Start_IT+0x1d0>
 8002466:	4b24      	ldr	r3, [pc, #144]	; (80024f8 <HAL_ADC_Start_IT+0x260>)
 8002468:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d035      	beq.n	80024e2 <HAL_ADC_Start_IT+0x24a>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800247e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	2b08      	cmp	r3, #8
 800248c:	d110      	bne.n	80024b0 <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0220 	bic.w	r2, r2, #32
 800249c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024ac:	605a      	str	r2, [r3, #4]
              break;
 80024ae:	e019      	b.n	80024e4 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024be:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0220 	orr.w	r2, r2, #32
 80024ce:	605a      	str	r2, [r3, #4]
              break;
 80024d0:	e008      	b.n	80024e4 <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80024da:	e003      	b.n	80024e4 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024dc:	2302      	movs	r3, #2
 80024de:	75fb      	strb	r3, [r7, #23]
 80024e0:	e000      	b.n	80024e4 <HAL_ADC_Start_IT+0x24c>
        }
 80024e2:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 80024e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3718      	adds	r7, #24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	50040300 	.word	0x50040300
 80024f4:	50040100 	.word	0x50040100
 80024f8:	50040000 	.word	0x50040000

080024fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800250a:	4618      	mov	r0, r3
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
	...

08002518 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08a      	sub	sp, #40	; 0x28
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002520:	2300      	movs	r3, #0
 8002522:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002534:	4882      	ldr	r0, [pc, #520]	; (8002740 <HAL_ADC_IRQHandler+0x228>)
 8002536:	f7ff fc8d 	bl	8001e54 <LL_ADC_GetMultimode>
 800253a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d017      	beq.n	8002576 <HAL_ADC_IRQHandler+0x5e>
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d012      	beq.n	8002576 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002554:	f003 0310 	and.w	r3, r3, #16
 8002558:	2b00      	cmp	r3, #0
 800255a:	d105      	bne.n	8002568 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002560:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 fea1 	bl	80032b0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2202      	movs	r2, #2
 8002574:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d004      	beq.n	800258a <HAL_ADC_IRQHandler+0x72>
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	f003 0304 	and.w	r3, r3, #4
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10a      	bne.n	80025a0 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 8083 	beq.w	800269c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	f003 0308 	and.w	r3, r3, #8
 800259c:	2b00      	cmp	r3, #0
 800259e:	d07d      	beq.n	800269c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a4:	f003 0310 	and.w	r3, r3, #16
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d105      	bne.n	80025b8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff fba8 	bl	8001d12 <LL_ADC_REG_IsTriggerSourceSWStart>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d062      	beq.n	800268e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a5d      	ldr	r2, [pc, #372]	; (8002744 <HAL_ADC_IRQHandler+0x22c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d002      	beq.n	80025d8 <HAL_ADC_IRQHandler+0xc0>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	e000      	b.n	80025da <HAL_ADC_IRQHandler+0xc2>
 80025d8:	4b5b      	ldr	r3, [pc, #364]	; (8002748 <HAL_ADC_IRQHandler+0x230>)
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6812      	ldr	r2, [r2, #0]
 80025de:	4293      	cmp	r3, r2
 80025e0:	d008      	beq.n	80025f4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	2b05      	cmp	r3, #5
 80025ec:	d002      	beq.n	80025f4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	2b09      	cmp	r3, #9
 80025f2:	d104      	bne.n	80025fe <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	623b      	str	r3, [r7, #32]
 80025fc:	e00c      	b.n	8002618 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a50      	ldr	r2, [pc, #320]	; (8002744 <HAL_ADC_IRQHandler+0x22c>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d002      	beq.n	800260e <HAL_ADC_IRQHandler+0xf6>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	e000      	b.n	8002610 <HAL_ADC_IRQHandler+0xf8>
 800260e:	4b4e      	ldr	r3, [pc, #312]	; (8002748 <HAL_ADC_IRQHandler+0x230>)
 8002610:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002618:	6a3b      	ldr	r3, [r7, #32]
 800261a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d135      	bne.n	800268e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	2b08      	cmp	r3, #8
 800262e:	d12e      	bne.n	800268e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff fcb2 	bl	8001f9e <LL_ADC_REG_IsConversionOngoing>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d11a      	bne.n	8002676 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 020c 	bic.w	r2, r2, #12
 800264e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002654:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002660:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d112      	bne.n	800268e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266c:	f043 0201 	orr.w	r2, r3, #1
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	655a      	str	r2, [r3, #84]	; 0x54
 8002674:	e00b      	b.n	800268e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267a:	f043 0210 	orr.w	r2, r3, #16
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002686:	f043 0201 	orr.w	r2, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7fe fc08 	bl	8000ea4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	220c      	movs	r2, #12
 800269a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f003 0320 	and.w	r3, r3, #32
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d004      	beq.n	80026b0 <HAL_ADC_IRQHandler+0x198>
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	f003 0320 	and.w	r3, r3, #32
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10b      	bne.n	80026c8 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 809f 	beq.w	80027fa <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 8099 	beq.w	80027fa <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026cc:	f003 0310 	and.w	r3, r3, #16
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d105      	bne.n	80026e0 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff fb53 	bl	8001d90 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80026ea:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fb0e 	bl	8001d12 <LL_ADC_REG_IsTriggerSourceSWStart>
 80026f6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a11      	ldr	r2, [pc, #68]	; (8002744 <HAL_ADC_IRQHandler+0x22c>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d002      	beq.n	8002708 <HAL_ADC_IRQHandler+0x1f0>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	e000      	b.n	800270a <HAL_ADC_IRQHandler+0x1f2>
 8002708:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <HAL_ADC_IRQHandler+0x230>)
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6812      	ldr	r2, [r2, #0]
 800270e:	4293      	cmp	r3, r2
 8002710:	d008      	beq.n	8002724 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	2b06      	cmp	r3, #6
 800271c:	d002      	beq.n	8002724 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	2b07      	cmp	r3, #7
 8002722:	d104      	bne.n	800272e <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	623b      	str	r3, [r7, #32]
 800272c:	e013      	b.n	8002756 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a04      	ldr	r2, [pc, #16]	; (8002744 <HAL_ADC_IRQHandler+0x22c>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d009      	beq.n	800274c <HAL_ADC_IRQHandler+0x234>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	e007      	b.n	800274e <HAL_ADC_IRQHandler+0x236>
 800273e:	bf00      	nop
 8002740:	50040300 	.word	0x50040300
 8002744:	50040100 	.word	0x50040100
 8002748:	50040000 	.word	0x50040000
 800274c:	4b7d      	ldr	r3, [pc, #500]	; (8002944 <HAL_ADC_IRQHandler+0x42c>)
 800274e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d047      	beq.n	80027ec <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d007      	beq.n	8002776 <HAL_ADC_IRQHandler+0x25e>
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d03f      	beq.n	80027ec <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002772:	2b00      	cmp	r3, #0
 8002774:	d13a      	bne.n	80027ec <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002780:	2b40      	cmp	r3, #64	; 0x40
 8002782:	d133      	bne.n	80027ec <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d12e      	bne.n	80027ec <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff fc16 	bl	8001fc4 <LL_ADC_INJ_IsConversionOngoing>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d11a      	bne.n	80027d4 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80027ac:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d112      	bne.n	80027ec <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ca:	f043 0201 	orr.w	r2, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	655a      	str	r2, [r3, #84]	; 0x54
 80027d2:	e00b      	b.n	80027ec <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d8:	f043 0210 	orr.w	r2, r3, #16
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e4:	f043 0201 	orr.w	r2, r3, #1
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 fd37 	bl	8003260 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2260      	movs	r2, #96	; 0x60
 80027f8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002800:	2b00      	cmp	r3, #0
 8002802:	d011      	beq.n	8002828 <HAL_ADC_IRQHandler+0x310>
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00c      	beq.n	8002828 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002812:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f896 	bl	800294c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2280      	movs	r2, #128	; 0x80
 8002826:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282e:	2b00      	cmp	r3, #0
 8002830:	d012      	beq.n	8002858 <HAL_ADC_IRQHandler+0x340>
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00d      	beq.n	8002858 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002840:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 fd1d 	bl	8003288 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002856:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800285e:	2b00      	cmp	r3, #0
 8002860:	d012      	beq.n	8002888 <HAL_ADC_IRQHandler+0x370>
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00d      	beq.n	8002888 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002870:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 fd0f 	bl	800329c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002886:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	f003 0310 	and.w	r3, r3, #16
 800288e:	2b00      	cmp	r3, #0
 8002890:	d036      	beq.n	8002900 <HAL_ADC_IRQHandler+0x3e8>
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	f003 0310 	and.w	r3, r3, #16
 8002898:	2b00      	cmp	r3, #0
 800289a:	d031      	beq.n	8002900 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d102      	bne.n	80028aa <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80028a4:	2301      	movs	r3, #1
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
 80028a8:	e014      	b.n	80028d4 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d008      	beq.n	80028c2 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80028b0:	4825      	ldr	r0, [pc, #148]	; (8002948 <HAL_ADC_IRQHandler+0x430>)
 80028b2:	f7ff fadd 	bl	8001e70 <LL_ADC_GetMultiDMATransfer>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00b      	beq.n	80028d4 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80028bc:	2301      	movs	r3, #1
 80028be:	627b      	str	r3, [r7, #36]	; 0x24
 80028c0:	e008      	b.n	80028d4 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80028d0:	2301      	movs	r3, #1
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d10e      	bne.n	80028f8 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028de:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ea:	f043 0202 	orr.w	r2, r3, #2
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f834 	bl	8002960 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2210      	movs	r2, #16
 80028fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002906:	2b00      	cmp	r3, #0
 8002908:	d018      	beq.n	800293c <HAL_ADC_IRQHandler+0x424>
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002910:	2b00      	cmp	r3, #0
 8002912:	d013      	beq.n	800293c <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002918:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002924:	f043 0208 	orr.w	r2, r3, #8
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002934:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 fc9c 	bl	8003274 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800293c:	bf00      	nop
 800293e:	3728      	adds	r7, #40	; 0x28
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	50040000 	.word	0x50040000
 8002948:	50040300 	.word	0x50040300

0800294c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b0b6      	sub	sp, #216	; 0xd8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002984:	2300      	movs	r3, #0
 8002986:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800298e:	2b01      	cmp	r3, #1
 8002990:	d101      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x22>
 8002992:	2302      	movs	r3, #2
 8002994:	e3c7      	b.n	8003126 <HAL_ADC_ConfigChannel+0x7b2>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff fafb 	bl	8001f9e <LL_ADC_REG_IsConversionOngoing>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f040 83a8 	bne.w	8003100 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b05      	cmp	r3, #5
 80029b6:	d824      	bhi.n	8002a02 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	3b02      	subs	r3, #2
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d81b      	bhi.n	80029fa <HAL_ADC_ConfigChannel+0x86>
 80029c2:	a201      	add	r2, pc, #4	; (adr r2, 80029c8 <HAL_ADC_ConfigChannel+0x54>)
 80029c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c8:	080029d9 	.word	0x080029d9
 80029cc:	080029e1 	.word	0x080029e1
 80029d0:	080029e9 	.word	0x080029e9
 80029d4:	080029f1 	.word	0x080029f1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	220c      	movs	r2, #12
 80029dc:	605a      	str	r2, [r3, #4]
          break;
 80029de:	e011      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	2212      	movs	r2, #18
 80029e4:	605a      	str	r2, [r3, #4]
          break;
 80029e6:	e00d      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	2218      	movs	r2, #24
 80029ec:	605a      	str	r2, [r3, #4]
          break;
 80029ee:	e009      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029f6:	605a      	str	r2, [r3, #4]
          break;
 80029f8:	e004      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2206      	movs	r2, #6
 80029fe:	605a      	str	r2, [r3, #4]
          break;
 8002a00:	e000      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002a02:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6818      	ldr	r0, [r3, #0]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	6859      	ldr	r1, [r3, #4]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	461a      	mov	r2, r3
 8002a12:	f7ff f991 	bl	8001d38 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff fabf 	bl	8001f9e <LL_ADC_REG_IsConversionOngoing>
 8002a20:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff facb 	bl	8001fc4 <LL_ADC_INJ_IsConversionOngoing>
 8002a2e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a32:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f040 81a6 	bne.w	8002d88 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f040 81a1 	bne.w	8002d88 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6818      	ldr	r0, [r3, #0]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	6819      	ldr	r1, [r3, #0]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	461a      	mov	r2, r3
 8002a54:	f7ff f9af 	bl	8001db6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	695a      	ldr	r2, [r3, #20]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	08db      	lsrs	r3, r3, #3
 8002a64:	f003 0303 	and.w	r3, r3, #3
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d00a      	beq.n	8002a90 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6818      	ldr	r0, [r3, #0]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	6919      	ldr	r1, [r3, #16]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a8a:	f7ff f8ed 	bl	8001c68 <LL_ADC_SetOffset>
 8002a8e:	e17b      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2100      	movs	r1, #0
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff f90a 	bl	8001cb0 <LL_ADC_GetOffsetChannel>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10a      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x148>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2100      	movs	r1, #0
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff f8ff 	bl	8001cb0 <LL_ADC_GetOffsetChannel>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	0e9b      	lsrs	r3, r3, #26
 8002ab6:	f003 021f 	and.w	r2, r3, #31
 8002aba:	e01e      	b.n	8002afa <HAL_ADC_ConfigChannel+0x186>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff f8f4 	bl	8001cb0 <LL_ADC_GetOffsetChannel>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ad2:	fa93 f3a3 	rbit	r3, r3
 8002ad6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ada:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ade:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ae2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002aea:	2320      	movs	r3, #32
 8002aec:	e004      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002aee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002af2:	fab3 f383 	clz	r3, r3
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d105      	bne.n	8002b12 <HAL_ADC_ConfigChannel+0x19e>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	0e9b      	lsrs	r3, r3, #26
 8002b0c:	f003 031f 	and.w	r3, r3, #31
 8002b10:	e018      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x1d0>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002b1e:	fa93 f3a3 	rbit	r3, r3
 8002b22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002b26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002b2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002b36:	2320      	movs	r3, #32
 8002b38:	e004      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002b3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b3e:	fab3 f383 	clz	r3, r3
 8002b42:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d106      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	2100      	movs	r1, #0
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff f8c3 	bl	8001cdc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff f8a7 	bl	8001cb0 <LL_ADC_GetOffsetChannel>
 8002b62:	4603      	mov	r3, r0
 8002b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10a      	bne.n	8002b82 <HAL_ADC_ConfigChannel+0x20e>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2101      	movs	r1, #1
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff f89c 	bl	8001cb0 <LL_ADC_GetOffsetChannel>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	0e9b      	lsrs	r3, r3, #26
 8002b7c:	f003 021f 	and.w	r2, r3, #31
 8002b80:	e01e      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x24c>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2101      	movs	r1, #1
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff f891 	bl	8001cb0 <LL_ADC_GetOffsetChannel>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b94:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b98:	fa93 f3a3 	rbit	r3, r3
 8002b9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002ba0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ba4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002ba8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002bb0:	2320      	movs	r3, #32
 8002bb2:	e004      	b.n	8002bbe <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002bb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002bb8:	fab3 f383 	clz	r3, r3
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d105      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x264>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	0e9b      	lsrs	r3, r3, #26
 8002bd2:	f003 031f 	and.w	r3, r3, #31
 8002bd6:	e018      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x296>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002be4:	fa93 f3a3 	rbit	r3, r3
 8002be8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002bec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002bf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002bf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002bfc:	2320      	movs	r3, #32
 8002bfe:	e004      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002c00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c04:	fab3 f383 	clz	r3, r3
 8002c08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d106      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2200      	movs	r2, #0
 8002c14:	2101      	movs	r1, #1
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff f860 	bl	8001cdc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2102      	movs	r1, #2
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff f844 	bl	8001cb0 <LL_ADC_GetOffsetChannel>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10a      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x2d4>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2102      	movs	r1, #2
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff f839 	bl	8001cb0 <LL_ADC_GetOffsetChannel>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	0e9b      	lsrs	r3, r3, #26
 8002c42:	f003 021f 	and.w	r2, r3, #31
 8002c46:	e01e      	b.n	8002c86 <HAL_ADC_ConfigChannel+0x312>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2102      	movs	r1, #2
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff f82e 	bl	8001cb0 <LL_ADC_GetOffsetChannel>
 8002c54:	4603      	mov	r3, r0
 8002c56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c5e:	fa93 f3a3 	rbit	r3, r3
 8002c62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002c66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002c6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002c76:	2320      	movs	r3, #32
 8002c78:	e004      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002c7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c7e:	fab3 f383 	clz	r3, r3
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d105      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x32a>
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	0e9b      	lsrs	r3, r3, #26
 8002c98:	f003 031f 	and.w	r3, r3, #31
 8002c9c:	e016      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x358>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002caa:	fa93 f3a3 	rbit	r3, r3
 8002cae:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002cb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002cb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002cbe:	2320      	movs	r3, #32
 8002cc0:	e004      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002cc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cc6:	fab3 f383 	clz	r3, r3
 8002cca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d106      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	2102      	movs	r1, #2
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fe ffff 	bl	8001cdc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2103      	movs	r1, #3
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fe ffe3 	bl	8001cb0 <LL_ADC_GetOffsetChannel>
 8002cea:	4603      	mov	r3, r0
 8002cec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10a      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x396>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2103      	movs	r1, #3
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fe ffd8 	bl	8001cb0 <LL_ADC_GetOffsetChannel>
 8002d00:	4603      	mov	r3, r0
 8002d02:	0e9b      	lsrs	r3, r3, #26
 8002d04:	f003 021f 	and.w	r2, r3, #31
 8002d08:	e017      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x3c6>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2103      	movs	r1, #3
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fe ffcd 	bl	8001cb0 <LL_ADC_GetOffsetChannel>
 8002d16:	4603      	mov	r3, r0
 8002d18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d1c:	fa93 f3a3 	rbit	r3, r3
 8002d20:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002d22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d24:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002d26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002d2c:	2320      	movs	r3, #32
 8002d2e:	e003      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002d30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d32:	fab3 f383 	clz	r3, r3
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d105      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x3de>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	0e9b      	lsrs	r3, r3, #26
 8002d4c:	f003 031f 	and.w	r3, r3, #31
 8002d50:	e011      	b.n	8002d76 <HAL_ADC_ConfigChannel+0x402>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d5a:	fa93 f3a3 	rbit	r3, r3
 8002d5e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002d60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d62:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002d6a:	2320      	movs	r3, #32
 8002d6c:	e003      	b.n	8002d76 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d70:	fab3 f383 	clz	r3, r3
 8002d74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d106      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	2103      	movs	r1, #3
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fe ffaa 	bl	8001cdc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff f8df 	bl	8001f50 <LL_ADC_IsEnabled>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f040 813f 	bne.w	8003018 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	6819      	ldr	r1, [r3, #0]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	461a      	mov	r2, r3
 8002da8:	f7ff f830 	bl	8001e0c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	4a8e      	ldr	r2, [pc, #568]	; (8002fec <HAL_ADC_ConfigChannel+0x678>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	f040 8130 	bne.w	8003018 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10b      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x46c>
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	0e9b      	lsrs	r3, r3, #26
 8002dce:	3301      	adds	r3, #1
 8002dd0:	f003 031f 	and.w	r3, r3, #31
 8002dd4:	2b09      	cmp	r3, #9
 8002dd6:	bf94      	ite	ls
 8002dd8:	2301      	movls	r3, #1
 8002dda:	2300      	movhi	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	e019      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x4a0>
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002de8:	fa93 f3a3 	rbit	r3, r3
 8002dec:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002dee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002df0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002df2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002df8:	2320      	movs	r3, #32
 8002dfa:	e003      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002dfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dfe:	fab3 f383 	clz	r3, r3
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	3301      	adds	r3, #1
 8002e06:	f003 031f 	and.w	r3, r3, #31
 8002e0a:	2b09      	cmp	r3, #9
 8002e0c:	bf94      	ite	ls
 8002e0e:	2301      	movls	r3, #1
 8002e10:	2300      	movhi	r3, #0
 8002e12:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d079      	beq.n	8002f0c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d107      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x4c0>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	0e9b      	lsrs	r3, r3, #26
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	069b      	lsls	r3, r3, #26
 8002e2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e32:	e015      	b.n	8002e60 <HAL_ADC_ConfigChannel+0x4ec>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e3c:	fa93 f3a3 	rbit	r3, r3
 8002e40:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e44:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002e46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002e4c:	2320      	movs	r3, #32
 8002e4e:	e003      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002e50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e52:	fab3 f383 	clz	r3, r3
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	3301      	adds	r3, #1
 8002e5a:	069b      	lsls	r3, r3, #26
 8002e5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d109      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x50c>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	0e9b      	lsrs	r3, r3, #26
 8002e72:	3301      	adds	r3, #1
 8002e74:	f003 031f 	and.w	r3, r3, #31
 8002e78:	2101      	movs	r1, #1
 8002e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7e:	e017      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x53c>
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e88:	fa93 f3a3 	rbit	r3, r3
 8002e8c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e90:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002e98:	2320      	movs	r3, #32
 8002e9a:	e003      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e9e:	fab3 f383 	clz	r3, r3
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	f003 031f 	and.w	r3, r3, #31
 8002eaa:	2101      	movs	r1, #1
 8002eac:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb0:	ea42 0103 	orr.w	r1, r2, r3
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10a      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x562>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	0e9b      	lsrs	r3, r3, #26
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	f003 021f 	and.w	r2, r3, #31
 8002ecc:	4613      	mov	r3, r2
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	4413      	add	r3, r2
 8002ed2:	051b      	lsls	r3, r3, #20
 8002ed4:	e018      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x594>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ede:	fa93 f3a3 	rbit	r3, r3
 8002ee2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002eee:	2320      	movs	r3, #32
 8002ef0:	e003      	b.n	8002efa <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ef4:	fab3 f383 	clz	r3, r3
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	3301      	adds	r3, #1
 8002efc:	f003 021f 	and.w	r2, r3, #31
 8002f00:	4613      	mov	r3, r2
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	4413      	add	r3, r2
 8002f06:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	e080      	b.n	800300e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d107      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x5b4>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	0e9b      	lsrs	r3, r3, #26
 8002f1e:	3301      	adds	r3, #1
 8002f20:	069b      	lsls	r3, r3, #26
 8002f22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f26:	e015      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x5e0>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f30:	fa93 f3a3 	rbit	r3, r3
 8002f34:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f38:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002f40:	2320      	movs	r3, #32
 8002f42:	e003      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f46:	fab3 f383 	clz	r3, r3
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	069b      	lsls	r3, r3, #26
 8002f50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d109      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x600>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	0e9b      	lsrs	r3, r3, #26
 8002f66:	3301      	adds	r3, #1
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f72:	e017      	b.n	8002fa4 <HAL_ADC_ConfigChannel+0x630>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	fa93 f3a3 	rbit	r3, r3
 8002f80:	61fb      	str	r3, [r7, #28]
  return result;
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002f8c:	2320      	movs	r3, #32
 8002f8e:	e003      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	fab3 f383 	clz	r3, r3
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	3301      	adds	r3, #1
 8002f9a:	f003 031f 	and.w	r3, r3, #31
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa4:	ea42 0103 	orr.w	r1, r2, r3
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10d      	bne.n	8002fd0 <HAL_ADC_ConfigChannel+0x65c>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	0e9b      	lsrs	r3, r3, #26
 8002fba:	3301      	adds	r3, #1
 8002fbc:	f003 021f 	and.w	r2, r3, #31
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3b1e      	subs	r3, #30
 8002fc8:	051b      	lsls	r3, r3, #20
 8002fca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fce:	e01d      	b.n	800300c <HAL_ADC_ConfigChannel+0x698>
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	fa93 f3a3 	rbit	r3, r3
 8002fdc:	613b      	str	r3, [r7, #16]
  return result;
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d103      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002fe8:	2320      	movs	r3, #32
 8002fea:	e005      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x684>
 8002fec:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	fab3 f383 	clz	r3, r3
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	f003 021f 	and.w	r2, r3, #31
 8002ffe:	4613      	mov	r3, r2
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	4413      	add	r3, r2
 8003004:	3b1e      	subs	r3, #30
 8003006:	051b      	lsls	r3, r3, #20
 8003008:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800300c:	430b      	orrs	r3, r1
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	6892      	ldr	r2, [r2, #8]
 8003012:	4619      	mov	r1, r3
 8003014:	f7fe fecf 	bl	8001db6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	4b44      	ldr	r3, [pc, #272]	; (8003130 <HAL_ADC_ConfigChannel+0x7bc>)
 800301e:	4013      	ands	r3, r2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d07a      	beq.n	800311a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003024:	4843      	ldr	r0, [pc, #268]	; (8003134 <HAL_ADC_ConfigChannel+0x7c0>)
 8003026:	f7fe fe11 	bl	8001c4c <LL_ADC_GetCommonPathInternalCh>
 800302a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a41      	ldr	r2, [pc, #260]	; (8003138 <HAL_ADC_ConfigChannel+0x7c4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d12c      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003038:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800303c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d126      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a3c      	ldr	r2, [pc, #240]	; (800313c <HAL_ADC_ConfigChannel+0x7c8>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d004      	beq.n	8003058 <HAL_ADC_ConfigChannel+0x6e4>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a3b      	ldr	r2, [pc, #236]	; (8003140 <HAL_ADC_ConfigChannel+0x7cc>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d15d      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003058:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800305c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003060:	4619      	mov	r1, r3
 8003062:	4834      	ldr	r0, [pc, #208]	; (8003134 <HAL_ADC_ConfigChannel+0x7c0>)
 8003064:	f7fe fddf 	bl	8001c26 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003068:	4b36      	ldr	r3, [pc, #216]	; (8003144 <HAL_ADC_ConfigChannel+0x7d0>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	099b      	lsrs	r3, r3, #6
 800306e:	4a36      	ldr	r2, [pc, #216]	; (8003148 <HAL_ADC_ConfigChannel+0x7d4>)
 8003070:	fba2 2303 	umull	r2, r3, r2, r3
 8003074:	099b      	lsrs	r3, r3, #6
 8003076:	1c5a      	adds	r2, r3, #1
 8003078:	4613      	mov	r3, r2
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	4413      	add	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003082:	e002      	b.n	800308a <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	3b01      	subs	r3, #1
 8003088:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1f9      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003090:	e040      	b.n	8003114 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a2d      	ldr	r2, [pc, #180]	; (800314c <HAL_ADC_ConfigChannel+0x7d8>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d118      	bne.n	80030ce <HAL_ADC_ConfigChannel+0x75a>
 800309c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d112      	bne.n	80030ce <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a23      	ldr	r2, [pc, #140]	; (800313c <HAL_ADC_ConfigChannel+0x7c8>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d004      	beq.n	80030bc <HAL_ADC_ConfigChannel+0x748>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a22      	ldr	r2, [pc, #136]	; (8003140 <HAL_ADC_ConfigChannel+0x7cc>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d12d      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030c4:	4619      	mov	r1, r3
 80030c6:	481b      	ldr	r0, [pc, #108]	; (8003134 <HAL_ADC_ConfigChannel+0x7c0>)
 80030c8:	f7fe fdad 	bl	8001c26 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030cc:	e024      	b.n	8003118 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a1f      	ldr	r2, [pc, #124]	; (8003150 <HAL_ADC_ConfigChannel+0x7dc>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d120      	bne.n	800311a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d11a      	bne.n	800311a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a14      	ldr	r2, [pc, #80]	; (800313c <HAL_ADC_ConfigChannel+0x7c8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d115      	bne.n	800311a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030f6:	4619      	mov	r1, r3
 80030f8:	480e      	ldr	r0, [pc, #56]	; (8003134 <HAL_ADC_ConfigChannel+0x7c0>)
 80030fa:	f7fe fd94 	bl	8001c26 <LL_ADC_SetCommonPathInternalCh>
 80030fe:	e00c      	b.n	800311a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003104:	f043 0220 	orr.w	r2, r3, #32
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003112:	e002      	b.n	800311a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003114:	bf00      	nop
 8003116:	e000      	b.n	800311a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003118:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003122:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003126:	4618      	mov	r0, r3
 8003128:	37d8      	adds	r7, #216	; 0xd8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	80080000 	.word	0x80080000
 8003134:	50040300 	.word	0x50040300
 8003138:	c7520000 	.word	0xc7520000
 800313c:	50040000 	.word	0x50040000
 8003140:	50040200 	.word	0x50040200
 8003144:	20000188 	.word	0x20000188
 8003148:	053e2d63 	.word	0x053e2d63
 800314c:	cb840000 	.word	0xcb840000
 8003150:	80000001 	.word	0x80000001

08003154 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800315c:	2300      	movs	r3, #0
 800315e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f7fe fef3 	bl	8001f50 <LL_ADC_IsEnabled>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d169      	bne.n	8003244 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	4b36      	ldr	r3, [pc, #216]	; (8003250 <ADC_Enable+0xfc>)
 8003178:	4013      	ands	r3, r2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00d      	beq.n	800319a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003182:	f043 0210 	orr.w	r2, r3, #16
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318e:	f043 0201 	orr.w	r2, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e055      	b.n	8003246 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fe fec2 	bl	8001f28 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80031a4:	482b      	ldr	r0, [pc, #172]	; (8003254 <ADC_Enable+0x100>)
 80031a6:	f7fe fd51 	bl	8001c4c <LL_ADC_GetCommonPathInternalCh>
 80031aa:	4603      	mov	r3, r0
 80031ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d013      	beq.n	80031dc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031b4:	4b28      	ldr	r3, [pc, #160]	; (8003258 <ADC_Enable+0x104>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	099b      	lsrs	r3, r3, #6
 80031ba:	4a28      	ldr	r2, [pc, #160]	; (800325c <ADC_Enable+0x108>)
 80031bc:	fba2 2303 	umull	r2, r3, r2, r3
 80031c0:	099b      	lsrs	r3, r3, #6
 80031c2:	1c5a      	adds	r2, r3, #1
 80031c4:	4613      	mov	r3, r2
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	4413      	add	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80031ce:	e002      	b.n	80031d6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	3b01      	subs	r3, #1
 80031d4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1f9      	bne.n	80031d0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80031dc:	f7fe fd04 	bl	8001be8 <HAL_GetTick>
 80031e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031e2:	e028      	b.n	8003236 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7fe feb1 	bl	8001f50 <LL_ADC_IsEnabled>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d104      	bne.n	80031fe <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7fe fe95 	bl	8001f28 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031fe:	f7fe fcf3 	bl	8001be8 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d914      	bls.n	8003236 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b01      	cmp	r3, #1
 8003218:	d00d      	beq.n	8003236 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321e:	f043 0210 	orr.w	r2, r3, #16
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322a:	f043 0201 	orr.w	r2, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e007      	b.n	8003246 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b01      	cmp	r3, #1
 8003242:	d1cf      	bne.n	80031e4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	8000003f 	.word	0x8000003f
 8003254:	50040300 	.word	0x50040300
 8003258:	20000188 	.word	0x20000188
 800325c:	053e2d63 	.word	0x053e2d63

08003260 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032d4:	4b0c      	ldr	r3, [pc, #48]	; (8003308 <__NVIC_SetPriorityGrouping+0x44>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032e0:	4013      	ands	r3, r2
 80032e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032f6:	4a04      	ldr	r2, [pc, #16]	; (8003308 <__NVIC_SetPriorityGrouping+0x44>)
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	60d3      	str	r3, [r2, #12]
}
 80032fc:	bf00      	nop
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	e000ed00 	.word	0xe000ed00

0800330c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003310:	4b04      	ldr	r3, [pc, #16]	; (8003324 <__NVIC_GetPriorityGrouping+0x18>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	0a1b      	lsrs	r3, r3, #8
 8003316:	f003 0307 	and.w	r3, r3, #7
}
 800331a:	4618      	mov	r0, r3
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	e000ed00 	.word	0xe000ed00

08003328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	4603      	mov	r3, r0
 8003330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003336:	2b00      	cmp	r3, #0
 8003338:	db0b      	blt.n	8003352 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800333a:	79fb      	ldrb	r3, [r7, #7]
 800333c:	f003 021f 	and.w	r2, r3, #31
 8003340:	4907      	ldr	r1, [pc, #28]	; (8003360 <__NVIC_EnableIRQ+0x38>)
 8003342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003346:	095b      	lsrs	r3, r3, #5
 8003348:	2001      	movs	r0, #1
 800334a:	fa00 f202 	lsl.w	r2, r0, r2
 800334e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	e000e100 	.word	0xe000e100

08003364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	6039      	str	r1, [r7, #0]
 800336e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003374:	2b00      	cmp	r3, #0
 8003376:	db0a      	blt.n	800338e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	b2da      	uxtb	r2, r3
 800337c:	490c      	ldr	r1, [pc, #48]	; (80033b0 <__NVIC_SetPriority+0x4c>)
 800337e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003382:	0112      	lsls	r2, r2, #4
 8003384:	b2d2      	uxtb	r2, r2
 8003386:	440b      	add	r3, r1
 8003388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800338c:	e00a      	b.n	80033a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	b2da      	uxtb	r2, r3
 8003392:	4908      	ldr	r1, [pc, #32]	; (80033b4 <__NVIC_SetPriority+0x50>)
 8003394:	79fb      	ldrb	r3, [r7, #7]
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	3b04      	subs	r3, #4
 800339c:	0112      	lsls	r2, r2, #4
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	440b      	add	r3, r1
 80033a2:	761a      	strb	r2, [r3, #24]
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	e000e100 	.word	0xe000e100
 80033b4:	e000ed00 	.word	0xe000ed00

080033b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b089      	sub	sp, #36	; 0x24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	f1c3 0307 	rsb	r3, r3, #7
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	bf28      	it	cs
 80033d6:	2304      	movcs	r3, #4
 80033d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	3304      	adds	r3, #4
 80033de:	2b06      	cmp	r3, #6
 80033e0:	d902      	bls.n	80033e8 <NVIC_EncodePriority+0x30>
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	3b03      	subs	r3, #3
 80033e6:	e000      	b.n	80033ea <NVIC_EncodePriority+0x32>
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033ec:	f04f 32ff 	mov.w	r2, #4294967295
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	43da      	mvns	r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	401a      	ands	r2, r3
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003400:	f04f 31ff 	mov.w	r1, #4294967295
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	fa01 f303 	lsl.w	r3, r1, r3
 800340a:	43d9      	mvns	r1, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003410:	4313      	orrs	r3, r2
         );
}
 8003412:	4618      	mov	r0, r3
 8003414:	3724      	adds	r7, #36	; 0x24
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
	...

08003420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3b01      	subs	r3, #1
 800342c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003430:	d301      	bcc.n	8003436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003432:	2301      	movs	r3, #1
 8003434:	e00f      	b.n	8003456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003436:	4a0a      	ldr	r2, [pc, #40]	; (8003460 <SysTick_Config+0x40>)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3b01      	subs	r3, #1
 800343c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800343e:	210f      	movs	r1, #15
 8003440:	f04f 30ff 	mov.w	r0, #4294967295
 8003444:	f7ff ff8e 	bl	8003364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003448:	4b05      	ldr	r3, [pc, #20]	; (8003460 <SysTick_Config+0x40>)
 800344a:	2200      	movs	r2, #0
 800344c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800344e:	4b04      	ldr	r3, [pc, #16]	; (8003460 <SysTick_Config+0x40>)
 8003450:	2207      	movs	r2, #7
 8003452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	e000e010 	.word	0xe000e010

08003464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7ff ff29 	bl	80032c4 <__NVIC_SetPriorityGrouping>
}
 8003472:	bf00      	nop
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b086      	sub	sp, #24
 800347e:	af00      	add	r7, sp, #0
 8003480:	4603      	mov	r3, r0
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	607a      	str	r2, [r7, #4]
 8003486:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003488:	2300      	movs	r3, #0
 800348a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800348c:	f7ff ff3e 	bl	800330c <__NVIC_GetPriorityGrouping>
 8003490:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	68b9      	ldr	r1, [r7, #8]
 8003496:	6978      	ldr	r0, [r7, #20]
 8003498:	f7ff ff8e 	bl	80033b8 <NVIC_EncodePriority>
 800349c:	4602      	mov	r2, r0
 800349e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034a2:	4611      	mov	r1, r2
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff ff5d 	bl	8003364 <__NVIC_SetPriority>
}
 80034aa:	bf00      	nop
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b082      	sub	sp, #8
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	4603      	mov	r3, r0
 80034ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff ff31 	bl	8003328 <__NVIC_EnableIRQ>
}
 80034c6:	bf00      	nop
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b082      	sub	sp, #8
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7ff ffa2 	bl	8003420 <SysTick_Config>
 80034dc:	4603      	mov	r3, r0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034f2:	2300      	movs	r3, #0
 80034f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034f6:	e17f      	b.n	80037f8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	2101      	movs	r1, #1
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	fa01 f303 	lsl.w	r3, r1, r3
 8003504:	4013      	ands	r3, r2
 8003506:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 8171 	beq.w	80037f2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 0303 	and.w	r3, r3, #3
 8003518:	2b01      	cmp	r3, #1
 800351a:	d005      	beq.n	8003528 <HAL_GPIO_Init+0x40>
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f003 0303 	and.w	r3, r3, #3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d130      	bne.n	800358a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	2203      	movs	r2, #3
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	43db      	mvns	r3, r3
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	4013      	ands	r3, r2
 800353e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	4313      	orrs	r3, r2
 8003550:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800355e:	2201      	movs	r2, #1
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	43db      	mvns	r3, r3
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	4013      	ands	r3, r2
 800356c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	091b      	lsrs	r3, r3, #4
 8003574:	f003 0201 	and.w	r2, r3, #1
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	4313      	orrs	r3, r2
 8003582:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f003 0303 	and.w	r3, r3, #3
 8003592:	2b03      	cmp	r3, #3
 8003594:	d118      	bne.n	80035c8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800359c:	2201      	movs	r2, #1
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	43db      	mvns	r3, r3
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	4013      	ands	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	08db      	lsrs	r3, r3, #3
 80035b2:	f003 0201 	and.w	r2, r3, #1
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	4313      	orrs	r3, r2
 80035c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 0303 	and.w	r3, r3, #3
 80035d0:	2b03      	cmp	r3, #3
 80035d2:	d017      	beq.n	8003604 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	2203      	movs	r2, #3
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	43db      	mvns	r3, r3
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	4013      	ands	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f003 0303 	and.w	r3, r3, #3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d123      	bne.n	8003658 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	08da      	lsrs	r2, r3, #3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3208      	adds	r2, #8
 8003618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800361c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	220f      	movs	r2, #15
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	43db      	mvns	r3, r3
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	4013      	ands	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	4313      	orrs	r3, r2
 8003648:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	08da      	lsrs	r2, r3, #3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3208      	adds	r2, #8
 8003652:	6939      	ldr	r1, [r7, #16]
 8003654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	2203      	movs	r2, #3
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	43db      	mvns	r3, r3
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4013      	ands	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f003 0203 	and.w	r2, r3, #3
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	4313      	orrs	r3, r2
 8003684:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 80ac 	beq.w	80037f2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800369a:	4b5f      	ldr	r3, [pc, #380]	; (8003818 <HAL_GPIO_Init+0x330>)
 800369c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800369e:	4a5e      	ldr	r2, [pc, #376]	; (8003818 <HAL_GPIO_Init+0x330>)
 80036a0:	f043 0301 	orr.w	r3, r3, #1
 80036a4:	6613      	str	r3, [r2, #96]	; 0x60
 80036a6:	4b5c      	ldr	r3, [pc, #368]	; (8003818 <HAL_GPIO_Init+0x330>)
 80036a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	60bb      	str	r3, [r7, #8]
 80036b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036b2:	4a5a      	ldr	r2, [pc, #360]	; (800381c <HAL_GPIO_Init+0x334>)
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	089b      	lsrs	r3, r3, #2
 80036b8:	3302      	adds	r3, #2
 80036ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	220f      	movs	r2, #15
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	43db      	mvns	r3, r3
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	4013      	ands	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036dc:	d025      	beq.n	800372a <HAL_GPIO_Init+0x242>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a4f      	ldr	r2, [pc, #316]	; (8003820 <HAL_GPIO_Init+0x338>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d01f      	beq.n	8003726 <HAL_GPIO_Init+0x23e>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a4e      	ldr	r2, [pc, #312]	; (8003824 <HAL_GPIO_Init+0x33c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d019      	beq.n	8003722 <HAL_GPIO_Init+0x23a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a4d      	ldr	r2, [pc, #308]	; (8003828 <HAL_GPIO_Init+0x340>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d013      	beq.n	800371e <HAL_GPIO_Init+0x236>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a4c      	ldr	r2, [pc, #304]	; (800382c <HAL_GPIO_Init+0x344>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d00d      	beq.n	800371a <HAL_GPIO_Init+0x232>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a4b      	ldr	r2, [pc, #300]	; (8003830 <HAL_GPIO_Init+0x348>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d007      	beq.n	8003716 <HAL_GPIO_Init+0x22e>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a4a      	ldr	r2, [pc, #296]	; (8003834 <HAL_GPIO_Init+0x34c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d101      	bne.n	8003712 <HAL_GPIO_Init+0x22a>
 800370e:	2306      	movs	r3, #6
 8003710:	e00c      	b.n	800372c <HAL_GPIO_Init+0x244>
 8003712:	2307      	movs	r3, #7
 8003714:	e00a      	b.n	800372c <HAL_GPIO_Init+0x244>
 8003716:	2305      	movs	r3, #5
 8003718:	e008      	b.n	800372c <HAL_GPIO_Init+0x244>
 800371a:	2304      	movs	r3, #4
 800371c:	e006      	b.n	800372c <HAL_GPIO_Init+0x244>
 800371e:	2303      	movs	r3, #3
 8003720:	e004      	b.n	800372c <HAL_GPIO_Init+0x244>
 8003722:	2302      	movs	r3, #2
 8003724:	e002      	b.n	800372c <HAL_GPIO_Init+0x244>
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <HAL_GPIO_Init+0x244>
 800372a:	2300      	movs	r3, #0
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	f002 0203 	and.w	r2, r2, #3
 8003732:	0092      	lsls	r2, r2, #2
 8003734:	4093      	lsls	r3, r2
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	4313      	orrs	r3, r2
 800373a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800373c:	4937      	ldr	r1, [pc, #220]	; (800381c <HAL_GPIO_Init+0x334>)
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	089b      	lsrs	r3, r3, #2
 8003742:	3302      	adds	r3, #2
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800374a:	4b3b      	ldr	r3, [pc, #236]	; (8003838 <HAL_GPIO_Init+0x350>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	43db      	mvns	r3, r3
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4013      	ands	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4313      	orrs	r3, r2
 800376c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800376e:	4a32      	ldr	r2, [pc, #200]	; (8003838 <HAL_GPIO_Init+0x350>)
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003774:	4b30      	ldr	r3, [pc, #192]	; (8003838 <HAL_GPIO_Init+0x350>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	43db      	mvns	r3, r3
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4013      	ands	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4313      	orrs	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003798:	4a27      	ldr	r2, [pc, #156]	; (8003838 <HAL_GPIO_Init+0x350>)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800379e:	4b26      	ldr	r3, [pc, #152]	; (8003838 <HAL_GPIO_Init+0x350>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	43db      	mvns	r3, r3
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4013      	ands	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4313      	orrs	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037c2:	4a1d      	ldr	r2, [pc, #116]	; (8003838 <HAL_GPIO_Init+0x350>)
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80037c8:	4b1b      	ldr	r3, [pc, #108]	; (8003838 <HAL_GPIO_Init+0x350>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	43db      	mvns	r3, r3
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	4013      	ands	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037ec:	4a12      	ldr	r2, [pc, #72]	; (8003838 <HAL_GPIO_Init+0x350>)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	3301      	adds	r3, #1
 80037f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	f47f ae78 	bne.w	80034f8 <HAL_GPIO_Init+0x10>
  }
}
 8003808:	bf00      	nop
 800380a:	bf00      	nop
 800380c:	371c      	adds	r7, #28
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40021000 	.word	0x40021000
 800381c:	40010000 	.word	0x40010000
 8003820:	48000400 	.word	0x48000400
 8003824:	48000800 	.word	0x48000800
 8003828:	48000c00 	.word	0x48000c00
 800382c:	48001000 	.word	0x48001000
 8003830:	48001400 	.word	0x48001400
 8003834:	48001800 	.word	0x48001800
 8003838:	40010400 	.word	0x40010400

0800383c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	460b      	mov	r3, r1
 8003846:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691a      	ldr	r2, [r3, #16]
 800384c:	887b      	ldrh	r3, [r7, #2]
 800384e:	4013      	ands	r3, r2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d002      	beq.n	800385a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
 8003858:	e001      	b.n	800385e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800385a:	2300      	movs	r3, #0
 800385c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800385e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	460b      	mov	r3, r1
 8003876:	807b      	strh	r3, [r7, #2]
 8003878:	4613      	mov	r3, r2
 800387a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800387c:	787b      	ldrb	r3, [r7, #1]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003882:	887a      	ldrh	r2, [r7, #2]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003888:	e002      	b.n	8003890 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800388a:	887a      	ldrh	r2, [r7, #2]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038ae:	887a      	ldrh	r2, [r7, #2]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4013      	ands	r3, r2
 80038b4:	041a      	lsls	r2, r3, #16
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	43d9      	mvns	r1, r3
 80038ba:	887b      	ldrh	r3, [r7, #2]
 80038bc:	400b      	ands	r3, r1
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	619a      	str	r2, [r3, #24]
}
 80038c4:	bf00      	nop
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80038da:	4b08      	ldr	r3, [pc, #32]	; (80038fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038dc:	695a      	ldr	r2, [r3, #20]
 80038de:	88fb      	ldrh	r3, [r7, #6]
 80038e0:	4013      	ands	r3, r2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d006      	beq.n	80038f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038e6:	4a05      	ldr	r2, [pc, #20]	; (80038fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038e8:	88fb      	ldrh	r3, [r7, #6]
 80038ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038ec:	88fb      	ldrh	r3, [r7, #6]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fd fab8 	bl	8000e64 <HAL_GPIO_EXTI_Callback>
  }
}
 80038f4:	bf00      	nop
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40010400 	.word	0x40010400

08003900 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003904:	4b04      	ldr	r3, [pc, #16]	; (8003918 <HAL_PWREx_GetVoltageRange+0x18>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800390c:	4618      	mov	r0, r3
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	40007000 	.word	0x40007000

0800391c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800392a:	d130      	bne.n	800398e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800392c:	4b23      	ldr	r3, [pc, #140]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003938:	d038      	beq.n	80039ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800393a:	4b20      	ldr	r3, [pc, #128]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003942:	4a1e      	ldr	r2, [pc, #120]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003944:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003948:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800394a:	4b1d      	ldr	r3, [pc, #116]	; (80039c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2232      	movs	r2, #50	; 0x32
 8003950:	fb02 f303 	mul.w	r3, r2, r3
 8003954:	4a1b      	ldr	r2, [pc, #108]	; (80039c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003956:	fba2 2303 	umull	r2, r3, r2, r3
 800395a:	0c9b      	lsrs	r3, r3, #18
 800395c:	3301      	adds	r3, #1
 800395e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003960:	e002      	b.n	8003968 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	3b01      	subs	r3, #1
 8003966:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003968:	4b14      	ldr	r3, [pc, #80]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003974:	d102      	bne.n	800397c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1f2      	bne.n	8003962 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800397c:	4b0f      	ldr	r3, [pc, #60]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003988:	d110      	bne.n	80039ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e00f      	b.n	80039ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800398e:	4b0b      	ldr	r3, [pc, #44]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800399a:	d007      	beq.n	80039ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800399c:	4b07      	ldr	r3, [pc, #28]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039a4:	4a05      	ldr	r2, [pc, #20]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40007000 	.word	0x40007000
 80039c0:	20000188 	.word	0x20000188
 80039c4:	431bde83 	.word	0x431bde83

080039c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b088      	sub	sp, #32
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e3ca      	b.n	8004170 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039da:	4b97      	ldr	r3, [pc, #604]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 030c 	and.w	r3, r3, #12
 80039e2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039e4:	4b94      	ldr	r3, [pc, #592]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f003 0303 	and.w	r3, r3, #3
 80039ec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0310 	and.w	r3, r3, #16
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 80e4 	beq.w	8003bc4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d007      	beq.n	8003a12 <HAL_RCC_OscConfig+0x4a>
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	2b0c      	cmp	r3, #12
 8003a06:	f040 808b 	bne.w	8003b20 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	f040 8087 	bne.w	8003b20 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a12:	4b89      	ldr	r3, [pc, #548]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d005      	beq.n	8003a2a <HAL_RCC_OscConfig+0x62>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e3a2      	b.n	8004170 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1a      	ldr	r2, [r3, #32]
 8003a2e:	4b82      	ldr	r3, [pc, #520]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d004      	beq.n	8003a44 <HAL_RCC_OscConfig+0x7c>
 8003a3a:	4b7f      	ldr	r3, [pc, #508]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a42:	e005      	b.n	8003a50 <HAL_RCC_OscConfig+0x88>
 8003a44:	4b7c      	ldr	r3, [pc, #496]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a4a:	091b      	lsrs	r3, r3, #4
 8003a4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d223      	bcs.n	8003a9c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 fd55 	bl	8004508 <RCC_SetFlashLatencyFromMSIRange>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e383      	b.n	8004170 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a68:	4b73      	ldr	r3, [pc, #460]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a72      	ldr	r2, [pc, #456]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003a6e:	f043 0308 	orr.w	r3, r3, #8
 8003a72:	6013      	str	r3, [r2, #0]
 8003a74:	4b70      	ldr	r3, [pc, #448]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	496d      	ldr	r1, [pc, #436]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a86:	4b6c      	ldr	r3, [pc, #432]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69db      	ldr	r3, [r3, #28]
 8003a92:	021b      	lsls	r3, r3, #8
 8003a94:	4968      	ldr	r1, [pc, #416]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	604b      	str	r3, [r1, #4]
 8003a9a:	e025      	b.n	8003ae8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a9c:	4b66      	ldr	r3, [pc, #408]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a65      	ldr	r2, [pc, #404]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003aa2:	f043 0308 	orr.w	r3, r3, #8
 8003aa6:	6013      	str	r3, [r2, #0]
 8003aa8:	4b63      	ldr	r3, [pc, #396]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	4960      	ldr	r1, [pc, #384]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003aba:	4b5f      	ldr	r3, [pc, #380]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	021b      	lsls	r3, r3, #8
 8003ac8:	495b      	ldr	r1, [pc, #364]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d109      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f000 fd15 	bl	8004508 <RCC_SetFlashLatencyFromMSIRange>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e343      	b.n	8004170 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ae8:	f000 fc4a 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 8003aec:	4602      	mov	r2, r0
 8003aee:	4b52      	ldr	r3, [pc, #328]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	091b      	lsrs	r3, r3, #4
 8003af4:	f003 030f 	and.w	r3, r3, #15
 8003af8:	4950      	ldr	r1, [pc, #320]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003afa:	5ccb      	ldrb	r3, [r1, r3]
 8003afc:	f003 031f 	and.w	r3, r3, #31
 8003b00:	fa22 f303 	lsr.w	r3, r2, r3
 8003b04:	4a4e      	ldr	r2, [pc, #312]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003b06:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003b08:	4b4e      	ldr	r3, [pc, #312]	; (8003c44 <HAL_RCC_OscConfig+0x27c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fe f81b 	bl	8001b48 <HAL_InitTick>
 8003b12:	4603      	mov	r3, r0
 8003b14:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003b16:	7bfb      	ldrb	r3, [r7, #15]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d052      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003b1c:	7bfb      	ldrb	r3, [r7, #15]
 8003b1e:	e327      	b.n	8004170 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d032      	beq.n	8003b8e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b28:	4b43      	ldr	r3, [pc, #268]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a42      	ldr	r2, [pc, #264]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003b2e:	f043 0301 	orr.w	r3, r3, #1
 8003b32:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b34:	f7fe f858 	bl	8001be8 <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b3c:	f7fe f854 	bl	8001be8 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e310      	b.n	8004170 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b4e:	4b3a      	ldr	r3, [pc, #232]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0f0      	beq.n	8003b3c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b5a:	4b37      	ldr	r3, [pc, #220]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a36      	ldr	r2, [pc, #216]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003b60:	f043 0308 	orr.w	r3, r3, #8
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	4b34      	ldr	r3, [pc, #208]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	4931      	ldr	r1, [pc, #196]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b78:	4b2f      	ldr	r3, [pc, #188]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	021b      	lsls	r3, r3, #8
 8003b86:	492c      	ldr	r1, [pc, #176]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	604b      	str	r3, [r1, #4]
 8003b8c:	e01a      	b.n	8003bc4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b8e:	4b2a      	ldr	r3, [pc, #168]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a29      	ldr	r2, [pc, #164]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003b94:	f023 0301 	bic.w	r3, r3, #1
 8003b98:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b9a:	f7fe f825 	bl	8001be8 <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ba2:	f7fe f821 	bl	8001be8 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e2dd      	b.n	8004170 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003bb4:	4b20      	ldr	r3, [pc, #128]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1f0      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x1da>
 8003bc0:	e000      	b.n	8003bc4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bc2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d074      	beq.n	8003cba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	2b08      	cmp	r3, #8
 8003bd4:	d005      	beq.n	8003be2 <HAL_RCC_OscConfig+0x21a>
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	2b0c      	cmp	r3, #12
 8003bda:	d10e      	bne.n	8003bfa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	2b03      	cmp	r3, #3
 8003be0:	d10b      	bne.n	8003bfa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be2:	4b15      	ldr	r3, [pc, #84]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d064      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x2f0>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d160      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e2ba      	b.n	8004170 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c02:	d106      	bne.n	8003c12 <HAL_RCC_OscConfig+0x24a>
 8003c04:	4b0c      	ldr	r3, [pc, #48]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a0b      	ldr	r2, [pc, #44]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0e:	6013      	str	r3, [r2, #0]
 8003c10:	e026      	b.n	8003c60 <HAL_RCC_OscConfig+0x298>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c1a:	d115      	bne.n	8003c48 <HAL_RCC_OscConfig+0x280>
 8003c1c:	4b06      	ldr	r3, [pc, #24]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a05      	ldr	r2, [pc, #20]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003c22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c26:	6013      	str	r3, [r2, #0]
 8003c28:	4b03      	ldr	r3, [pc, #12]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a02      	ldr	r2, [pc, #8]	; (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c32:	6013      	str	r3, [r2, #0]
 8003c34:	e014      	b.n	8003c60 <HAL_RCC_OscConfig+0x298>
 8003c36:	bf00      	nop
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	08008800 	.word	0x08008800
 8003c40:	20000188 	.word	0x20000188
 8003c44:	2000018c 	.word	0x2000018c
 8003c48:	4ba0      	ldr	r3, [pc, #640]	; (8003ecc <HAL_RCC_OscConfig+0x504>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a9f      	ldr	r2, [pc, #636]	; (8003ecc <HAL_RCC_OscConfig+0x504>)
 8003c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c52:	6013      	str	r3, [r2, #0]
 8003c54:	4b9d      	ldr	r3, [pc, #628]	; (8003ecc <HAL_RCC_OscConfig+0x504>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a9c      	ldr	r2, [pc, #624]	; (8003ecc <HAL_RCC_OscConfig+0x504>)
 8003c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d013      	beq.n	8003c90 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c68:	f7fd ffbe 	bl	8001be8 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c70:	f7fd ffba 	bl	8001be8 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b64      	cmp	r3, #100	; 0x64
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e276      	b.n	8004170 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c82:	4b92      	ldr	r3, [pc, #584]	; (8003ecc <HAL_RCC_OscConfig+0x504>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0f0      	beq.n	8003c70 <HAL_RCC_OscConfig+0x2a8>
 8003c8e:	e014      	b.n	8003cba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c90:	f7fd ffaa 	bl	8001be8 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c98:	f7fd ffa6 	bl	8001be8 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b64      	cmp	r3, #100	; 0x64
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e262      	b.n	8004170 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003caa:	4b88      	ldr	r3, [pc, #544]	; (8003ecc <HAL_RCC_OscConfig+0x504>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f0      	bne.n	8003c98 <HAL_RCC_OscConfig+0x2d0>
 8003cb6:	e000      	b.n	8003cba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d060      	beq.n	8003d88 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	2b04      	cmp	r3, #4
 8003cca:	d005      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x310>
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	2b0c      	cmp	r3, #12
 8003cd0:	d119      	bne.n	8003d06 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d116      	bne.n	8003d06 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cd8:	4b7c      	ldr	r3, [pc, #496]	; (8003ecc <HAL_RCC_OscConfig+0x504>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d005      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x328>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e23f      	b.n	8004170 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf0:	4b76      	ldr	r3, [pc, #472]	; (8003ecc <HAL_RCC_OscConfig+0x504>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	061b      	lsls	r3, r3, #24
 8003cfe:	4973      	ldr	r1, [pc, #460]	; (8003ecc <HAL_RCC_OscConfig+0x504>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d04:	e040      	b.n	8003d88 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d023      	beq.n	8003d56 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d0e:	4b6f      	ldr	r3, [pc, #444]	; (8003ecc <HAL_RCC_OscConfig+0x504>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a6e      	ldr	r2, [pc, #440]	; (8003ecc <HAL_RCC_OscConfig+0x504>)
 8003d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1a:	f7fd ff65 	bl	8001be8 <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d20:	e008      	b.n	8003d34 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d22:	f7fd ff61 	bl	8001be8 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e21d      	b.n	8004170 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d34:	4b65      	ldr	r3, [pc, #404]	; (8003ecc <HAL_RCC_OscConfig+0x504>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0f0      	beq.n	8003d22 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d40:	4b62      	ldr	r3, [pc, #392]	; (8003ecc <HAL_RCC_OscConfig+0x504>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	061b      	lsls	r3, r3, #24
 8003d4e:	495f      	ldr	r1, [pc, #380]	; (8003ecc <HAL_RCC_OscConfig+0x504>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	604b      	str	r3, [r1, #4]
 8003d54:	e018      	b.n	8003d88 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d56:	4b5d      	ldr	r3, [pc, #372]	; (8003ecc <HAL_RCC_OscConfig+0x504>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a5c      	ldr	r2, [pc, #368]	; (8003ecc <HAL_RCC_OscConfig+0x504>)
 8003d5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d62:	f7fd ff41 	bl	8001be8 <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d6a:	f7fd ff3d 	bl	8001be8 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e1f9      	b.n	8004170 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d7c:	4b53      	ldr	r3, [pc, #332]	; (8003ecc <HAL_RCC_OscConfig+0x504>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1f0      	bne.n	8003d6a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0308 	and.w	r3, r3, #8
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d03c      	beq.n	8003e0e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d01c      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d9c:	4b4b      	ldr	r3, [pc, #300]	; (8003ecc <HAL_RCC_OscConfig+0x504>)
 8003d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003da2:	4a4a      	ldr	r2, [pc, #296]	; (8003ecc <HAL_RCC_OscConfig+0x504>)
 8003da4:	f043 0301 	orr.w	r3, r3, #1
 8003da8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dac:	f7fd ff1c 	bl	8001be8 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003db4:	f7fd ff18 	bl	8001be8 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e1d4      	b.n	8004170 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dc6:	4b41      	ldr	r3, [pc, #260]	; (8003ecc <HAL_RCC_OscConfig+0x504>)
 8003dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0ef      	beq.n	8003db4 <HAL_RCC_OscConfig+0x3ec>
 8003dd4:	e01b      	b.n	8003e0e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dd6:	4b3d      	ldr	r3, [pc, #244]	; (8003ecc <HAL_RCC_OscConfig+0x504>)
 8003dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ddc:	4a3b      	ldr	r2, [pc, #236]	; (8003ecc <HAL_RCC_OscConfig+0x504>)
 8003dde:	f023 0301 	bic.w	r3, r3, #1
 8003de2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de6:	f7fd feff 	bl	8001be8 <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dec:	e008      	b.n	8003e00 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dee:	f7fd fefb 	bl	8001be8 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e1b7      	b.n	8004170 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e00:	4b32      	ldr	r3, [pc, #200]	; (8003ecc <HAL_RCC_OscConfig+0x504>)
 8003e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1ef      	bne.n	8003dee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0304 	and.w	r3, r3, #4
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 80a6 	beq.w	8003f68 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e20:	4b2a      	ldr	r3, [pc, #168]	; (8003ecc <HAL_RCC_OscConfig+0x504>)
 8003e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10d      	bne.n	8003e48 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e2c:	4b27      	ldr	r3, [pc, #156]	; (8003ecc <HAL_RCC_OscConfig+0x504>)
 8003e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e30:	4a26      	ldr	r2, [pc, #152]	; (8003ecc <HAL_RCC_OscConfig+0x504>)
 8003e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e36:	6593      	str	r3, [r2, #88]	; 0x58
 8003e38:	4b24      	ldr	r3, [pc, #144]	; (8003ecc <HAL_RCC_OscConfig+0x504>)
 8003e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e40:	60bb      	str	r3, [r7, #8]
 8003e42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e44:	2301      	movs	r3, #1
 8003e46:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e48:	4b21      	ldr	r3, [pc, #132]	; (8003ed0 <HAL_RCC_OscConfig+0x508>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d118      	bne.n	8003e86 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e54:	4b1e      	ldr	r3, [pc, #120]	; (8003ed0 <HAL_RCC_OscConfig+0x508>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a1d      	ldr	r2, [pc, #116]	; (8003ed0 <HAL_RCC_OscConfig+0x508>)
 8003e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e60:	f7fd fec2 	bl	8001be8 <HAL_GetTick>
 8003e64:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e68:	f7fd febe 	bl	8001be8 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e17a      	b.n	8004170 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e7a:	4b15      	ldr	r3, [pc, #84]	; (8003ed0 <HAL_RCC_OscConfig+0x508>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d0f0      	beq.n	8003e68 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d108      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x4d8>
 8003e8e:	4b0f      	ldr	r3, [pc, #60]	; (8003ecc <HAL_RCC_OscConfig+0x504>)
 8003e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e94:	4a0d      	ldr	r2, [pc, #52]	; (8003ecc <HAL_RCC_OscConfig+0x504>)
 8003e96:	f043 0301 	orr.w	r3, r3, #1
 8003e9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e9e:	e029      	b.n	8003ef4 <HAL_RCC_OscConfig+0x52c>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	2b05      	cmp	r3, #5
 8003ea6:	d115      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x50c>
 8003ea8:	4b08      	ldr	r3, [pc, #32]	; (8003ecc <HAL_RCC_OscConfig+0x504>)
 8003eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eae:	4a07      	ldr	r2, [pc, #28]	; (8003ecc <HAL_RCC_OscConfig+0x504>)
 8003eb0:	f043 0304 	orr.w	r3, r3, #4
 8003eb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003eb8:	4b04      	ldr	r3, [pc, #16]	; (8003ecc <HAL_RCC_OscConfig+0x504>)
 8003eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ebe:	4a03      	ldr	r2, [pc, #12]	; (8003ecc <HAL_RCC_OscConfig+0x504>)
 8003ec0:	f043 0301 	orr.w	r3, r3, #1
 8003ec4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ec8:	e014      	b.n	8003ef4 <HAL_RCC_OscConfig+0x52c>
 8003eca:	bf00      	nop
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	40007000 	.word	0x40007000
 8003ed4:	4b9c      	ldr	r3, [pc, #624]	; (8004148 <HAL_RCC_OscConfig+0x780>)
 8003ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eda:	4a9b      	ldr	r2, [pc, #620]	; (8004148 <HAL_RCC_OscConfig+0x780>)
 8003edc:	f023 0301 	bic.w	r3, r3, #1
 8003ee0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ee4:	4b98      	ldr	r3, [pc, #608]	; (8004148 <HAL_RCC_OscConfig+0x780>)
 8003ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eea:	4a97      	ldr	r2, [pc, #604]	; (8004148 <HAL_RCC_OscConfig+0x780>)
 8003eec:	f023 0304 	bic.w	r3, r3, #4
 8003ef0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d016      	beq.n	8003f2a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003efc:	f7fd fe74 	bl	8001be8 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f02:	e00a      	b.n	8003f1a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f04:	f7fd fe70 	bl	8001be8 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e12a      	b.n	8004170 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f1a:	4b8b      	ldr	r3, [pc, #556]	; (8004148 <HAL_RCC_OscConfig+0x780>)
 8003f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0ed      	beq.n	8003f04 <HAL_RCC_OscConfig+0x53c>
 8003f28:	e015      	b.n	8003f56 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f2a:	f7fd fe5d 	bl	8001be8 <HAL_GetTick>
 8003f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f30:	e00a      	b.n	8003f48 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f32:	f7fd fe59 	bl	8001be8 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e113      	b.n	8004170 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f48:	4b7f      	ldr	r3, [pc, #508]	; (8004148 <HAL_RCC_OscConfig+0x780>)
 8003f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1ed      	bne.n	8003f32 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f56:	7ffb      	ldrb	r3, [r7, #31]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d105      	bne.n	8003f68 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f5c:	4b7a      	ldr	r3, [pc, #488]	; (8004148 <HAL_RCC_OscConfig+0x780>)
 8003f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f60:	4a79      	ldr	r2, [pc, #484]	; (8004148 <HAL_RCC_OscConfig+0x780>)
 8003f62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f66:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 80fe 	beq.w	800416e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	f040 80d0 	bne.w	800411c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f7c:	4b72      	ldr	r3, [pc, #456]	; (8004148 <HAL_RCC_OscConfig+0x780>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f003 0203 	and.w	r2, r3, #3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d130      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d127      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d11f      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fbc:	2a07      	cmp	r2, #7
 8003fbe:	bf14      	ite	ne
 8003fc0:	2201      	movne	r2, #1
 8003fc2:	2200      	moveq	r2, #0
 8003fc4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d113      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd4:	085b      	lsrs	r3, r3, #1
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d109      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe8:	085b      	lsrs	r3, r3, #1
 8003fea:	3b01      	subs	r3, #1
 8003fec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d06e      	beq.n	80040d0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	2b0c      	cmp	r3, #12
 8003ff6:	d069      	beq.n	80040cc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003ff8:	4b53      	ldr	r3, [pc, #332]	; (8004148 <HAL_RCC_OscConfig+0x780>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d105      	bne.n	8004010 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004004:	4b50      	ldr	r3, [pc, #320]	; (8004148 <HAL_RCC_OscConfig+0x780>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e0ad      	b.n	8004170 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004014:	4b4c      	ldr	r3, [pc, #304]	; (8004148 <HAL_RCC_OscConfig+0x780>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a4b      	ldr	r2, [pc, #300]	; (8004148 <HAL_RCC_OscConfig+0x780>)
 800401a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800401e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004020:	f7fd fde2 	bl	8001be8 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004028:	f7fd fdde 	bl	8001be8 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e09a      	b.n	8004170 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800403a:	4b43      	ldr	r3, [pc, #268]	; (8004148 <HAL_RCC_OscConfig+0x780>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1f0      	bne.n	8004028 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004046:	4b40      	ldr	r3, [pc, #256]	; (8004148 <HAL_RCC_OscConfig+0x780>)
 8004048:	68da      	ldr	r2, [r3, #12]
 800404a:	4b40      	ldr	r3, [pc, #256]	; (800414c <HAL_RCC_OscConfig+0x784>)
 800404c:	4013      	ands	r3, r2
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004056:	3a01      	subs	r2, #1
 8004058:	0112      	lsls	r2, r2, #4
 800405a:	4311      	orrs	r1, r2
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004060:	0212      	lsls	r2, r2, #8
 8004062:	4311      	orrs	r1, r2
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004068:	0852      	lsrs	r2, r2, #1
 800406a:	3a01      	subs	r2, #1
 800406c:	0552      	lsls	r2, r2, #21
 800406e:	4311      	orrs	r1, r2
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004074:	0852      	lsrs	r2, r2, #1
 8004076:	3a01      	subs	r2, #1
 8004078:	0652      	lsls	r2, r2, #25
 800407a:	4311      	orrs	r1, r2
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004080:	0912      	lsrs	r2, r2, #4
 8004082:	0452      	lsls	r2, r2, #17
 8004084:	430a      	orrs	r2, r1
 8004086:	4930      	ldr	r1, [pc, #192]	; (8004148 <HAL_RCC_OscConfig+0x780>)
 8004088:	4313      	orrs	r3, r2
 800408a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800408c:	4b2e      	ldr	r3, [pc, #184]	; (8004148 <HAL_RCC_OscConfig+0x780>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a2d      	ldr	r2, [pc, #180]	; (8004148 <HAL_RCC_OscConfig+0x780>)
 8004092:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004096:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004098:	4b2b      	ldr	r3, [pc, #172]	; (8004148 <HAL_RCC_OscConfig+0x780>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	4a2a      	ldr	r2, [pc, #168]	; (8004148 <HAL_RCC_OscConfig+0x780>)
 800409e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040a4:	f7fd fda0 	bl	8001be8 <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040aa:	e008      	b.n	80040be <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ac:	f7fd fd9c 	bl	8001be8 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e058      	b.n	8004170 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040be:	4b22      	ldr	r3, [pc, #136]	; (8004148 <HAL_RCC_OscConfig+0x780>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d0f0      	beq.n	80040ac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040ca:	e050      	b.n	800416e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e04f      	b.n	8004170 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040d0:	4b1d      	ldr	r3, [pc, #116]	; (8004148 <HAL_RCC_OscConfig+0x780>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d148      	bne.n	800416e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80040dc:	4b1a      	ldr	r3, [pc, #104]	; (8004148 <HAL_RCC_OscConfig+0x780>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a19      	ldr	r2, [pc, #100]	; (8004148 <HAL_RCC_OscConfig+0x780>)
 80040e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040e8:	4b17      	ldr	r3, [pc, #92]	; (8004148 <HAL_RCC_OscConfig+0x780>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	4a16      	ldr	r2, [pc, #88]	; (8004148 <HAL_RCC_OscConfig+0x780>)
 80040ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040f4:	f7fd fd78 	bl	8001be8 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040fc:	f7fd fd74 	bl	8001be8 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e030      	b.n	8004170 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800410e:	4b0e      	ldr	r3, [pc, #56]	; (8004148 <HAL_RCC_OscConfig+0x780>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d0f0      	beq.n	80040fc <HAL_RCC_OscConfig+0x734>
 800411a:	e028      	b.n	800416e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	2b0c      	cmp	r3, #12
 8004120:	d023      	beq.n	800416a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004122:	4b09      	ldr	r3, [pc, #36]	; (8004148 <HAL_RCC_OscConfig+0x780>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a08      	ldr	r2, [pc, #32]	; (8004148 <HAL_RCC_OscConfig+0x780>)
 8004128:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800412c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412e:	f7fd fd5b 	bl	8001be8 <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004134:	e00c      	b.n	8004150 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004136:	f7fd fd57 	bl	8001be8 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d905      	bls.n	8004150 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e013      	b.n	8004170 <HAL_RCC_OscConfig+0x7a8>
 8004148:	40021000 	.word	0x40021000
 800414c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004150:	4b09      	ldr	r3, [pc, #36]	; (8004178 <HAL_RCC_OscConfig+0x7b0>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1ec      	bne.n	8004136 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800415c:	4b06      	ldr	r3, [pc, #24]	; (8004178 <HAL_RCC_OscConfig+0x7b0>)
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	4905      	ldr	r1, [pc, #20]	; (8004178 <HAL_RCC_OscConfig+0x7b0>)
 8004162:	4b06      	ldr	r3, [pc, #24]	; (800417c <HAL_RCC_OscConfig+0x7b4>)
 8004164:	4013      	ands	r3, r2
 8004166:	60cb      	str	r3, [r1, #12]
 8004168:	e001      	b.n	800416e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3720      	adds	r7, #32
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40021000 	.word	0x40021000
 800417c:	feeefffc 	.word	0xfeeefffc

08004180 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e0e7      	b.n	8004364 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004194:	4b75      	ldr	r3, [pc, #468]	; (800436c <HAL_RCC_ClockConfig+0x1ec>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0307 	and.w	r3, r3, #7
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d910      	bls.n	80041c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041a2:	4b72      	ldr	r3, [pc, #456]	; (800436c <HAL_RCC_ClockConfig+0x1ec>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f023 0207 	bic.w	r2, r3, #7
 80041aa:	4970      	ldr	r1, [pc, #448]	; (800436c <HAL_RCC_ClockConfig+0x1ec>)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b2:	4b6e      	ldr	r3, [pc, #440]	; (800436c <HAL_RCC_ClockConfig+0x1ec>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d001      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e0cf      	b.n	8004364 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d010      	beq.n	80041f2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	4b66      	ldr	r3, [pc, #408]	; (8004370 <HAL_RCC_ClockConfig+0x1f0>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041dc:	429a      	cmp	r2, r3
 80041de:	d908      	bls.n	80041f2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041e0:	4b63      	ldr	r3, [pc, #396]	; (8004370 <HAL_RCC_ClockConfig+0x1f0>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	4960      	ldr	r1, [pc, #384]	; (8004370 <HAL_RCC_ClockConfig+0x1f0>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d04c      	beq.n	8004298 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2b03      	cmp	r3, #3
 8004204:	d107      	bne.n	8004216 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004206:	4b5a      	ldr	r3, [pc, #360]	; (8004370 <HAL_RCC_ClockConfig+0x1f0>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d121      	bne.n	8004256 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e0a6      	b.n	8004364 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	2b02      	cmp	r3, #2
 800421c:	d107      	bne.n	800422e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800421e:	4b54      	ldr	r3, [pc, #336]	; (8004370 <HAL_RCC_ClockConfig+0x1f0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d115      	bne.n	8004256 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e09a      	b.n	8004364 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d107      	bne.n	8004246 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004236:	4b4e      	ldr	r3, [pc, #312]	; (8004370 <HAL_RCC_ClockConfig+0x1f0>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d109      	bne.n	8004256 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e08e      	b.n	8004364 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004246:	4b4a      	ldr	r3, [pc, #296]	; (8004370 <HAL_RCC_ClockConfig+0x1f0>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e086      	b.n	8004364 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004256:	4b46      	ldr	r3, [pc, #280]	; (8004370 <HAL_RCC_ClockConfig+0x1f0>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f023 0203 	bic.w	r2, r3, #3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	4943      	ldr	r1, [pc, #268]	; (8004370 <HAL_RCC_ClockConfig+0x1f0>)
 8004264:	4313      	orrs	r3, r2
 8004266:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004268:	f7fd fcbe 	bl	8001be8 <HAL_GetTick>
 800426c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800426e:	e00a      	b.n	8004286 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004270:	f7fd fcba 	bl	8001be8 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	f241 3288 	movw	r2, #5000	; 0x1388
 800427e:	4293      	cmp	r3, r2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e06e      	b.n	8004364 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004286:	4b3a      	ldr	r3, [pc, #232]	; (8004370 <HAL_RCC_ClockConfig+0x1f0>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 020c 	and.w	r2, r3, #12
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	429a      	cmp	r2, r3
 8004296:	d1eb      	bne.n	8004270 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d010      	beq.n	80042c6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	4b31      	ldr	r3, [pc, #196]	; (8004370 <HAL_RCC_ClockConfig+0x1f0>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d208      	bcs.n	80042c6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042b4:	4b2e      	ldr	r3, [pc, #184]	; (8004370 <HAL_RCC_ClockConfig+0x1f0>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	492b      	ldr	r1, [pc, #172]	; (8004370 <HAL_RCC_ClockConfig+0x1f0>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042c6:	4b29      	ldr	r3, [pc, #164]	; (800436c <HAL_RCC_ClockConfig+0x1ec>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d210      	bcs.n	80042f6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d4:	4b25      	ldr	r3, [pc, #148]	; (800436c <HAL_RCC_ClockConfig+0x1ec>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f023 0207 	bic.w	r2, r3, #7
 80042dc:	4923      	ldr	r1, [pc, #140]	; (800436c <HAL_RCC_ClockConfig+0x1ec>)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042e4:	4b21      	ldr	r3, [pc, #132]	; (800436c <HAL_RCC_ClockConfig+0x1ec>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d001      	beq.n	80042f6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e036      	b.n	8004364 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0304 	and.w	r3, r3, #4
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d008      	beq.n	8004314 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004302:	4b1b      	ldr	r3, [pc, #108]	; (8004370 <HAL_RCC_ClockConfig+0x1f0>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	4918      	ldr	r1, [pc, #96]	; (8004370 <HAL_RCC_ClockConfig+0x1f0>)
 8004310:	4313      	orrs	r3, r2
 8004312:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0308 	and.w	r3, r3, #8
 800431c:	2b00      	cmp	r3, #0
 800431e:	d009      	beq.n	8004334 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004320:	4b13      	ldr	r3, [pc, #76]	; (8004370 <HAL_RCC_ClockConfig+0x1f0>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	4910      	ldr	r1, [pc, #64]	; (8004370 <HAL_RCC_ClockConfig+0x1f0>)
 8004330:	4313      	orrs	r3, r2
 8004332:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004334:	f000 f824 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 8004338:	4602      	mov	r2, r0
 800433a:	4b0d      	ldr	r3, [pc, #52]	; (8004370 <HAL_RCC_ClockConfig+0x1f0>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	091b      	lsrs	r3, r3, #4
 8004340:	f003 030f 	and.w	r3, r3, #15
 8004344:	490b      	ldr	r1, [pc, #44]	; (8004374 <HAL_RCC_ClockConfig+0x1f4>)
 8004346:	5ccb      	ldrb	r3, [r1, r3]
 8004348:	f003 031f 	and.w	r3, r3, #31
 800434c:	fa22 f303 	lsr.w	r3, r2, r3
 8004350:	4a09      	ldr	r2, [pc, #36]	; (8004378 <HAL_RCC_ClockConfig+0x1f8>)
 8004352:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004354:	4b09      	ldr	r3, [pc, #36]	; (800437c <HAL_RCC_ClockConfig+0x1fc>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4618      	mov	r0, r3
 800435a:	f7fd fbf5 	bl	8001b48 <HAL_InitTick>
 800435e:	4603      	mov	r3, r0
 8004360:	72fb      	strb	r3, [r7, #11]

  return status;
 8004362:	7afb      	ldrb	r3, [r7, #11]
}
 8004364:	4618      	mov	r0, r3
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	40022000 	.word	0x40022000
 8004370:	40021000 	.word	0x40021000
 8004374:	08008800 	.word	0x08008800
 8004378:	20000188 	.word	0x20000188
 800437c:	2000018c 	.word	0x2000018c

08004380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004380:	b480      	push	{r7}
 8004382:	b089      	sub	sp, #36	; 0x24
 8004384:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	61fb      	str	r3, [r7, #28]
 800438a:	2300      	movs	r3, #0
 800438c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800438e:	4b3e      	ldr	r3, [pc, #248]	; (8004488 <HAL_RCC_GetSysClockFreq+0x108>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 030c 	and.w	r3, r3, #12
 8004396:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004398:	4b3b      	ldr	r3, [pc, #236]	; (8004488 <HAL_RCC_GetSysClockFreq+0x108>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f003 0303 	and.w	r3, r3, #3
 80043a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d005      	beq.n	80043b4 <HAL_RCC_GetSysClockFreq+0x34>
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	2b0c      	cmp	r3, #12
 80043ac:	d121      	bne.n	80043f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d11e      	bne.n	80043f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80043b4:	4b34      	ldr	r3, [pc, #208]	; (8004488 <HAL_RCC_GetSysClockFreq+0x108>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0308 	and.w	r3, r3, #8
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d107      	bne.n	80043d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80043c0:	4b31      	ldr	r3, [pc, #196]	; (8004488 <HAL_RCC_GetSysClockFreq+0x108>)
 80043c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043c6:	0a1b      	lsrs	r3, r3, #8
 80043c8:	f003 030f 	and.w	r3, r3, #15
 80043cc:	61fb      	str	r3, [r7, #28]
 80043ce:	e005      	b.n	80043dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80043d0:	4b2d      	ldr	r3, [pc, #180]	; (8004488 <HAL_RCC_GetSysClockFreq+0x108>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	091b      	lsrs	r3, r3, #4
 80043d6:	f003 030f 	and.w	r3, r3, #15
 80043da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80043dc:	4a2b      	ldr	r2, [pc, #172]	; (800448c <HAL_RCC_GetSysClockFreq+0x10c>)
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10d      	bne.n	8004408 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043f0:	e00a      	b.n	8004408 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	2b04      	cmp	r3, #4
 80043f6:	d102      	bne.n	80043fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043f8:	4b25      	ldr	r3, [pc, #148]	; (8004490 <HAL_RCC_GetSysClockFreq+0x110>)
 80043fa:	61bb      	str	r3, [r7, #24]
 80043fc:	e004      	b.n	8004408 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	2b08      	cmp	r3, #8
 8004402:	d101      	bne.n	8004408 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004404:	4b23      	ldr	r3, [pc, #140]	; (8004494 <HAL_RCC_GetSysClockFreq+0x114>)
 8004406:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	2b0c      	cmp	r3, #12
 800440c:	d134      	bne.n	8004478 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800440e:	4b1e      	ldr	r3, [pc, #120]	; (8004488 <HAL_RCC_GetSysClockFreq+0x108>)
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f003 0303 	and.w	r3, r3, #3
 8004416:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2b02      	cmp	r3, #2
 800441c:	d003      	beq.n	8004426 <HAL_RCC_GetSysClockFreq+0xa6>
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b03      	cmp	r3, #3
 8004422:	d003      	beq.n	800442c <HAL_RCC_GetSysClockFreq+0xac>
 8004424:	e005      	b.n	8004432 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004426:	4b1a      	ldr	r3, [pc, #104]	; (8004490 <HAL_RCC_GetSysClockFreq+0x110>)
 8004428:	617b      	str	r3, [r7, #20]
      break;
 800442a:	e005      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800442c:	4b19      	ldr	r3, [pc, #100]	; (8004494 <HAL_RCC_GetSysClockFreq+0x114>)
 800442e:	617b      	str	r3, [r7, #20]
      break;
 8004430:	e002      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	617b      	str	r3, [r7, #20]
      break;
 8004436:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004438:	4b13      	ldr	r3, [pc, #76]	; (8004488 <HAL_RCC_GetSysClockFreq+0x108>)
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	091b      	lsrs	r3, r3, #4
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	3301      	adds	r3, #1
 8004444:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004446:	4b10      	ldr	r3, [pc, #64]	; (8004488 <HAL_RCC_GetSysClockFreq+0x108>)
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	0a1b      	lsrs	r3, r3, #8
 800444c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	fb03 f202 	mul.w	r2, r3, r2
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	fbb2 f3f3 	udiv	r3, r2, r3
 800445c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800445e:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <HAL_RCC_GetSysClockFreq+0x108>)
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	0e5b      	lsrs	r3, r3, #25
 8004464:	f003 0303 	and.w	r3, r3, #3
 8004468:	3301      	adds	r3, #1
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	fbb2 f3f3 	udiv	r3, r2, r3
 8004476:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004478:	69bb      	ldr	r3, [r7, #24]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3724      	adds	r7, #36	; 0x24
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	40021000 	.word	0x40021000
 800448c:	08008818 	.word	0x08008818
 8004490:	00f42400 	.word	0x00f42400
 8004494:	007a1200 	.word	0x007a1200

08004498 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800449c:	4b03      	ldr	r3, [pc, #12]	; (80044ac <HAL_RCC_GetHCLKFreq+0x14>)
 800449e:	681b      	ldr	r3, [r3, #0]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	20000188 	.word	0x20000188

080044b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80044b4:	f7ff fff0 	bl	8004498 <HAL_RCC_GetHCLKFreq>
 80044b8:	4602      	mov	r2, r0
 80044ba:	4b06      	ldr	r3, [pc, #24]	; (80044d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	0a1b      	lsrs	r3, r3, #8
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	4904      	ldr	r1, [pc, #16]	; (80044d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044c6:	5ccb      	ldrb	r3, [r1, r3]
 80044c8:	f003 031f 	and.w	r3, r3, #31
 80044cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	40021000 	.word	0x40021000
 80044d8:	08008810 	.word	0x08008810

080044dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80044e0:	f7ff ffda 	bl	8004498 <HAL_RCC_GetHCLKFreq>
 80044e4:	4602      	mov	r2, r0
 80044e6:	4b06      	ldr	r3, [pc, #24]	; (8004500 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	0adb      	lsrs	r3, r3, #11
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	4904      	ldr	r1, [pc, #16]	; (8004504 <HAL_RCC_GetPCLK2Freq+0x28>)
 80044f2:	5ccb      	ldrb	r3, [r1, r3]
 80044f4:	f003 031f 	and.w	r3, r3, #31
 80044f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	40021000 	.word	0x40021000
 8004504:	08008810 	.word	0x08008810

08004508 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004510:	2300      	movs	r3, #0
 8004512:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004514:	4b2a      	ldr	r3, [pc, #168]	; (80045c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004520:	f7ff f9ee 	bl	8003900 <HAL_PWREx_GetVoltageRange>
 8004524:	6178      	str	r0, [r7, #20]
 8004526:	e014      	b.n	8004552 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004528:	4b25      	ldr	r3, [pc, #148]	; (80045c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800452a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452c:	4a24      	ldr	r2, [pc, #144]	; (80045c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800452e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004532:	6593      	str	r3, [r2, #88]	; 0x58
 8004534:	4b22      	ldr	r3, [pc, #136]	; (80045c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800453c:	60fb      	str	r3, [r7, #12]
 800453e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004540:	f7ff f9de 	bl	8003900 <HAL_PWREx_GetVoltageRange>
 8004544:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004546:	4b1e      	ldr	r3, [pc, #120]	; (80045c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454a:	4a1d      	ldr	r2, [pc, #116]	; (80045c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800454c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004550:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004558:	d10b      	bne.n	8004572 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b80      	cmp	r3, #128	; 0x80
 800455e:	d919      	bls.n	8004594 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2ba0      	cmp	r3, #160	; 0xa0
 8004564:	d902      	bls.n	800456c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004566:	2302      	movs	r3, #2
 8004568:	613b      	str	r3, [r7, #16]
 800456a:	e013      	b.n	8004594 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800456c:	2301      	movs	r3, #1
 800456e:	613b      	str	r3, [r7, #16]
 8004570:	e010      	b.n	8004594 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b80      	cmp	r3, #128	; 0x80
 8004576:	d902      	bls.n	800457e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004578:	2303      	movs	r3, #3
 800457a:	613b      	str	r3, [r7, #16]
 800457c:	e00a      	b.n	8004594 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b80      	cmp	r3, #128	; 0x80
 8004582:	d102      	bne.n	800458a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004584:	2302      	movs	r3, #2
 8004586:	613b      	str	r3, [r7, #16]
 8004588:	e004      	b.n	8004594 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b70      	cmp	r3, #112	; 0x70
 800458e:	d101      	bne.n	8004594 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004590:	2301      	movs	r3, #1
 8004592:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004594:	4b0b      	ldr	r3, [pc, #44]	; (80045c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f023 0207 	bic.w	r2, r3, #7
 800459c:	4909      	ldr	r1, [pc, #36]	; (80045c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80045a4:	4b07      	ldr	r3, [pc, #28]	; (80045c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0307 	and.w	r3, r3, #7
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d001      	beq.n	80045b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3718      	adds	r7, #24
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40021000 	.word	0x40021000
 80045c4:	40022000 	.word	0x40022000

080045c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045d0:	2300      	movs	r3, #0
 80045d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045d4:	2300      	movs	r3, #0
 80045d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d041      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045ec:	d02a      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80045ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045f2:	d824      	bhi.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045f8:	d008      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80045fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045fe:	d81e      	bhi.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00a      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004604:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004608:	d010      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800460a:	e018      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800460c:	4b86      	ldr	r3, [pc, #536]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	4a85      	ldr	r2, [pc, #532]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004616:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004618:	e015      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	3304      	adds	r3, #4
 800461e:	2100      	movs	r1, #0
 8004620:	4618      	mov	r0, r3
 8004622:	f000 fabb 	bl	8004b9c <RCCEx_PLLSAI1_Config>
 8004626:	4603      	mov	r3, r0
 8004628:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800462a:	e00c      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3320      	adds	r3, #32
 8004630:	2100      	movs	r1, #0
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fba6 	bl	8004d84 <RCCEx_PLLSAI2_Config>
 8004638:	4603      	mov	r3, r0
 800463a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800463c:	e003      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	74fb      	strb	r3, [r7, #19]
      break;
 8004642:	e000      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004644:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004646:	7cfb      	ldrb	r3, [r7, #19]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10b      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800464c:	4b76      	ldr	r3, [pc, #472]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800464e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004652:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800465a:	4973      	ldr	r1, [pc, #460]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800465c:	4313      	orrs	r3, r2
 800465e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004662:	e001      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004664:	7cfb      	ldrb	r3, [r7, #19]
 8004666:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d041      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004678:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800467c:	d02a      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800467e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004682:	d824      	bhi.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004684:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004688:	d008      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800468a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800468e:	d81e      	bhi.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00a      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004694:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004698:	d010      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800469a:	e018      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800469c:	4b62      	ldr	r3, [pc, #392]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	4a61      	ldr	r2, [pc, #388]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046a8:	e015      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	3304      	adds	r3, #4
 80046ae:	2100      	movs	r1, #0
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 fa73 	bl	8004b9c <RCCEx_PLLSAI1_Config>
 80046b6:	4603      	mov	r3, r0
 80046b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046ba:	e00c      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3320      	adds	r3, #32
 80046c0:	2100      	movs	r1, #0
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 fb5e 	bl	8004d84 <RCCEx_PLLSAI2_Config>
 80046c8:	4603      	mov	r3, r0
 80046ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046cc:	e003      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	74fb      	strb	r3, [r7, #19]
      break;
 80046d2:	e000      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80046d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046d6:	7cfb      	ldrb	r3, [r7, #19]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10b      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046dc:	4b52      	ldr	r3, [pc, #328]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046ea:	494f      	ldr	r1, [pc, #316]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80046f2:	e001      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f4:	7cfb      	ldrb	r3, [r7, #19]
 80046f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 80a0 	beq.w	8004846 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004706:	2300      	movs	r3, #0
 8004708:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800470a:	4b47      	ldr	r3, [pc, #284]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800470c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800470e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800471a:	2300      	movs	r3, #0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00d      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004720:	4b41      	ldr	r3, [pc, #260]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004724:	4a40      	ldr	r2, [pc, #256]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800472a:	6593      	str	r3, [r2, #88]	; 0x58
 800472c:	4b3e      	ldr	r3, [pc, #248]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800472e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004734:	60bb      	str	r3, [r7, #8]
 8004736:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004738:	2301      	movs	r3, #1
 800473a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800473c:	4b3b      	ldr	r3, [pc, #236]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a3a      	ldr	r2, [pc, #232]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004746:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004748:	f7fd fa4e 	bl	8001be8 <HAL_GetTick>
 800474c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800474e:	e009      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004750:	f7fd fa4a 	bl	8001be8 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d902      	bls.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	74fb      	strb	r3, [r7, #19]
        break;
 8004762:	e005      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004764:	4b31      	ldr	r3, [pc, #196]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0ef      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004770:	7cfb      	ldrb	r3, [r7, #19]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d15c      	bne.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004776:	4b2c      	ldr	r3, [pc, #176]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800477c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004780:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d01f      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	429a      	cmp	r2, r3
 8004792:	d019      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004794:	4b24      	ldr	r3, [pc, #144]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800479e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047a0:	4b21      	ldr	r3, [pc, #132]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a6:	4a20      	ldr	r2, [pc, #128]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047b0:	4b1d      	ldr	r3, [pc, #116]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b6:	4a1c      	ldr	r2, [pc, #112]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047c0:	4a19      	ldr	r2, [pc, #100]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d016      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d2:	f7fd fa09 	bl	8001be8 <HAL_GetTick>
 80047d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047d8:	e00b      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047da:	f7fd fa05 	bl	8001be8 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d902      	bls.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	74fb      	strb	r3, [r7, #19]
            break;
 80047f0:	e006      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047f2:	4b0d      	ldr	r3, [pc, #52]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0ec      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004800:	7cfb      	ldrb	r3, [r7, #19]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10c      	bne.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004806:	4b08      	ldr	r3, [pc, #32]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004816:	4904      	ldr	r1, [pc, #16]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004818:	4313      	orrs	r3, r2
 800481a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800481e:	e009      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004820:	7cfb      	ldrb	r3, [r7, #19]
 8004822:	74bb      	strb	r3, [r7, #18]
 8004824:	e006      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004826:	bf00      	nop
 8004828:	40021000 	.word	0x40021000
 800482c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004830:	7cfb      	ldrb	r3, [r7, #19]
 8004832:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004834:	7c7b      	ldrb	r3, [r7, #17]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d105      	bne.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800483a:	4b9e      	ldr	r3, [pc, #632]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800483c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483e:	4a9d      	ldr	r2, [pc, #628]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004844:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00a      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004852:	4b98      	ldr	r3, [pc, #608]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004858:	f023 0203 	bic.w	r2, r3, #3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004860:	4994      	ldr	r1, [pc, #592]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004862:	4313      	orrs	r3, r2
 8004864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00a      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004874:	4b8f      	ldr	r3, [pc, #572]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800487a:	f023 020c 	bic.w	r2, r3, #12
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004882:	498c      	ldr	r1, [pc, #560]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004884:	4313      	orrs	r3, r2
 8004886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0304 	and.w	r3, r3, #4
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004896:	4b87      	ldr	r3, [pc, #540]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a4:	4983      	ldr	r1, [pc, #524]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0308 	and.w	r3, r3, #8
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00a      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048b8:	4b7e      	ldr	r3, [pc, #504]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c6:	497b      	ldr	r1, [pc, #492]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0310 	and.w	r3, r3, #16
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00a      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048da:	4b76      	ldr	r3, [pc, #472]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e8:	4972      	ldr	r1, [pc, #456]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0320 	and.w	r3, r3, #32
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00a      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048fc:	4b6d      	ldr	r3, [pc, #436]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004902:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800490a:	496a      	ldr	r1, [pc, #424]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800490c:	4313      	orrs	r3, r2
 800490e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00a      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800491e:	4b65      	ldr	r3, [pc, #404]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004924:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800492c:	4961      	ldr	r1, [pc, #388]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800492e:	4313      	orrs	r3, r2
 8004930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00a      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004940:	4b5c      	ldr	r3, [pc, #368]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004946:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800494e:	4959      	ldr	r1, [pc, #356]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004950:	4313      	orrs	r3, r2
 8004952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00a      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004962:	4b54      	ldr	r3, [pc, #336]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004968:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004970:	4950      	ldr	r1, [pc, #320]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004972:	4313      	orrs	r3, r2
 8004974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00a      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004984:	4b4b      	ldr	r3, [pc, #300]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004992:	4948      	ldr	r1, [pc, #288]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004994:	4313      	orrs	r3, r2
 8004996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00a      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049a6:	4b43      	ldr	r3, [pc, #268]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b4:	493f      	ldr	r1, [pc, #252]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d028      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049c8:	4b3a      	ldr	r3, [pc, #232]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049d6:	4937      	ldr	r1, [pc, #220]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049e6:	d106      	bne.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049e8:	4b32      	ldr	r3, [pc, #200]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	4a31      	ldr	r2, [pc, #196]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049f2:	60d3      	str	r3, [r2, #12]
 80049f4:	e011      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049fe:	d10c      	bne.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3304      	adds	r3, #4
 8004a04:	2101      	movs	r1, #1
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 f8c8 	bl	8004b9c <RCCEx_PLLSAI1_Config>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a10:	7cfb      	ldrb	r3, [r7, #19]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004a16:	7cfb      	ldrb	r3, [r7, #19]
 8004a18:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d028      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a26:	4b23      	ldr	r3, [pc, #140]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a34:	491f      	ldr	r1, [pc, #124]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a44:	d106      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a46:	4b1b      	ldr	r3, [pc, #108]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	4a1a      	ldr	r2, [pc, #104]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a50:	60d3      	str	r3, [r2, #12]
 8004a52:	e011      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a5c:	d10c      	bne.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	3304      	adds	r3, #4
 8004a62:	2101      	movs	r1, #1
 8004a64:	4618      	mov	r0, r3
 8004a66:	f000 f899 	bl	8004b9c <RCCEx_PLLSAI1_Config>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a6e:	7cfb      	ldrb	r3, [r7, #19]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d001      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004a74:	7cfb      	ldrb	r3, [r7, #19]
 8004a76:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d02b      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a84:	4b0b      	ldr	r3, [pc, #44]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a92:	4908      	ldr	r1, [pc, #32]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004aa2:	d109      	bne.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aa4:	4b03      	ldr	r3, [pc, #12]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	4a02      	ldr	r2, [pc, #8]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aae:	60d3      	str	r3, [r2, #12]
 8004ab0:	e014      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004ab2:	bf00      	nop
 8004ab4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004abc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ac0:	d10c      	bne.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	3304      	adds	r3, #4
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 f867 	bl	8004b9c <RCCEx_PLLSAI1_Config>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ad2:	7cfb      	ldrb	r3, [r7, #19]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004ad8:	7cfb      	ldrb	r3, [r7, #19]
 8004ada:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d02f      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ae8:	4b2b      	ldr	r3, [pc, #172]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004af6:	4928      	ldr	r1, [pc, #160]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b06:	d10d      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	2102      	movs	r1, #2
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 f844 	bl	8004b9c <RCCEx_PLLSAI1_Config>
 8004b14:	4603      	mov	r3, r0
 8004b16:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b18:	7cfb      	ldrb	r3, [r7, #19]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d014      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b1e:	7cfb      	ldrb	r3, [r7, #19]
 8004b20:	74bb      	strb	r3, [r7, #18]
 8004b22:	e011      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b2c:	d10c      	bne.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	3320      	adds	r3, #32
 8004b32:	2102      	movs	r1, #2
 8004b34:	4618      	mov	r0, r3
 8004b36:	f000 f925 	bl	8004d84 <RCCEx_PLLSAI2_Config>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b3e:	7cfb      	ldrb	r3, [r7, #19]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d001      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b44:	7cfb      	ldrb	r3, [r7, #19]
 8004b46:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00a      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b54:	4b10      	ldr	r3, [pc, #64]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b62:	490d      	ldr	r1, [pc, #52]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00b      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b76:	4b08      	ldr	r3, [pc, #32]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b86:	4904      	ldr	r1, [pc, #16]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b8e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3718      	adds	r7, #24
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	40021000 	.word	0x40021000

08004b9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004baa:	4b75      	ldr	r3, [pc, #468]	; (8004d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	f003 0303 	and.w	r3, r3, #3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d018      	beq.n	8004be8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004bb6:	4b72      	ldr	r3, [pc, #456]	; (8004d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	f003 0203 	and.w	r2, r3, #3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d10d      	bne.n	8004be2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
       ||
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d009      	beq.n	8004be2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004bce:	4b6c      	ldr	r3, [pc, #432]	; (8004d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	091b      	lsrs	r3, r3, #4
 8004bd4:	f003 0307 	and.w	r3, r3, #7
 8004bd8:	1c5a      	adds	r2, r3, #1
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
       ||
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d047      	beq.n	8004c72 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	73fb      	strb	r3, [r7, #15]
 8004be6:	e044      	b.n	8004c72 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b03      	cmp	r3, #3
 8004bee:	d018      	beq.n	8004c22 <RCCEx_PLLSAI1_Config+0x86>
 8004bf0:	2b03      	cmp	r3, #3
 8004bf2:	d825      	bhi.n	8004c40 <RCCEx_PLLSAI1_Config+0xa4>
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d002      	beq.n	8004bfe <RCCEx_PLLSAI1_Config+0x62>
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d009      	beq.n	8004c10 <RCCEx_PLLSAI1_Config+0x74>
 8004bfc:	e020      	b.n	8004c40 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004bfe:	4b60      	ldr	r3, [pc, #384]	; (8004d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d11d      	bne.n	8004c46 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c0e:	e01a      	b.n	8004c46 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c10:	4b5b      	ldr	r3, [pc, #364]	; (8004d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d116      	bne.n	8004c4a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c20:	e013      	b.n	8004c4a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c22:	4b57      	ldr	r3, [pc, #348]	; (8004d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10f      	bne.n	8004c4e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c2e:	4b54      	ldr	r3, [pc, #336]	; (8004d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d109      	bne.n	8004c4e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c3e:	e006      	b.n	8004c4e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	73fb      	strb	r3, [r7, #15]
      break;
 8004c44:	e004      	b.n	8004c50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c46:	bf00      	nop
 8004c48:	e002      	b.n	8004c50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c4a:	bf00      	nop
 8004c4c:	e000      	b.n	8004c50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c50:	7bfb      	ldrb	r3, [r7, #15]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10d      	bne.n	8004c72 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c56:	4b4a      	ldr	r3, [pc, #296]	; (8004d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6819      	ldr	r1, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	3b01      	subs	r3, #1
 8004c68:	011b      	lsls	r3, r3, #4
 8004c6a:	430b      	orrs	r3, r1
 8004c6c:	4944      	ldr	r1, [pc, #272]	; (8004d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c72:	7bfb      	ldrb	r3, [r7, #15]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d17d      	bne.n	8004d74 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c78:	4b41      	ldr	r3, [pc, #260]	; (8004d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a40      	ldr	r2, [pc, #256]	; (8004d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c84:	f7fc ffb0 	bl	8001be8 <HAL_GetTick>
 8004c88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c8a:	e009      	b.n	8004ca0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c8c:	f7fc ffac 	bl	8001be8 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d902      	bls.n	8004ca0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	73fb      	strb	r3, [r7, #15]
        break;
 8004c9e:	e005      	b.n	8004cac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ca0:	4b37      	ldr	r3, [pc, #220]	; (8004d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1ef      	bne.n	8004c8c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d160      	bne.n	8004d74 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d111      	bne.n	8004cdc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cb8:	4b31      	ldr	r3, [pc, #196]	; (8004d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6892      	ldr	r2, [r2, #8]
 8004cc8:	0211      	lsls	r1, r2, #8
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	68d2      	ldr	r2, [r2, #12]
 8004cce:	0912      	lsrs	r2, r2, #4
 8004cd0:	0452      	lsls	r2, r2, #17
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	492a      	ldr	r1, [pc, #168]	; (8004d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	610b      	str	r3, [r1, #16]
 8004cda:	e027      	b.n	8004d2c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d112      	bne.n	8004d08 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ce2:	4b27      	ldr	r3, [pc, #156]	; (8004d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004cea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	6892      	ldr	r2, [r2, #8]
 8004cf2:	0211      	lsls	r1, r2, #8
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6912      	ldr	r2, [r2, #16]
 8004cf8:	0852      	lsrs	r2, r2, #1
 8004cfa:	3a01      	subs	r2, #1
 8004cfc:	0552      	lsls	r2, r2, #21
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	491f      	ldr	r1, [pc, #124]	; (8004d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	610b      	str	r3, [r1, #16]
 8004d06:	e011      	b.n	8004d2c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d08:	4b1d      	ldr	r3, [pc, #116]	; (8004d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004d10:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	6892      	ldr	r2, [r2, #8]
 8004d18:	0211      	lsls	r1, r2, #8
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6952      	ldr	r2, [r2, #20]
 8004d1e:	0852      	lsrs	r2, r2, #1
 8004d20:	3a01      	subs	r2, #1
 8004d22:	0652      	lsls	r2, r2, #25
 8004d24:	430a      	orrs	r2, r1
 8004d26:	4916      	ldr	r1, [pc, #88]	; (8004d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d2c:	4b14      	ldr	r3, [pc, #80]	; (8004d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a13      	ldr	r2, [pc, #76]	; (8004d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d38:	f7fc ff56 	bl	8001be8 <HAL_GetTick>
 8004d3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d3e:	e009      	b.n	8004d54 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d40:	f7fc ff52 	bl	8001be8 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d902      	bls.n	8004d54 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	73fb      	strb	r3, [r7, #15]
          break;
 8004d52:	e005      	b.n	8004d60 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d54:	4b0a      	ldr	r3, [pc, #40]	; (8004d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0ef      	beq.n	8004d40 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d106      	bne.n	8004d74 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d66:	4b06      	ldr	r3, [pc, #24]	; (8004d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d68:	691a      	ldr	r2, [r3, #16]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	4904      	ldr	r1, [pc, #16]	; (8004d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	40021000 	.word	0x40021000

08004d84 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d92:	4b6a      	ldr	r3, [pc, #424]	; (8004f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	f003 0303 	and.w	r3, r3, #3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d018      	beq.n	8004dd0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004d9e:	4b67      	ldr	r3, [pc, #412]	; (8004f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	f003 0203 	and.w	r2, r3, #3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d10d      	bne.n	8004dca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
       ||
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d009      	beq.n	8004dca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004db6:	4b61      	ldr	r3, [pc, #388]	; (8004f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	091b      	lsrs	r3, r3, #4
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	1c5a      	adds	r2, r3, #1
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
       ||
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d047      	beq.n	8004e5a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	73fb      	strb	r3, [r7, #15]
 8004dce:	e044      	b.n	8004e5a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b03      	cmp	r3, #3
 8004dd6:	d018      	beq.n	8004e0a <RCCEx_PLLSAI2_Config+0x86>
 8004dd8:	2b03      	cmp	r3, #3
 8004dda:	d825      	bhi.n	8004e28 <RCCEx_PLLSAI2_Config+0xa4>
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d002      	beq.n	8004de6 <RCCEx_PLLSAI2_Config+0x62>
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d009      	beq.n	8004df8 <RCCEx_PLLSAI2_Config+0x74>
 8004de4:	e020      	b.n	8004e28 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004de6:	4b55      	ldr	r3, [pc, #340]	; (8004f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d11d      	bne.n	8004e2e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004df6:	e01a      	b.n	8004e2e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004df8:	4b50      	ldr	r3, [pc, #320]	; (8004f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d116      	bne.n	8004e32 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e08:	e013      	b.n	8004e32 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e0a:	4b4c      	ldr	r3, [pc, #304]	; (8004f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10f      	bne.n	8004e36 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e16:	4b49      	ldr	r3, [pc, #292]	; (8004f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d109      	bne.n	8004e36 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e26:	e006      	b.n	8004e36 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e2c:	e004      	b.n	8004e38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e2e:	bf00      	nop
 8004e30:	e002      	b.n	8004e38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e32:	bf00      	nop
 8004e34:	e000      	b.n	8004e38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e36:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e38:	7bfb      	ldrb	r3, [r7, #15]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10d      	bne.n	8004e5a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e3e:	4b3f      	ldr	r3, [pc, #252]	; (8004f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6819      	ldr	r1, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	011b      	lsls	r3, r3, #4
 8004e52:	430b      	orrs	r3, r1
 8004e54:	4939      	ldr	r1, [pc, #228]	; (8004f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e5a:	7bfb      	ldrb	r3, [r7, #15]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d167      	bne.n	8004f30 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e60:	4b36      	ldr	r3, [pc, #216]	; (8004f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a35      	ldr	r2, [pc, #212]	; (8004f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e6c:	f7fc febc 	bl	8001be8 <HAL_GetTick>
 8004e70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e72:	e009      	b.n	8004e88 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e74:	f7fc feb8 	bl	8001be8 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d902      	bls.n	8004e88 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	73fb      	strb	r3, [r7, #15]
        break;
 8004e86:	e005      	b.n	8004e94 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e88:	4b2c      	ldr	r3, [pc, #176]	; (8004f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1ef      	bne.n	8004e74 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e94:	7bfb      	ldrb	r3, [r7, #15]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d14a      	bne.n	8004f30 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d111      	bne.n	8004ec4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ea0:	4b26      	ldr	r3, [pc, #152]	; (8004f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	6892      	ldr	r2, [r2, #8]
 8004eb0:	0211      	lsls	r1, r2, #8
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	68d2      	ldr	r2, [r2, #12]
 8004eb6:	0912      	lsrs	r2, r2, #4
 8004eb8:	0452      	lsls	r2, r2, #17
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	491f      	ldr	r1, [pc, #124]	; (8004f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	614b      	str	r3, [r1, #20]
 8004ec2:	e011      	b.n	8004ee8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ec4:	4b1d      	ldr	r3, [pc, #116]	; (8004f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ecc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	6892      	ldr	r2, [r2, #8]
 8004ed4:	0211      	lsls	r1, r2, #8
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	6912      	ldr	r2, [r2, #16]
 8004eda:	0852      	lsrs	r2, r2, #1
 8004edc:	3a01      	subs	r2, #1
 8004ede:	0652      	lsls	r2, r2, #25
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	4916      	ldr	r1, [pc, #88]	; (8004f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ee8:	4b14      	ldr	r3, [pc, #80]	; (8004f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a13      	ldr	r2, [pc, #76]	; (8004f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ef2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef4:	f7fc fe78 	bl	8001be8 <HAL_GetTick>
 8004ef8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004efa:	e009      	b.n	8004f10 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004efc:	f7fc fe74 	bl	8001be8 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d902      	bls.n	8004f10 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	73fb      	strb	r3, [r7, #15]
          break;
 8004f0e:	e005      	b.n	8004f1c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f10:	4b0a      	ldr	r3, [pc, #40]	; (8004f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d0ef      	beq.n	8004efc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d106      	bne.n	8004f30 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f22:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f24:	695a      	ldr	r2, [r3, #20]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	4904      	ldr	r1, [pc, #16]	; (8004f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	40021000 	.word	0x40021000

08004f40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e049      	b.n	8004fe6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d106      	bne.n	8004f6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7fc fb88 	bl	800167c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	3304      	adds	r3, #4
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4610      	mov	r0, r2
 8004f80:	f000 ffe2 	bl	8005f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	2b01      	cmp	r3, #1
 8005002:	d001      	beq.n	8005008 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e047      	b.n	8005098 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2202      	movs	r2, #2
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a23      	ldr	r2, [pc, #140]	; (80050a4 <HAL_TIM_Base_Start+0xb4>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d01d      	beq.n	8005056 <HAL_TIM_Base_Start+0x66>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005022:	d018      	beq.n	8005056 <HAL_TIM_Base_Start+0x66>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a1f      	ldr	r2, [pc, #124]	; (80050a8 <HAL_TIM_Base_Start+0xb8>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d013      	beq.n	8005056 <HAL_TIM_Base_Start+0x66>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a1e      	ldr	r2, [pc, #120]	; (80050ac <HAL_TIM_Base_Start+0xbc>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d00e      	beq.n	8005056 <HAL_TIM_Base_Start+0x66>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a1c      	ldr	r2, [pc, #112]	; (80050b0 <HAL_TIM_Base_Start+0xc0>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d009      	beq.n	8005056 <HAL_TIM_Base_Start+0x66>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a1b      	ldr	r2, [pc, #108]	; (80050b4 <HAL_TIM_Base_Start+0xc4>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d004      	beq.n	8005056 <HAL_TIM_Base_Start+0x66>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a19      	ldr	r2, [pc, #100]	; (80050b8 <HAL_TIM_Base_Start+0xc8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d115      	bne.n	8005082 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	4b17      	ldr	r3, [pc, #92]	; (80050bc <HAL_TIM_Base_Start+0xcc>)
 800505e:	4013      	ands	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2b06      	cmp	r3, #6
 8005066:	d015      	beq.n	8005094 <HAL_TIM_Base_Start+0xa4>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800506e:	d011      	beq.n	8005094 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f042 0201 	orr.w	r2, r2, #1
 800507e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005080:	e008      	b.n	8005094 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f042 0201 	orr.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	e000      	b.n	8005096 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005094:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	40012c00 	.word	0x40012c00
 80050a8:	40000400 	.word	0x40000400
 80050ac:	40000800 	.word	0x40000800
 80050b0:	40000c00 	.word	0x40000c00
 80050b4:	40013400 	.word	0x40013400
 80050b8:	40014000 	.word	0x40014000
 80050bc:	00010007 	.word	0x00010007

080050c0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6a1a      	ldr	r2, [r3, #32]
 80050ce:	f241 1311 	movw	r3, #4369	; 0x1111
 80050d2:	4013      	ands	r3, r2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10f      	bne.n	80050f8 <HAL_TIM_Base_Stop+0x38>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6a1a      	ldr	r2, [r3, #32]
 80050de:	f240 4344 	movw	r3, #1092	; 0x444
 80050e2:	4013      	ands	r3, r2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d107      	bne.n	80050f8 <HAL_TIM_Base_Stop+0x38>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0201 	bic.w	r2, r2, #1
 80050f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
	...

08005110 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b01      	cmp	r3, #1
 8005122:	d001      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e04f      	b.n	80051c8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68da      	ldr	r2, [r3, #12]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0201 	orr.w	r2, r2, #1
 800513e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a23      	ldr	r2, [pc, #140]	; (80051d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d01d      	beq.n	8005186 <HAL_TIM_Base_Start_IT+0x76>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005152:	d018      	beq.n	8005186 <HAL_TIM_Base_Start_IT+0x76>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a1f      	ldr	r2, [pc, #124]	; (80051d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d013      	beq.n	8005186 <HAL_TIM_Base_Start_IT+0x76>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a1e      	ldr	r2, [pc, #120]	; (80051dc <HAL_TIM_Base_Start_IT+0xcc>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d00e      	beq.n	8005186 <HAL_TIM_Base_Start_IT+0x76>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a1c      	ldr	r2, [pc, #112]	; (80051e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d009      	beq.n	8005186 <HAL_TIM_Base_Start_IT+0x76>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a1b      	ldr	r2, [pc, #108]	; (80051e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d004      	beq.n	8005186 <HAL_TIM_Base_Start_IT+0x76>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a19      	ldr	r2, [pc, #100]	; (80051e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d115      	bne.n	80051b2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	689a      	ldr	r2, [r3, #8]
 800518c:	4b17      	ldr	r3, [pc, #92]	; (80051ec <HAL_TIM_Base_Start_IT+0xdc>)
 800518e:	4013      	ands	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2b06      	cmp	r3, #6
 8005196:	d015      	beq.n	80051c4 <HAL_TIM_Base_Start_IT+0xb4>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800519e:	d011      	beq.n	80051c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f042 0201 	orr.w	r2, r2, #1
 80051ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051b0:	e008      	b.n	80051c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f042 0201 	orr.w	r2, r2, #1
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	e000      	b.n	80051c6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3714      	adds	r7, #20
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	40012c00 	.word	0x40012c00
 80051d8:	40000400 	.word	0x40000400
 80051dc:	40000800 	.word	0x40000800
 80051e0:	40000c00 	.word	0x40000c00
 80051e4:	40013400 	.word	0x40013400
 80051e8:	40014000 	.word	0x40014000
 80051ec:	00010007 	.word	0x00010007

080051f0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68da      	ldr	r2, [r3, #12]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 0201 	bic.w	r2, r2, #1
 8005206:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6a1a      	ldr	r2, [r3, #32]
 800520e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005212:	4013      	ands	r3, r2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10f      	bne.n	8005238 <HAL_TIM_Base_Stop_IT+0x48>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6a1a      	ldr	r2, [r3, #32]
 800521e:	f240 4344 	movw	r3, #1092	; 0x444
 8005222:	4013      	ands	r3, r2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d107      	bne.n	8005238 <HAL_TIM_Base_Stop_IT+0x48>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f022 0201 	bic.w	r2, r2, #1
 8005236:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b082      	sub	sp, #8
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e049      	b.n	80052f4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b00      	cmp	r3, #0
 800526a:	d106      	bne.n	800527a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f7fc f9c7 	bl	8001608 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2202      	movs	r2, #2
 800527e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	3304      	adds	r3, #4
 800528a:	4619      	mov	r1, r3
 800528c:	4610      	mov	r0, r2
 800528e:	f000 fe5b 	bl	8005f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3708      	adds	r7, #8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d109      	bne.n	8005320 <HAL_TIM_PWM_Start+0x24>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b01      	cmp	r3, #1
 8005316:	bf14      	ite	ne
 8005318:	2301      	movne	r3, #1
 800531a:	2300      	moveq	r3, #0
 800531c:	b2db      	uxtb	r3, r3
 800531e:	e03c      	b.n	800539a <HAL_TIM_PWM_Start+0x9e>
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	2b04      	cmp	r3, #4
 8005324:	d109      	bne.n	800533a <HAL_TIM_PWM_Start+0x3e>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b01      	cmp	r3, #1
 8005330:	bf14      	ite	ne
 8005332:	2301      	movne	r3, #1
 8005334:	2300      	moveq	r3, #0
 8005336:	b2db      	uxtb	r3, r3
 8005338:	e02f      	b.n	800539a <HAL_TIM_PWM_Start+0x9e>
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b08      	cmp	r3, #8
 800533e:	d109      	bne.n	8005354 <HAL_TIM_PWM_Start+0x58>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b01      	cmp	r3, #1
 800534a:	bf14      	ite	ne
 800534c:	2301      	movne	r3, #1
 800534e:	2300      	moveq	r3, #0
 8005350:	b2db      	uxtb	r3, r3
 8005352:	e022      	b.n	800539a <HAL_TIM_PWM_Start+0x9e>
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	2b0c      	cmp	r3, #12
 8005358:	d109      	bne.n	800536e <HAL_TIM_PWM_Start+0x72>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b01      	cmp	r3, #1
 8005364:	bf14      	ite	ne
 8005366:	2301      	movne	r3, #1
 8005368:	2300      	moveq	r3, #0
 800536a:	b2db      	uxtb	r3, r3
 800536c:	e015      	b.n	800539a <HAL_TIM_PWM_Start+0x9e>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	2b10      	cmp	r3, #16
 8005372:	d109      	bne.n	8005388 <HAL_TIM_PWM_Start+0x8c>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b01      	cmp	r3, #1
 800537e:	bf14      	ite	ne
 8005380:	2301      	movne	r3, #1
 8005382:	2300      	moveq	r3, #0
 8005384:	b2db      	uxtb	r3, r3
 8005386:	e008      	b.n	800539a <HAL_TIM_PWM_Start+0x9e>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2b01      	cmp	r3, #1
 8005392:	bf14      	ite	ne
 8005394:	2301      	movne	r3, #1
 8005396:	2300      	moveq	r3, #0
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e09c      	b.n	80054dc <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d104      	bne.n	80053b2 <HAL_TIM_PWM_Start+0xb6>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2202      	movs	r2, #2
 80053ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053b0:	e023      	b.n	80053fa <HAL_TIM_PWM_Start+0xfe>
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b04      	cmp	r3, #4
 80053b6:	d104      	bne.n	80053c2 <HAL_TIM_PWM_Start+0xc6>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2202      	movs	r2, #2
 80053bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053c0:	e01b      	b.n	80053fa <HAL_TIM_PWM_Start+0xfe>
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2b08      	cmp	r3, #8
 80053c6:	d104      	bne.n	80053d2 <HAL_TIM_PWM_Start+0xd6>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053d0:	e013      	b.n	80053fa <HAL_TIM_PWM_Start+0xfe>
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2b0c      	cmp	r3, #12
 80053d6:	d104      	bne.n	80053e2 <HAL_TIM_PWM_Start+0xe6>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2202      	movs	r2, #2
 80053dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053e0:	e00b      	b.n	80053fa <HAL_TIM_PWM_Start+0xfe>
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	2b10      	cmp	r3, #16
 80053e6:	d104      	bne.n	80053f2 <HAL_TIM_PWM_Start+0xf6>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053f0:	e003      	b.n	80053fa <HAL_TIM_PWM_Start+0xfe>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2202      	movs	r2, #2
 80053f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2201      	movs	r2, #1
 8005400:	6839      	ldr	r1, [r7, #0]
 8005402:	4618      	mov	r0, r3
 8005404:	f001 f910 	bl	8006628 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a35      	ldr	r2, [pc, #212]	; (80054e4 <HAL_TIM_PWM_Start+0x1e8>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d013      	beq.n	800543a <HAL_TIM_PWM_Start+0x13e>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a34      	ldr	r2, [pc, #208]	; (80054e8 <HAL_TIM_PWM_Start+0x1ec>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d00e      	beq.n	800543a <HAL_TIM_PWM_Start+0x13e>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a32      	ldr	r2, [pc, #200]	; (80054ec <HAL_TIM_PWM_Start+0x1f0>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d009      	beq.n	800543a <HAL_TIM_PWM_Start+0x13e>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a31      	ldr	r2, [pc, #196]	; (80054f0 <HAL_TIM_PWM_Start+0x1f4>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d004      	beq.n	800543a <HAL_TIM_PWM_Start+0x13e>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a2f      	ldr	r2, [pc, #188]	; (80054f4 <HAL_TIM_PWM_Start+0x1f8>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d101      	bne.n	800543e <HAL_TIM_PWM_Start+0x142>
 800543a:	2301      	movs	r3, #1
 800543c:	e000      	b.n	8005440 <HAL_TIM_PWM_Start+0x144>
 800543e:	2300      	movs	r3, #0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d007      	beq.n	8005454 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005452:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a22      	ldr	r2, [pc, #136]	; (80054e4 <HAL_TIM_PWM_Start+0x1e8>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d01d      	beq.n	800549a <HAL_TIM_PWM_Start+0x19e>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005466:	d018      	beq.n	800549a <HAL_TIM_PWM_Start+0x19e>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a22      	ldr	r2, [pc, #136]	; (80054f8 <HAL_TIM_PWM_Start+0x1fc>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d013      	beq.n	800549a <HAL_TIM_PWM_Start+0x19e>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a21      	ldr	r2, [pc, #132]	; (80054fc <HAL_TIM_PWM_Start+0x200>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d00e      	beq.n	800549a <HAL_TIM_PWM_Start+0x19e>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a1f      	ldr	r2, [pc, #124]	; (8005500 <HAL_TIM_PWM_Start+0x204>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d009      	beq.n	800549a <HAL_TIM_PWM_Start+0x19e>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a17      	ldr	r2, [pc, #92]	; (80054e8 <HAL_TIM_PWM_Start+0x1ec>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d004      	beq.n	800549a <HAL_TIM_PWM_Start+0x19e>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a15      	ldr	r2, [pc, #84]	; (80054ec <HAL_TIM_PWM_Start+0x1f0>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d115      	bne.n	80054c6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	4b18      	ldr	r3, [pc, #96]	; (8005504 <HAL_TIM_PWM_Start+0x208>)
 80054a2:	4013      	ands	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2b06      	cmp	r3, #6
 80054aa:	d015      	beq.n	80054d8 <HAL_TIM_PWM_Start+0x1dc>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054b2:	d011      	beq.n	80054d8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f042 0201 	orr.w	r2, r2, #1
 80054c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c4:	e008      	b.n	80054d8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f042 0201 	orr.w	r2, r2, #1
 80054d4:	601a      	str	r2, [r3, #0]
 80054d6:	e000      	b.n	80054da <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	40012c00 	.word	0x40012c00
 80054e8:	40013400 	.word	0x40013400
 80054ec:	40014000 	.word	0x40014000
 80054f0:	40014400 	.word	0x40014400
 80054f4:	40014800 	.word	0x40014800
 80054f8:	40000400 	.word	0x40000400
 80054fc:	40000800 	.word	0x40000800
 8005500:	40000c00 	.word	0x40000c00
 8005504:	00010007 	.word	0x00010007

08005508 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2200      	movs	r2, #0
 8005518:	6839      	ldr	r1, [r7, #0]
 800551a:	4618      	mov	r0, r3
 800551c:	f001 f884 	bl	8006628 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a3e      	ldr	r2, [pc, #248]	; (8005620 <HAL_TIM_PWM_Stop+0x118>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d013      	beq.n	8005552 <HAL_TIM_PWM_Stop+0x4a>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a3d      	ldr	r2, [pc, #244]	; (8005624 <HAL_TIM_PWM_Stop+0x11c>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d00e      	beq.n	8005552 <HAL_TIM_PWM_Stop+0x4a>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a3b      	ldr	r2, [pc, #236]	; (8005628 <HAL_TIM_PWM_Stop+0x120>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d009      	beq.n	8005552 <HAL_TIM_PWM_Stop+0x4a>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a3a      	ldr	r2, [pc, #232]	; (800562c <HAL_TIM_PWM_Stop+0x124>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d004      	beq.n	8005552 <HAL_TIM_PWM_Stop+0x4a>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a38      	ldr	r2, [pc, #224]	; (8005630 <HAL_TIM_PWM_Stop+0x128>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d101      	bne.n	8005556 <HAL_TIM_PWM_Stop+0x4e>
 8005552:	2301      	movs	r3, #1
 8005554:	e000      	b.n	8005558 <HAL_TIM_PWM_Stop+0x50>
 8005556:	2300      	movs	r3, #0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d017      	beq.n	800558c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6a1a      	ldr	r2, [r3, #32]
 8005562:	f241 1311 	movw	r3, #4369	; 0x1111
 8005566:	4013      	ands	r3, r2
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10f      	bne.n	800558c <HAL_TIM_PWM_Stop+0x84>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6a1a      	ldr	r2, [r3, #32]
 8005572:	f240 4344 	movw	r3, #1092	; 0x444
 8005576:	4013      	ands	r3, r2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d107      	bne.n	800558c <HAL_TIM_PWM_Stop+0x84>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800558a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6a1a      	ldr	r2, [r3, #32]
 8005592:	f241 1311 	movw	r3, #4369	; 0x1111
 8005596:	4013      	ands	r3, r2
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10f      	bne.n	80055bc <HAL_TIM_PWM_Stop+0xb4>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6a1a      	ldr	r2, [r3, #32]
 80055a2:	f240 4344 	movw	r3, #1092	; 0x444
 80055a6:	4013      	ands	r3, r2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d107      	bne.n	80055bc <HAL_TIM_PWM_Stop+0xb4>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f022 0201 	bic.w	r2, r2, #1
 80055ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d104      	bne.n	80055cc <HAL_TIM_PWM_Stop+0xc4>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055ca:	e023      	b.n	8005614 <HAL_TIM_PWM_Stop+0x10c>
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	2b04      	cmp	r3, #4
 80055d0:	d104      	bne.n	80055dc <HAL_TIM_PWM_Stop+0xd4>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055da:	e01b      	b.n	8005614 <HAL_TIM_PWM_Stop+0x10c>
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	2b08      	cmp	r3, #8
 80055e0:	d104      	bne.n	80055ec <HAL_TIM_PWM_Stop+0xe4>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055ea:	e013      	b.n	8005614 <HAL_TIM_PWM_Stop+0x10c>
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	2b0c      	cmp	r3, #12
 80055f0:	d104      	bne.n	80055fc <HAL_TIM_PWM_Stop+0xf4>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055fa:	e00b      	b.n	8005614 <HAL_TIM_PWM_Stop+0x10c>
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	2b10      	cmp	r3, #16
 8005600:	d104      	bne.n	800560c <HAL_TIM_PWM_Stop+0x104>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800560a:	e003      	b.n	8005614 <HAL_TIM_PWM_Stop+0x10c>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	40012c00 	.word	0x40012c00
 8005624:	40013400 	.word	0x40013400
 8005628:	40014000 	.word	0x40014000
 800562c:	40014400 	.word	0x40014400
 8005630:	40014800 	.word	0x40014800

08005634 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d109      	bne.n	800565c <HAL_TIM_PWM_Start_IT+0x28>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b01      	cmp	r3, #1
 8005652:	bf14      	ite	ne
 8005654:	2301      	movne	r3, #1
 8005656:	2300      	moveq	r3, #0
 8005658:	b2db      	uxtb	r3, r3
 800565a:	e03c      	b.n	80056d6 <HAL_TIM_PWM_Start_IT+0xa2>
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	2b04      	cmp	r3, #4
 8005660:	d109      	bne.n	8005676 <HAL_TIM_PWM_Start_IT+0x42>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b01      	cmp	r3, #1
 800566c:	bf14      	ite	ne
 800566e:	2301      	movne	r3, #1
 8005670:	2300      	moveq	r3, #0
 8005672:	b2db      	uxtb	r3, r3
 8005674:	e02f      	b.n	80056d6 <HAL_TIM_PWM_Start_IT+0xa2>
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b08      	cmp	r3, #8
 800567a:	d109      	bne.n	8005690 <HAL_TIM_PWM_Start_IT+0x5c>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b01      	cmp	r3, #1
 8005686:	bf14      	ite	ne
 8005688:	2301      	movne	r3, #1
 800568a:	2300      	moveq	r3, #0
 800568c:	b2db      	uxtb	r3, r3
 800568e:	e022      	b.n	80056d6 <HAL_TIM_PWM_Start_IT+0xa2>
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	2b0c      	cmp	r3, #12
 8005694:	d109      	bne.n	80056aa <HAL_TIM_PWM_Start_IT+0x76>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b01      	cmp	r3, #1
 80056a0:	bf14      	ite	ne
 80056a2:	2301      	movne	r3, #1
 80056a4:	2300      	moveq	r3, #0
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	e015      	b.n	80056d6 <HAL_TIM_PWM_Start_IT+0xa2>
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	2b10      	cmp	r3, #16
 80056ae:	d109      	bne.n	80056c4 <HAL_TIM_PWM_Start_IT+0x90>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	bf14      	ite	ne
 80056bc:	2301      	movne	r3, #1
 80056be:	2300      	moveq	r3, #0
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	e008      	b.n	80056d6 <HAL_TIM_PWM_Start_IT+0xa2>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	bf14      	ite	ne
 80056d0:	2301      	movne	r3, #1
 80056d2:	2300      	moveq	r3, #0
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e0e7      	b.n	80058ae <HAL_TIM_PWM_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d104      	bne.n	80056ee <HAL_TIM_PWM_Start_IT+0xba>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056ec:	e023      	b.n	8005736 <HAL_TIM_PWM_Start_IT+0x102>
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b04      	cmp	r3, #4
 80056f2:	d104      	bne.n	80056fe <HAL_TIM_PWM_Start_IT+0xca>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2202      	movs	r2, #2
 80056f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056fc:	e01b      	b.n	8005736 <HAL_TIM_PWM_Start_IT+0x102>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	2b08      	cmp	r3, #8
 8005702:	d104      	bne.n	800570e <HAL_TIM_PWM_Start_IT+0xda>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2202      	movs	r2, #2
 8005708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800570c:	e013      	b.n	8005736 <HAL_TIM_PWM_Start_IT+0x102>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b0c      	cmp	r3, #12
 8005712:	d104      	bne.n	800571e <HAL_TIM_PWM_Start_IT+0xea>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2202      	movs	r2, #2
 8005718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800571c:	e00b      	b.n	8005736 <HAL_TIM_PWM_Start_IT+0x102>
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b10      	cmp	r3, #16
 8005722:	d104      	bne.n	800572e <HAL_TIM_PWM_Start_IT+0xfa>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800572c:	e003      	b.n	8005736 <HAL_TIM_PWM_Start_IT+0x102>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2202      	movs	r2, #2
 8005732:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b0c      	cmp	r3, #12
 800573a:	d841      	bhi.n	80057c0 <HAL_TIM_PWM_Start_IT+0x18c>
 800573c:	a201      	add	r2, pc, #4	; (adr r2, 8005744 <HAL_TIM_PWM_Start_IT+0x110>)
 800573e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005742:	bf00      	nop
 8005744:	08005779 	.word	0x08005779
 8005748:	080057c1 	.word	0x080057c1
 800574c:	080057c1 	.word	0x080057c1
 8005750:	080057c1 	.word	0x080057c1
 8005754:	0800578b 	.word	0x0800578b
 8005758:	080057c1 	.word	0x080057c1
 800575c:	080057c1 	.word	0x080057c1
 8005760:	080057c1 	.word	0x080057c1
 8005764:	0800579d 	.word	0x0800579d
 8005768:	080057c1 	.word	0x080057c1
 800576c:	080057c1 	.word	0x080057c1
 8005770:	080057c1 	.word	0x080057c1
 8005774:	080057af 	.word	0x080057af
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68da      	ldr	r2, [r3, #12]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f042 0202 	orr.w	r2, r2, #2
 8005786:	60da      	str	r2, [r3, #12]
      break;
 8005788:	e01d      	b.n	80057c6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68da      	ldr	r2, [r3, #12]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f042 0204 	orr.w	r2, r2, #4
 8005798:	60da      	str	r2, [r3, #12]
      break;
 800579a:	e014      	b.n	80057c6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68da      	ldr	r2, [r3, #12]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f042 0208 	orr.w	r2, r2, #8
 80057aa:	60da      	str	r2, [r3, #12]
      break;
 80057ac:	e00b      	b.n	80057c6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68da      	ldr	r2, [r3, #12]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f042 0210 	orr.w	r2, r2, #16
 80057bc:	60da      	str	r2, [r3, #12]
      break;
 80057be:	e002      	b.n	80057c6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	73fb      	strb	r3, [r7, #15]
      break;
 80057c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80057c6:	7bfb      	ldrb	r3, [r7, #15]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d16f      	bne.n	80058ac <HAL_TIM_PWM_Start_IT+0x278>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2201      	movs	r2, #1
 80057d2:	6839      	ldr	r1, [r7, #0]
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 ff27 	bl	8006628 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a36      	ldr	r2, [pc, #216]	; (80058b8 <HAL_TIM_PWM_Start_IT+0x284>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d013      	beq.n	800580c <HAL_TIM_PWM_Start_IT+0x1d8>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a34      	ldr	r2, [pc, #208]	; (80058bc <HAL_TIM_PWM_Start_IT+0x288>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d00e      	beq.n	800580c <HAL_TIM_PWM_Start_IT+0x1d8>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a33      	ldr	r2, [pc, #204]	; (80058c0 <HAL_TIM_PWM_Start_IT+0x28c>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d009      	beq.n	800580c <HAL_TIM_PWM_Start_IT+0x1d8>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a31      	ldr	r2, [pc, #196]	; (80058c4 <HAL_TIM_PWM_Start_IT+0x290>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d004      	beq.n	800580c <HAL_TIM_PWM_Start_IT+0x1d8>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a30      	ldr	r2, [pc, #192]	; (80058c8 <HAL_TIM_PWM_Start_IT+0x294>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d101      	bne.n	8005810 <HAL_TIM_PWM_Start_IT+0x1dc>
 800580c:	2301      	movs	r3, #1
 800580e:	e000      	b.n	8005812 <HAL_TIM_PWM_Start_IT+0x1de>
 8005810:	2300      	movs	r3, #0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d007      	beq.n	8005826 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005824:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a23      	ldr	r2, [pc, #140]	; (80058b8 <HAL_TIM_PWM_Start_IT+0x284>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d01d      	beq.n	800586c <HAL_TIM_PWM_Start_IT+0x238>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005838:	d018      	beq.n	800586c <HAL_TIM_PWM_Start_IT+0x238>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a23      	ldr	r2, [pc, #140]	; (80058cc <HAL_TIM_PWM_Start_IT+0x298>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d013      	beq.n	800586c <HAL_TIM_PWM_Start_IT+0x238>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a21      	ldr	r2, [pc, #132]	; (80058d0 <HAL_TIM_PWM_Start_IT+0x29c>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d00e      	beq.n	800586c <HAL_TIM_PWM_Start_IT+0x238>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a20      	ldr	r2, [pc, #128]	; (80058d4 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d009      	beq.n	800586c <HAL_TIM_PWM_Start_IT+0x238>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a17      	ldr	r2, [pc, #92]	; (80058bc <HAL_TIM_PWM_Start_IT+0x288>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d004      	beq.n	800586c <HAL_TIM_PWM_Start_IT+0x238>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a16      	ldr	r2, [pc, #88]	; (80058c0 <HAL_TIM_PWM_Start_IT+0x28c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d115      	bne.n	8005898 <HAL_TIM_PWM_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689a      	ldr	r2, [r3, #8]
 8005872:	4b19      	ldr	r3, [pc, #100]	; (80058d8 <HAL_TIM_PWM_Start_IT+0x2a4>)
 8005874:	4013      	ands	r3, r2
 8005876:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2b06      	cmp	r3, #6
 800587c:	d015      	beq.n	80058aa <HAL_TIM_PWM_Start_IT+0x276>
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005884:	d011      	beq.n	80058aa <HAL_TIM_PWM_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f042 0201 	orr.w	r2, r2, #1
 8005894:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005896:	e008      	b.n	80058aa <HAL_TIM_PWM_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f042 0201 	orr.w	r2, r2, #1
 80058a6:	601a      	str	r2, [r3, #0]
 80058a8:	e000      	b.n	80058ac <HAL_TIM_PWM_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058aa:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80058ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	40012c00 	.word	0x40012c00
 80058bc:	40013400 	.word	0x40013400
 80058c0:	40014000 	.word	0x40014000
 80058c4:	40014400 	.word	0x40014400
 80058c8:	40014800 	.word	0x40014800
 80058cc:	40000400 	.word	0x40000400
 80058d0:	40000800 	.word	0x40000800
 80058d4:	40000c00 	.word	0x40000c00
 80058d8:	00010007 	.word	0x00010007

080058dc <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058e6:	2300      	movs	r3, #0
 80058e8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b0c      	cmp	r3, #12
 80058ee:	d841      	bhi.n	8005974 <HAL_TIM_PWM_Stop_IT+0x98>
 80058f0:	a201      	add	r2, pc, #4	; (adr r2, 80058f8 <HAL_TIM_PWM_Stop_IT+0x1c>)
 80058f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f6:	bf00      	nop
 80058f8:	0800592d 	.word	0x0800592d
 80058fc:	08005975 	.word	0x08005975
 8005900:	08005975 	.word	0x08005975
 8005904:	08005975 	.word	0x08005975
 8005908:	0800593f 	.word	0x0800593f
 800590c:	08005975 	.word	0x08005975
 8005910:	08005975 	.word	0x08005975
 8005914:	08005975 	.word	0x08005975
 8005918:	08005951 	.word	0x08005951
 800591c:	08005975 	.word	0x08005975
 8005920:	08005975 	.word	0x08005975
 8005924:	08005975 	.word	0x08005975
 8005928:	08005963 	.word	0x08005963
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68da      	ldr	r2, [r3, #12]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f022 0202 	bic.w	r2, r2, #2
 800593a:	60da      	str	r2, [r3, #12]
      break;
 800593c:	e01d      	b.n	800597a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68da      	ldr	r2, [r3, #12]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 0204 	bic.w	r2, r2, #4
 800594c:	60da      	str	r2, [r3, #12]
      break;
 800594e:	e014      	b.n	800597a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68da      	ldr	r2, [r3, #12]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 0208 	bic.w	r2, r2, #8
 800595e:	60da      	str	r2, [r3, #12]
      break;
 8005960:	e00b      	b.n	800597a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68da      	ldr	r2, [r3, #12]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f022 0210 	bic.w	r2, r2, #16
 8005970:	60da      	str	r2, [r3, #12]
      break;
 8005972:	e002      	b.n	800597a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	73fb      	strb	r3, [r7, #15]
      break;
 8005978:	bf00      	nop
  }

  if (status == HAL_OK)
 800597a:	7bfb      	ldrb	r3, [r7, #15]
 800597c:	2b00      	cmp	r3, #0
 800597e:	f040 8081 	bne.w	8005a84 <HAL_TIM_PWM_Stop_IT+0x1a8>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2200      	movs	r2, #0
 8005988:	6839      	ldr	r1, [r7, #0]
 800598a:	4618      	mov	r0, r3
 800598c:	f000 fe4c 	bl	8006628 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a3e      	ldr	r2, [pc, #248]	; (8005a90 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d013      	beq.n	80059c2 <HAL_TIM_PWM_Stop_IT+0xe6>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a3d      	ldr	r2, [pc, #244]	; (8005a94 <HAL_TIM_PWM_Stop_IT+0x1b8>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00e      	beq.n	80059c2 <HAL_TIM_PWM_Stop_IT+0xe6>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a3b      	ldr	r2, [pc, #236]	; (8005a98 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d009      	beq.n	80059c2 <HAL_TIM_PWM_Stop_IT+0xe6>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a3a      	ldr	r2, [pc, #232]	; (8005a9c <HAL_TIM_PWM_Stop_IT+0x1c0>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d004      	beq.n	80059c2 <HAL_TIM_PWM_Stop_IT+0xe6>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a38      	ldr	r2, [pc, #224]	; (8005aa0 <HAL_TIM_PWM_Stop_IT+0x1c4>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d101      	bne.n	80059c6 <HAL_TIM_PWM_Stop_IT+0xea>
 80059c2:	2301      	movs	r3, #1
 80059c4:	e000      	b.n	80059c8 <HAL_TIM_PWM_Stop_IT+0xec>
 80059c6:	2300      	movs	r3, #0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d017      	beq.n	80059fc <HAL_TIM_PWM_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6a1a      	ldr	r2, [r3, #32]
 80059d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80059d6:	4013      	ands	r3, r2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10f      	bne.n	80059fc <HAL_TIM_PWM_Stop_IT+0x120>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6a1a      	ldr	r2, [r3, #32]
 80059e2:	f240 4344 	movw	r3, #1092	; 0x444
 80059e6:	4013      	ands	r3, r2
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d107      	bne.n	80059fc <HAL_TIM_PWM_Stop_IT+0x120>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059fa:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6a1a      	ldr	r2, [r3, #32]
 8005a02:	f241 1311 	movw	r3, #4369	; 0x1111
 8005a06:	4013      	ands	r3, r2
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10f      	bne.n	8005a2c <HAL_TIM_PWM_Stop_IT+0x150>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6a1a      	ldr	r2, [r3, #32]
 8005a12:	f240 4344 	movw	r3, #1092	; 0x444
 8005a16:	4013      	ands	r3, r2
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d107      	bne.n	8005a2c <HAL_TIM_PWM_Stop_IT+0x150>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f022 0201 	bic.w	r2, r2, #1
 8005a2a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d104      	bne.n	8005a3c <HAL_TIM_PWM_Stop_IT+0x160>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a3a:	e023      	b.n	8005a84 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	d104      	bne.n	8005a4c <HAL_TIM_PWM_Stop_IT+0x170>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a4a:	e01b      	b.n	8005a84 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	2b08      	cmp	r3, #8
 8005a50:	d104      	bne.n	8005a5c <HAL_TIM_PWM_Stop_IT+0x180>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a5a:	e013      	b.n	8005a84 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	2b0c      	cmp	r3, #12
 8005a60:	d104      	bne.n	8005a6c <HAL_TIM_PWM_Stop_IT+0x190>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a6a:	e00b      	b.n	8005a84 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	2b10      	cmp	r3, #16
 8005a70:	d104      	bne.n	8005a7c <HAL_TIM_PWM_Stop_IT+0x1a0>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a7a:	e003      	b.n	8005a84 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8005a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	40012c00 	.word	0x40012c00
 8005a94:	40013400 	.word	0x40013400
 8005a98:	40014000 	.word	0x40014000
 8005a9c:	40014400 	.word	0x40014400
 8005aa0:	40014800 	.word	0x40014800

08005aa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d122      	bne.n	8005b00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d11b      	bne.n	8005b00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f06f 0202 	mvn.w	r2, #2
 8005ad0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	f003 0303 	and.w	r3, r3, #3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fa1a 	bl	8005f20 <HAL_TIM_IC_CaptureCallback>
 8005aec:	e005      	b.n	8005afa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fa0c 	bl	8005f0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f7fb f9a7 	bl	8000e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	f003 0304 	and.w	r3, r3, #4
 8005b0a:	2b04      	cmp	r3, #4
 8005b0c:	d122      	bne.n	8005b54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	f003 0304 	and.w	r3, r3, #4
 8005b18:	2b04      	cmp	r3, #4
 8005b1a:	d11b      	bne.n	8005b54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f06f 0204 	mvn.w	r2, #4
 8005b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2202      	movs	r2, #2
 8005b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f9f0 	bl	8005f20 <HAL_TIM_IC_CaptureCallback>
 8005b40:	e005      	b.n	8005b4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f9e2 	bl	8005f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f7fb f97d 	bl	8000e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	f003 0308 	and.w	r3, r3, #8
 8005b5e:	2b08      	cmp	r3, #8
 8005b60:	d122      	bne.n	8005ba8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	f003 0308 	and.w	r3, r3, #8
 8005b6c:	2b08      	cmp	r3, #8
 8005b6e:	d11b      	bne.n	8005ba8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f06f 0208 	mvn.w	r2, #8
 8005b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2204      	movs	r2, #4
 8005b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	f003 0303 	and.w	r3, r3, #3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f9c6 	bl	8005f20 <HAL_TIM_IC_CaptureCallback>
 8005b94:	e005      	b.n	8005ba2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f9b8 	bl	8005f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f7fb f953 	bl	8000e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	f003 0310 	and.w	r3, r3, #16
 8005bb2:	2b10      	cmp	r3, #16
 8005bb4:	d122      	bne.n	8005bfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	f003 0310 	and.w	r3, r3, #16
 8005bc0:	2b10      	cmp	r3, #16
 8005bc2:	d11b      	bne.n	8005bfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f06f 0210 	mvn.w	r2, #16
 8005bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2208      	movs	r2, #8
 8005bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	69db      	ldr	r3, [r3, #28]
 8005bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f99c 	bl	8005f20 <HAL_TIM_IC_CaptureCallback>
 8005be8:	e005      	b.n	8005bf6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 f98e 	bl	8005f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f7fb f929 	bl	8000e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d10e      	bne.n	8005c28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d107      	bne.n	8005c28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f06f 0201 	mvn.w	r2, #1
 8005c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7fb f8d6 	bl	8000dd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c32:	2b80      	cmp	r3, #128	; 0x80
 8005c34:	d10e      	bne.n	8005c54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c40:	2b80      	cmp	r3, #128	; 0x80
 8005c42:	d107      	bne.n	8005c54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 fda2 	bl	8006798 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c62:	d10e      	bne.n	8005c82 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c6e:	2b80      	cmp	r3, #128	; 0x80
 8005c70:	d107      	bne.n	8005c82 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 fd95 	bl	80067ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8c:	2b40      	cmp	r3, #64	; 0x40
 8005c8e:	d10e      	bne.n	8005cae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9a:	2b40      	cmp	r3, #64	; 0x40
 8005c9c:	d107      	bne.n	8005cae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f943 	bl	8005f34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	f003 0320 	and.w	r3, r3, #32
 8005cb8:	2b20      	cmp	r3, #32
 8005cba:	d10e      	bne.n	8005cda <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f003 0320 	and.w	r3, r3, #32
 8005cc6:	2b20      	cmp	r3, #32
 8005cc8:	d107      	bne.n	8005cda <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f06f 0220 	mvn.w	r2, #32
 8005cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 fd55 	bl	8006784 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cda:	bf00      	nop
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
	...

08005ce4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d101      	bne.n	8005d02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005cfe:	2302      	movs	r3, #2
 8005d00:	e0ff      	b.n	8005f02 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b14      	cmp	r3, #20
 8005d0e:	f200 80f0 	bhi.w	8005ef2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005d12:	a201      	add	r2, pc, #4	; (adr r2, 8005d18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d18:	08005d6d 	.word	0x08005d6d
 8005d1c:	08005ef3 	.word	0x08005ef3
 8005d20:	08005ef3 	.word	0x08005ef3
 8005d24:	08005ef3 	.word	0x08005ef3
 8005d28:	08005dad 	.word	0x08005dad
 8005d2c:	08005ef3 	.word	0x08005ef3
 8005d30:	08005ef3 	.word	0x08005ef3
 8005d34:	08005ef3 	.word	0x08005ef3
 8005d38:	08005def 	.word	0x08005def
 8005d3c:	08005ef3 	.word	0x08005ef3
 8005d40:	08005ef3 	.word	0x08005ef3
 8005d44:	08005ef3 	.word	0x08005ef3
 8005d48:	08005e2f 	.word	0x08005e2f
 8005d4c:	08005ef3 	.word	0x08005ef3
 8005d50:	08005ef3 	.word	0x08005ef3
 8005d54:	08005ef3 	.word	0x08005ef3
 8005d58:	08005e71 	.word	0x08005e71
 8005d5c:	08005ef3 	.word	0x08005ef3
 8005d60:	08005ef3 	.word	0x08005ef3
 8005d64:	08005ef3 	.word	0x08005ef3
 8005d68:	08005eb1 	.word	0x08005eb1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68b9      	ldr	r1, [r7, #8]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f000 f982 	bl	800607c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	699a      	ldr	r2, [r3, #24]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f042 0208 	orr.w	r2, r2, #8
 8005d86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	699a      	ldr	r2, [r3, #24]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f022 0204 	bic.w	r2, r2, #4
 8005d96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	6999      	ldr	r1, [r3, #24]
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	691a      	ldr	r2, [r3, #16]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	619a      	str	r2, [r3, #24]
      break;
 8005daa:	e0a5      	b.n	8005ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68b9      	ldr	r1, [r7, #8]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 f9f2 	bl	800619c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	699a      	ldr	r2, [r3, #24]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699a      	ldr	r2, [r3, #24]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6999      	ldr	r1, [r3, #24]
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	021a      	lsls	r2, r3, #8
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	430a      	orrs	r2, r1
 8005dea:	619a      	str	r2, [r3, #24]
      break;
 8005dec:	e084      	b.n	8005ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68b9      	ldr	r1, [r7, #8]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f000 fa5b 	bl	80062b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	69da      	ldr	r2, [r3, #28]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f042 0208 	orr.w	r2, r2, #8
 8005e08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	69da      	ldr	r2, [r3, #28]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 0204 	bic.w	r2, r2, #4
 8005e18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	69d9      	ldr	r1, [r3, #28]
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	691a      	ldr	r2, [r3, #16]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	61da      	str	r2, [r3, #28]
      break;
 8005e2c:	e064      	b.n	8005ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68b9      	ldr	r1, [r7, #8]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 fac3 	bl	80063c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	69da      	ldr	r2, [r3, #28]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	69da      	ldr	r2, [r3, #28]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	69d9      	ldr	r1, [r3, #28]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	021a      	lsls	r2, r3, #8
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	61da      	str	r2, [r3, #28]
      break;
 8005e6e:	e043      	b.n	8005ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68b9      	ldr	r1, [r7, #8]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f000 fb0c 	bl	8006494 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0208 	orr.w	r2, r2, #8
 8005e8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f022 0204 	bic.w	r2, r2, #4
 8005e9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	691a      	ldr	r2, [r3, #16]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005eae:	e023      	b.n	8005ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68b9      	ldr	r1, [r7, #8]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f000 fb50 	bl	800655c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005eca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eda:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	021a      	lsls	r2, r3, #8
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	430a      	orrs	r2, r1
 8005eee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ef0:	e002      	b.n	8005ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ef6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3718      	adds	r7, #24
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop

08005f0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a40      	ldr	r2, [pc, #256]	; (800605c <TIM_Base_SetConfig+0x114>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d013      	beq.n	8005f88 <TIM_Base_SetConfig+0x40>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f66:	d00f      	beq.n	8005f88 <TIM_Base_SetConfig+0x40>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a3d      	ldr	r2, [pc, #244]	; (8006060 <TIM_Base_SetConfig+0x118>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d00b      	beq.n	8005f88 <TIM_Base_SetConfig+0x40>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a3c      	ldr	r2, [pc, #240]	; (8006064 <TIM_Base_SetConfig+0x11c>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d007      	beq.n	8005f88 <TIM_Base_SetConfig+0x40>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a3b      	ldr	r2, [pc, #236]	; (8006068 <TIM_Base_SetConfig+0x120>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d003      	beq.n	8005f88 <TIM_Base_SetConfig+0x40>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a3a      	ldr	r2, [pc, #232]	; (800606c <TIM_Base_SetConfig+0x124>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d108      	bne.n	8005f9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a2f      	ldr	r2, [pc, #188]	; (800605c <TIM_Base_SetConfig+0x114>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d01f      	beq.n	8005fe2 <TIM_Base_SetConfig+0x9a>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fa8:	d01b      	beq.n	8005fe2 <TIM_Base_SetConfig+0x9a>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a2c      	ldr	r2, [pc, #176]	; (8006060 <TIM_Base_SetConfig+0x118>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d017      	beq.n	8005fe2 <TIM_Base_SetConfig+0x9a>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a2b      	ldr	r2, [pc, #172]	; (8006064 <TIM_Base_SetConfig+0x11c>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d013      	beq.n	8005fe2 <TIM_Base_SetConfig+0x9a>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a2a      	ldr	r2, [pc, #168]	; (8006068 <TIM_Base_SetConfig+0x120>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d00f      	beq.n	8005fe2 <TIM_Base_SetConfig+0x9a>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a29      	ldr	r2, [pc, #164]	; (800606c <TIM_Base_SetConfig+0x124>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d00b      	beq.n	8005fe2 <TIM_Base_SetConfig+0x9a>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a28      	ldr	r2, [pc, #160]	; (8006070 <TIM_Base_SetConfig+0x128>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d007      	beq.n	8005fe2 <TIM_Base_SetConfig+0x9a>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a27      	ldr	r2, [pc, #156]	; (8006074 <TIM_Base_SetConfig+0x12c>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d003      	beq.n	8005fe2 <TIM_Base_SetConfig+0x9a>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a26      	ldr	r2, [pc, #152]	; (8006078 <TIM_Base_SetConfig+0x130>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d108      	bne.n	8005ff4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	689a      	ldr	r2, [r3, #8]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a10      	ldr	r2, [pc, #64]	; (800605c <TIM_Base_SetConfig+0x114>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d00f      	beq.n	8006040 <TIM_Base_SetConfig+0xf8>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a12      	ldr	r2, [pc, #72]	; (800606c <TIM_Base_SetConfig+0x124>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d00b      	beq.n	8006040 <TIM_Base_SetConfig+0xf8>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a11      	ldr	r2, [pc, #68]	; (8006070 <TIM_Base_SetConfig+0x128>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d007      	beq.n	8006040 <TIM_Base_SetConfig+0xf8>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a10      	ldr	r2, [pc, #64]	; (8006074 <TIM_Base_SetConfig+0x12c>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d003      	beq.n	8006040 <TIM_Base_SetConfig+0xf8>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a0f      	ldr	r2, [pc, #60]	; (8006078 <TIM_Base_SetConfig+0x130>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d103      	bne.n	8006048 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	691a      	ldr	r2, [r3, #16]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	615a      	str	r2, [r3, #20]
}
 800604e:	bf00      	nop
 8006050:	3714      	adds	r7, #20
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	40012c00 	.word	0x40012c00
 8006060:	40000400 	.word	0x40000400
 8006064:	40000800 	.word	0x40000800
 8006068:	40000c00 	.word	0x40000c00
 800606c:	40013400 	.word	0x40013400
 8006070:	40014000 	.word	0x40014000
 8006074:	40014400 	.word	0x40014400
 8006078:	40014800 	.word	0x40014800

0800607c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800607c:	b480      	push	{r7}
 800607e:	b087      	sub	sp, #28
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	f023 0201 	bic.w	r2, r3, #1
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f023 0303 	bic.w	r3, r3, #3
 80060b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f023 0302 	bic.w	r3, r3, #2
 80060c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a2c      	ldr	r2, [pc, #176]	; (8006188 <TIM_OC1_SetConfig+0x10c>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d00f      	beq.n	80060fc <TIM_OC1_SetConfig+0x80>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a2b      	ldr	r2, [pc, #172]	; (800618c <TIM_OC1_SetConfig+0x110>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d00b      	beq.n	80060fc <TIM_OC1_SetConfig+0x80>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a2a      	ldr	r2, [pc, #168]	; (8006190 <TIM_OC1_SetConfig+0x114>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d007      	beq.n	80060fc <TIM_OC1_SetConfig+0x80>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a29      	ldr	r2, [pc, #164]	; (8006194 <TIM_OC1_SetConfig+0x118>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d003      	beq.n	80060fc <TIM_OC1_SetConfig+0x80>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a28      	ldr	r2, [pc, #160]	; (8006198 <TIM_OC1_SetConfig+0x11c>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d10c      	bne.n	8006116 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	f023 0308 	bic.w	r3, r3, #8
 8006102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	4313      	orrs	r3, r2
 800610c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f023 0304 	bic.w	r3, r3, #4
 8006114:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a1b      	ldr	r2, [pc, #108]	; (8006188 <TIM_OC1_SetConfig+0x10c>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d00f      	beq.n	800613e <TIM_OC1_SetConfig+0xc2>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a1a      	ldr	r2, [pc, #104]	; (800618c <TIM_OC1_SetConfig+0x110>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d00b      	beq.n	800613e <TIM_OC1_SetConfig+0xc2>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a19      	ldr	r2, [pc, #100]	; (8006190 <TIM_OC1_SetConfig+0x114>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d007      	beq.n	800613e <TIM_OC1_SetConfig+0xc2>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a18      	ldr	r2, [pc, #96]	; (8006194 <TIM_OC1_SetConfig+0x118>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d003      	beq.n	800613e <TIM_OC1_SetConfig+0xc2>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a17      	ldr	r2, [pc, #92]	; (8006198 <TIM_OC1_SetConfig+0x11c>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d111      	bne.n	8006162 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006144:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800614c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	4313      	orrs	r3, r2
 8006156:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	699b      	ldr	r3, [r3, #24]
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	4313      	orrs	r3, r2
 8006160:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	621a      	str	r2, [r3, #32]
}
 800617c:	bf00      	nop
 800617e:	371c      	adds	r7, #28
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr
 8006188:	40012c00 	.word	0x40012c00
 800618c:	40013400 	.word	0x40013400
 8006190:	40014000 	.word	0x40014000
 8006194:	40014400 	.word	0x40014400
 8006198:	40014800 	.word	0x40014800

0800619c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800619c:	b480      	push	{r7}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	f023 0210 	bic.w	r2, r3, #16
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	021b      	lsls	r3, r3, #8
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	f023 0320 	bic.w	r3, r3, #32
 80061ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	011b      	lsls	r3, r3, #4
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a28      	ldr	r2, [pc, #160]	; (800629c <TIM_OC2_SetConfig+0x100>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d003      	beq.n	8006208 <TIM_OC2_SetConfig+0x6c>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a27      	ldr	r2, [pc, #156]	; (80062a0 <TIM_OC2_SetConfig+0x104>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d10d      	bne.n	8006224 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800620e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	011b      	lsls	r3, r3, #4
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	4313      	orrs	r3, r2
 800621a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006222:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a1d      	ldr	r2, [pc, #116]	; (800629c <TIM_OC2_SetConfig+0x100>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d00f      	beq.n	800624c <TIM_OC2_SetConfig+0xb0>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a1c      	ldr	r2, [pc, #112]	; (80062a0 <TIM_OC2_SetConfig+0x104>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d00b      	beq.n	800624c <TIM_OC2_SetConfig+0xb0>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a1b      	ldr	r2, [pc, #108]	; (80062a4 <TIM_OC2_SetConfig+0x108>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d007      	beq.n	800624c <TIM_OC2_SetConfig+0xb0>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a1a      	ldr	r2, [pc, #104]	; (80062a8 <TIM_OC2_SetConfig+0x10c>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d003      	beq.n	800624c <TIM_OC2_SetConfig+0xb0>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a19      	ldr	r2, [pc, #100]	; (80062ac <TIM_OC2_SetConfig+0x110>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d113      	bne.n	8006274 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006252:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800625a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	695b      	ldr	r3, [r3, #20]
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	4313      	orrs	r3, r2
 8006266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	4313      	orrs	r3, r2
 8006272:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	621a      	str	r2, [r3, #32]
}
 800628e:	bf00      	nop
 8006290:	371c      	adds	r7, #28
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	40012c00 	.word	0x40012c00
 80062a0:	40013400 	.word	0x40013400
 80062a4:	40014000 	.word	0x40014000
 80062a8:	40014400 	.word	0x40014400
 80062ac:	40014800 	.word	0x40014800

080062b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b087      	sub	sp, #28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f023 0303 	bic.w	r3, r3, #3
 80062ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	021b      	lsls	r3, r3, #8
 8006304:	697a      	ldr	r2, [r7, #20]
 8006306:	4313      	orrs	r3, r2
 8006308:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a27      	ldr	r2, [pc, #156]	; (80063ac <TIM_OC3_SetConfig+0xfc>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d003      	beq.n	800631a <TIM_OC3_SetConfig+0x6a>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a26      	ldr	r2, [pc, #152]	; (80063b0 <TIM_OC3_SetConfig+0x100>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d10d      	bne.n	8006336 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006320:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	021b      	lsls	r3, r3, #8
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	4313      	orrs	r3, r2
 800632c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006334:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a1c      	ldr	r2, [pc, #112]	; (80063ac <TIM_OC3_SetConfig+0xfc>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d00f      	beq.n	800635e <TIM_OC3_SetConfig+0xae>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a1b      	ldr	r2, [pc, #108]	; (80063b0 <TIM_OC3_SetConfig+0x100>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d00b      	beq.n	800635e <TIM_OC3_SetConfig+0xae>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a1a      	ldr	r2, [pc, #104]	; (80063b4 <TIM_OC3_SetConfig+0x104>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d007      	beq.n	800635e <TIM_OC3_SetConfig+0xae>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a19      	ldr	r2, [pc, #100]	; (80063b8 <TIM_OC3_SetConfig+0x108>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d003      	beq.n	800635e <TIM_OC3_SetConfig+0xae>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a18      	ldr	r2, [pc, #96]	; (80063bc <TIM_OC3_SetConfig+0x10c>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d113      	bne.n	8006386 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006364:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800636c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	011b      	lsls	r3, r3, #4
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	4313      	orrs	r3, r2
 8006378:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	011b      	lsls	r3, r3, #4
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	4313      	orrs	r3, r2
 8006384:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	685a      	ldr	r2, [r3, #4]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	621a      	str	r2, [r3, #32]
}
 80063a0:	bf00      	nop
 80063a2:	371c      	adds	r7, #28
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr
 80063ac:	40012c00 	.word	0x40012c00
 80063b0:	40013400 	.word	0x40013400
 80063b4:	40014000 	.word	0x40014000
 80063b8:	40014400 	.word	0x40014400
 80063bc:	40014800 	.word	0x40014800

080063c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b087      	sub	sp, #28
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	69db      	ldr	r3, [r3, #28]
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	021b      	lsls	r3, r3, #8
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	4313      	orrs	r3, r2
 8006406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800640e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	031b      	lsls	r3, r3, #12
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4313      	orrs	r3, r2
 800641a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a18      	ldr	r2, [pc, #96]	; (8006480 <TIM_OC4_SetConfig+0xc0>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d00f      	beq.n	8006444 <TIM_OC4_SetConfig+0x84>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a17      	ldr	r2, [pc, #92]	; (8006484 <TIM_OC4_SetConfig+0xc4>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d00b      	beq.n	8006444 <TIM_OC4_SetConfig+0x84>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a16      	ldr	r2, [pc, #88]	; (8006488 <TIM_OC4_SetConfig+0xc8>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d007      	beq.n	8006444 <TIM_OC4_SetConfig+0x84>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a15      	ldr	r2, [pc, #84]	; (800648c <TIM_OC4_SetConfig+0xcc>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d003      	beq.n	8006444 <TIM_OC4_SetConfig+0x84>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a14      	ldr	r2, [pc, #80]	; (8006490 <TIM_OC4_SetConfig+0xd0>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d109      	bne.n	8006458 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800644a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	019b      	lsls	r3, r3, #6
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	4313      	orrs	r3, r2
 8006456:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	621a      	str	r2, [r3, #32]
}
 8006472:	bf00      	nop
 8006474:	371c      	adds	r7, #28
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	40012c00 	.word	0x40012c00
 8006484:	40013400 	.word	0x40013400
 8006488:	40014000 	.word	0x40014000
 800648c:	40014400 	.word	0x40014400
 8006490:	40014800 	.word	0x40014800

08006494 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006494:	b480      	push	{r7}
 8006496:	b087      	sub	sp, #28
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80064d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	041b      	lsls	r3, r3, #16
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a17      	ldr	r2, [pc, #92]	; (8006548 <TIM_OC5_SetConfig+0xb4>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d00f      	beq.n	800650e <TIM_OC5_SetConfig+0x7a>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a16      	ldr	r2, [pc, #88]	; (800654c <TIM_OC5_SetConfig+0xb8>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d00b      	beq.n	800650e <TIM_OC5_SetConfig+0x7a>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a15      	ldr	r2, [pc, #84]	; (8006550 <TIM_OC5_SetConfig+0xbc>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d007      	beq.n	800650e <TIM_OC5_SetConfig+0x7a>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a14      	ldr	r2, [pc, #80]	; (8006554 <TIM_OC5_SetConfig+0xc0>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d003      	beq.n	800650e <TIM_OC5_SetConfig+0x7a>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a13      	ldr	r2, [pc, #76]	; (8006558 <TIM_OC5_SetConfig+0xc4>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d109      	bne.n	8006522 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006514:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	021b      	lsls	r3, r3, #8
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	4313      	orrs	r3, r2
 8006520:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	621a      	str	r2, [r3, #32]
}
 800653c:	bf00      	nop
 800653e:	371c      	adds	r7, #28
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr
 8006548:	40012c00 	.word	0x40012c00
 800654c:	40013400 	.word	0x40013400
 8006550:	40014000 	.word	0x40014000
 8006554:	40014400 	.word	0x40014400
 8006558:	40014800 	.word	0x40014800

0800655c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800655c:	b480      	push	{r7}
 800655e:	b087      	sub	sp, #28
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800658a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800658e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	021b      	lsls	r3, r3, #8
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	4313      	orrs	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	051b      	lsls	r3, r3, #20
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a18      	ldr	r2, [pc, #96]	; (8006614 <TIM_OC6_SetConfig+0xb8>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d00f      	beq.n	80065d8 <TIM_OC6_SetConfig+0x7c>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a17      	ldr	r2, [pc, #92]	; (8006618 <TIM_OC6_SetConfig+0xbc>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d00b      	beq.n	80065d8 <TIM_OC6_SetConfig+0x7c>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a16      	ldr	r2, [pc, #88]	; (800661c <TIM_OC6_SetConfig+0xc0>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d007      	beq.n	80065d8 <TIM_OC6_SetConfig+0x7c>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a15      	ldr	r2, [pc, #84]	; (8006620 <TIM_OC6_SetConfig+0xc4>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d003      	beq.n	80065d8 <TIM_OC6_SetConfig+0x7c>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a14      	ldr	r2, [pc, #80]	; (8006624 <TIM_OC6_SetConfig+0xc8>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d109      	bne.n	80065ec <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	695b      	ldr	r3, [r3, #20]
 80065e4:	029b      	lsls	r3, r3, #10
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	685a      	ldr	r2, [r3, #4]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	621a      	str	r2, [r3, #32]
}
 8006606:	bf00      	nop
 8006608:	371c      	adds	r7, #28
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	40012c00 	.word	0x40012c00
 8006618:	40013400 	.word	0x40013400
 800661c:	40014000 	.word	0x40014000
 8006620:	40014400 	.word	0x40014400
 8006624:	40014800 	.word	0x40014800

08006628 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006628:	b480      	push	{r7}
 800662a:	b087      	sub	sp, #28
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	f003 031f 	and.w	r3, r3, #31
 800663a:	2201      	movs	r2, #1
 800663c:	fa02 f303 	lsl.w	r3, r2, r3
 8006640:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6a1a      	ldr	r2, [r3, #32]
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	43db      	mvns	r3, r3
 800664a:	401a      	ands	r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6a1a      	ldr	r2, [r3, #32]
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	f003 031f 	and.w	r3, r3, #31
 800665a:	6879      	ldr	r1, [r7, #4]
 800665c:	fa01 f303 	lsl.w	r3, r1, r3
 8006660:	431a      	orrs	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	621a      	str	r2, [r3, #32]
}
 8006666:	bf00      	nop
 8006668:	371c      	adds	r7, #28
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
	...

08006674 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006684:	2b01      	cmp	r3, #1
 8006686:	d101      	bne.n	800668c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006688:	2302      	movs	r3, #2
 800668a:	e068      	b.n	800675e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2202      	movs	r2, #2
 8006698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a2e      	ldr	r2, [pc, #184]	; (800676c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d004      	beq.n	80066c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a2d      	ldr	r2, [pc, #180]	; (8006770 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d108      	bne.n	80066d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80066c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a1e      	ldr	r2, [pc, #120]	; (800676c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d01d      	beq.n	8006732 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066fe:	d018      	beq.n	8006732 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a1b      	ldr	r2, [pc, #108]	; (8006774 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d013      	beq.n	8006732 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a1a      	ldr	r2, [pc, #104]	; (8006778 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d00e      	beq.n	8006732 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a18      	ldr	r2, [pc, #96]	; (800677c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d009      	beq.n	8006732 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a13      	ldr	r2, [pc, #76]	; (8006770 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d004      	beq.n	8006732 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a14      	ldr	r2, [pc, #80]	; (8006780 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d10c      	bne.n	800674c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006738:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	68ba      	ldr	r2, [r7, #8]
 8006740:	4313      	orrs	r3, r2
 8006742:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3714      	adds	r7, #20
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	40012c00 	.word	0x40012c00
 8006770:	40013400 	.word	0x40013400
 8006774:	40000400 	.word	0x40000400
 8006778:	40000800 	.word	0x40000800
 800677c:	40000c00 	.word	0x40000c00
 8006780:	40014000 	.word	0x40014000

08006784 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e040      	b.n	8006854 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d106      	bne.n	80067e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f7fa ffe8 	bl	80017b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2224      	movs	r2, #36	; 0x24
 80067ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f022 0201 	bic.w	r2, r2, #1
 80067fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f992 	bl	8006b28 <UART_SetConfig>
 8006804:	4603      	mov	r3, r0
 8006806:	2b01      	cmp	r3, #1
 8006808:	d101      	bne.n	800680e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e022      	b.n	8006854 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006812:	2b00      	cmp	r3, #0
 8006814:	d002      	beq.n	800681c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fc3e 	bl	8007098 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	685a      	ldr	r2, [r3, #4]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800682a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	689a      	ldr	r2, [r3, #8]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800683a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f042 0201 	orr.w	r2, r2, #1
 800684a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 fcc5 	bl	80071dc <UART_CheckIdleState>
 8006852:	4603      	mov	r3, r0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b08a      	sub	sp, #40	; 0x28
 8006860:	af02      	add	r7, sp, #8
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	603b      	str	r3, [r7, #0]
 8006868:	4613      	mov	r3, r2
 800686a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006870:	2b20      	cmp	r3, #32
 8006872:	f040 8082 	bne.w	800697a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d002      	beq.n	8006882 <HAL_UART_Transmit+0x26>
 800687c:	88fb      	ldrh	r3, [r7, #6]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e07a      	b.n	800697c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800688c:	2b01      	cmp	r3, #1
 800688e:	d101      	bne.n	8006894 <HAL_UART_Transmit+0x38>
 8006890:	2302      	movs	r3, #2
 8006892:	e073      	b.n	800697c <HAL_UART_Transmit+0x120>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2221      	movs	r2, #33	; 0x21
 80068a8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068aa:	f7fb f99d 	bl	8001be8 <HAL_GetTick>
 80068ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	88fa      	ldrh	r2, [r7, #6]
 80068b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	88fa      	ldrh	r2, [r7, #6]
 80068bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068c8:	d108      	bne.n	80068dc <HAL_UART_Transmit+0x80>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d104      	bne.n	80068dc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80068d2:	2300      	movs	r3, #0
 80068d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	61bb      	str	r3, [r7, #24]
 80068da:	e003      	b.n	80068e4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068e0:	2300      	movs	r3, #0
 80068e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80068ec:	e02d      	b.n	800694a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	2200      	movs	r2, #0
 80068f6:	2180      	movs	r1, #128	; 0x80
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f000 fcb8 	bl	800726e <UART_WaitOnFlagUntilTimeout>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d001      	beq.n	8006908 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e039      	b.n	800697c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10b      	bne.n	8006926 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	881a      	ldrh	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800691a:	b292      	uxth	r2, r2
 800691c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	3302      	adds	r3, #2
 8006922:	61bb      	str	r3, [r7, #24]
 8006924:	e008      	b.n	8006938 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	781a      	ldrb	r2, [r3, #0]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	b292      	uxth	r2, r2
 8006930:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	3301      	adds	r3, #1
 8006936:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800693e:	b29b      	uxth	r3, r3
 8006940:	3b01      	subs	r3, #1
 8006942:	b29a      	uxth	r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006950:	b29b      	uxth	r3, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1cb      	bne.n	80068ee <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	2200      	movs	r2, #0
 800695e:	2140      	movs	r1, #64	; 0x40
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f000 fc84 	bl	800726e <UART_WaitOnFlagUntilTimeout>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e005      	b.n	800697c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2220      	movs	r2, #32
 8006974:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	e000      	b.n	800697c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800697a:	2302      	movs	r3, #2
  }
}
 800697c:	4618      	mov	r0, r3
 800697e:	3720      	adds	r7, #32
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b08a      	sub	sp, #40	; 0x28
 8006988:	af02      	add	r7, sp, #8
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	603b      	str	r3, [r7, #0]
 8006990:	4613      	mov	r3, r2
 8006992:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006998:	2b20      	cmp	r3, #32
 800699a:	f040 80bf 	bne.w	8006b1c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <HAL_UART_Receive+0x26>
 80069a4:	88fb      	ldrh	r3, [r7, #6]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d101      	bne.n	80069ae <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e0b7      	b.n	8006b1e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d101      	bne.n	80069bc <HAL_UART_Receive+0x38>
 80069b8:	2302      	movs	r3, #2
 80069ba:	e0b0      	b.n	8006b1e <HAL_UART_Receive+0x19a>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2222      	movs	r2, #34	; 0x22
 80069d0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069d8:	f7fb f906 	bl	8001be8 <HAL_GetTick>
 80069dc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	88fa      	ldrh	r2, [r7, #6]
 80069e2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	88fa      	ldrh	r2, [r7, #6]
 80069ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069f6:	d10e      	bne.n	8006a16 <HAL_UART_Receive+0x92>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d105      	bne.n	8006a0c <HAL_UART_Receive+0x88>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006a06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a0a:	e02d      	b.n	8006a68 <HAL_UART_Receive+0xe4>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	22ff      	movs	r2, #255	; 0xff
 8006a10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a14:	e028      	b.n	8006a68 <HAL_UART_Receive+0xe4>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10d      	bne.n	8006a3a <HAL_UART_Receive+0xb6>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d104      	bne.n	8006a30 <HAL_UART_Receive+0xac>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	22ff      	movs	r2, #255	; 0xff
 8006a2a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a2e:	e01b      	b.n	8006a68 <HAL_UART_Receive+0xe4>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	227f      	movs	r2, #127	; 0x7f
 8006a34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a38:	e016      	b.n	8006a68 <HAL_UART_Receive+0xe4>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a42:	d10d      	bne.n	8006a60 <HAL_UART_Receive+0xdc>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d104      	bne.n	8006a56 <HAL_UART_Receive+0xd2>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	227f      	movs	r2, #127	; 0x7f
 8006a50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a54:	e008      	b.n	8006a68 <HAL_UART_Receive+0xe4>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	223f      	movs	r2, #63	; 0x3f
 8006a5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a5e:	e003      	b.n	8006a68 <HAL_UART_Receive+0xe4>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a6e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a78:	d108      	bne.n	8006a8c <HAL_UART_Receive+0x108>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d104      	bne.n	8006a8c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8006a82:	2300      	movs	r3, #0
 8006a84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	61bb      	str	r3, [r7, #24]
 8006a8a:	e003      	b.n	8006a94 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a90:	2300      	movs	r3, #0
 8006a92:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006a9c:	e033      	b.n	8006b06 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	9300      	str	r3, [sp, #0]
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	2120      	movs	r1, #32
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f000 fbe0 	bl	800726e <UART_WaitOnFlagUntilTimeout>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d001      	beq.n	8006ab8 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	e032      	b.n	8006b1e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d10c      	bne.n	8006ad8 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	8a7b      	ldrh	r3, [r7, #18]
 8006ac8:	4013      	ands	r3, r2
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	3302      	adds	r3, #2
 8006ad4:	61bb      	str	r3, [r7, #24]
 8006ad6:	e00d      	b.n	8006af4 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	b2da      	uxtb	r2, r3
 8006ae2:	8a7b      	ldrh	r3, [r7, #18]
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	3301      	adds	r3, #1
 8006af2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	3b01      	subs	r3, #1
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1c5      	bne.n	8006a9e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2220      	movs	r2, #32
 8006b16:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	e000      	b.n	8006b1e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8006b1c:	2302      	movs	r3, #2
  }
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3720      	adds	r7, #32
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
	...

08006b28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b2c:	b08a      	sub	sp, #40	; 0x28
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	689a      	ldr	r2, [r3, #8]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	431a      	orrs	r2, r3
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	431a      	orrs	r2, r3
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	69db      	ldr	r3, [r3, #28]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	4ba4      	ldr	r3, [pc, #656]	; (8006de8 <UART_SetConfig+0x2c0>)
 8006b58:	4013      	ands	r3, r2
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	6812      	ldr	r2, [r2, #0]
 8006b5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b60:	430b      	orrs	r3, r1
 8006b62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	68da      	ldr	r2, [r3, #12]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	430a      	orrs	r2, r1
 8006b78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a99      	ldr	r2, [pc, #612]	; (8006dec <UART_SetConfig+0x2c4>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d004      	beq.n	8006b94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6a1b      	ldr	r3, [r3, #32]
 8006b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b90:	4313      	orrs	r3, r2
 8006b92:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ba4:	430a      	orrs	r2, r1
 8006ba6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a90      	ldr	r2, [pc, #576]	; (8006df0 <UART_SetConfig+0x2c8>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d126      	bne.n	8006c00 <UART_SetConfig+0xd8>
 8006bb2:	4b90      	ldr	r3, [pc, #576]	; (8006df4 <UART_SetConfig+0x2cc>)
 8006bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bb8:	f003 0303 	and.w	r3, r3, #3
 8006bbc:	2b03      	cmp	r3, #3
 8006bbe:	d81b      	bhi.n	8006bf8 <UART_SetConfig+0xd0>
 8006bc0:	a201      	add	r2, pc, #4	; (adr r2, 8006bc8 <UART_SetConfig+0xa0>)
 8006bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc6:	bf00      	nop
 8006bc8:	08006bd9 	.word	0x08006bd9
 8006bcc:	08006be9 	.word	0x08006be9
 8006bd0:	08006be1 	.word	0x08006be1
 8006bd4:	08006bf1 	.word	0x08006bf1
 8006bd8:	2301      	movs	r3, #1
 8006bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bde:	e116      	b.n	8006e0e <UART_SetConfig+0x2e6>
 8006be0:	2302      	movs	r3, #2
 8006be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006be6:	e112      	b.n	8006e0e <UART_SetConfig+0x2e6>
 8006be8:	2304      	movs	r3, #4
 8006bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bee:	e10e      	b.n	8006e0e <UART_SetConfig+0x2e6>
 8006bf0:	2308      	movs	r3, #8
 8006bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bf6:	e10a      	b.n	8006e0e <UART_SetConfig+0x2e6>
 8006bf8:	2310      	movs	r3, #16
 8006bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bfe:	e106      	b.n	8006e0e <UART_SetConfig+0x2e6>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a7c      	ldr	r2, [pc, #496]	; (8006df8 <UART_SetConfig+0x2d0>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d138      	bne.n	8006c7c <UART_SetConfig+0x154>
 8006c0a:	4b7a      	ldr	r3, [pc, #488]	; (8006df4 <UART_SetConfig+0x2cc>)
 8006c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c10:	f003 030c 	and.w	r3, r3, #12
 8006c14:	2b0c      	cmp	r3, #12
 8006c16:	d82d      	bhi.n	8006c74 <UART_SetConfig+0x14c>
 8006c18:	a201      	add	r2, pc, #4	; (adr r2, 8006c20 <UART_SetConfig+0xf8>)
 8006c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c1e:	bf00      	nop
 8006c20:	08006c55 	.word	0x08006c55
 8006c24:	08006c75 	.word	0x08006c75
 8006c28:	08006c75 	.word	0x08006c75
 8006c2c:	08006c75 	.word	0x08006c75
 8006c30:	08006c65 	.word	0x08006c65
 8006c34:	08006c75 	.word	0x08006c75
 8006c38:	08006c75 	.word	0x08006c75
 8006c3c:	08006c75 	.word	0x08006c75
 8006c40:	08006c5d 	.word	0x08006c5d
 8006c44:	08006c75 	.word	0x08006c75
 8006c48:	08006c75 	.word	0x08006c75
 8006c4c:	08006c75 	.word	0x08006c75
 8006c50:	08006c6d 	.word	0x08006c6d
 8006c54:	2300      	movs	r3, #0
 8006c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c5a:	e0d8      	b.n	8006e0e <UART_SetConfig+0x2e6>
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c62:	e0d4      	b.n	8006e0e <UART_SetConfig+0x2e6>
 8006c64:	2304      	movs	r3, #4
 8006c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c6a:	e0d0      	b.n	8006e0e <UART_SetConfig+0x2e6>
 8006c6c:	2308      	movs	r3, #8
 8006c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c72:	e0cc      	b.n	8006e0e <UART_SetConfig+0x2e6>
 8006c74:	2310      	movs	r3, #16
 8006c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c7a:	e0c8      	b.n	8006e0e <UART_SetConfig+0x2e6>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a5e      	ldr	r2, [pc, #376]	; (8006dfc <UART_SetConfig+0x2d4>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d125      	bne.n	8006cd2 <UART_SetConfig+0x1aa>
 8006c86:	4b5b      	ldr	r3, [pc, #364]	; (8006df4 <UART_SetConfig+0x2cc>)
 8006c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c90:	2b30      	cmp	r3, #48	; 0x30
 8006c92:	d016      	beq.n	8006cc2 <UART_SetConfig+0x19a>
 8006c94:	2b30      	cmp	r3, #48	; 0x30
 8006c96:	d818      	bhi.n	8006cca <UART_SetConfig+0x1a2>
 8006c98:	2b20      	cmp	r3, #32
 8006c9a:	d00a      	beq.n	8006cb2 <UART_SetConfig+0x18a>
 8006c9c:	2b20      	cmp	r3, #32
 8006c9e:	d814      	bhi.n	8006cca <UART_SetConfig+0x1a2>
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d002      	beq.n	8006caa <UART_SetConfig+0x182>
 8006ca4:	2b10      	cmp	r3, #16
 8006ca6:	d008      	beq.n	8006cba <UART_SetConfig+0x192>
 8006ca8:	e00f      	b.n	8006cca <UART_SetConfig+0x1a2>
 8006caa:	2300      	movs	r3, #0
 8006cac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cb0:	e0ad      	b.n	8006e0e <UART_SetConfig+0x2e6>
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cb8:	e0a9      	b.n	8006e0e <UART_SetConfig+0x2e6>
 8006cba:	2304      	movs	r3, #4
 8006cbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cc0:	e0a5      	b.n	8006e0e <UART_SetConfig+0x2e6>
 8006cc2:	2308      	movs	r3, #8
 8006cc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cc8:	e0a1      	b.n	8006e0e <UART_SetConfig+0x2e6>
 8006cca:	2310      	movs	r3, #16
 8006ccc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cd0:	e09d      	b.n	8006e0e <UART_SetConfig+0x2e6>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a4a      	ldr	r2, [pc, #296]	; (8006e00 <UART_SetConfig+0x2d8>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d125      	bne.n	8006d28 <UART_SetConfig+0x200>
 8006cdc:	4b45      	ldr	r3, [pc, #276]	; (8006df4 <UART_SetConfig+0x2cc>)
 8006cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ce2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006ce6:	2bc0      	cmp	r3, #192	; 0xc0
 8006ce8:	d016      	beq.n	8006d18 <UART_SetConfig+0x1f0>
 8006cea:	2bc0      	cmp	r3, #192	; 0xc0
 8006cec:	d818      	bhi.n	8006d20 <UART_SetConfig+0x1f8>
 8006cee:	2b80      	cmp	r3, #128	; 0x80
 8006cf0:	d00a      	beq.n	8006d08 <UART_SetConfig+0x1e0>
 8006cf2:	2b80      	cmp	r3, #128	; 0x80
 8006cf4:	d814      	bhi.n	8006d20 <UART_SetConfig+0x1f8>
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d002      	beq.n	8006d00 <UART_SetConfig+0x1d8>
 8006cfa:	2b40      	cmp	r3, #64	; 0x40
 8006cfc:	d008      	beq.n	8006d10 <UART_SetConfig+0x1e8>
 8006cfe:	e00f      	b.n	8006d20 <UART_SetConfig+0x1f8>
 8006d00:	2300      	movs	r3, #0
 8006d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d06:	e082      	b.n	8006e0e <UART_SetConfig+0x2e6>
 8006d08:	2302      	movs	r3, #2
 8006d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d0e:	e07e      	b.n	8006e0e <UART_SetConfig+0x2e6>
 8006d10:	2304      	movs	r3, #4
 8006d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d16:	e07a      	b.n	8006e0e <UART_SetConfig+0x2e6>
 8006d18:	2308      	movs	r3, #8
 8006d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d1e:	e076      	b.n	8006e0e <UART_SetConfig+0x2e6>
 8006d20:	2310      	movs	r3, #16
 8006d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d26:	e072      	b.n	8006e0e <UART_SetConfig+0x2e6>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a35      	ldr	r2, [pc, #212]	; (8006e04 <UART_SetConfig+0x2dc>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d12a      	bne.n	8006d88 <UART_SetConfig+0x260>
 8006d32:	4b30      	ldr	r3, [pc, #192]	; (8006df4 <UART_SetConfig+0x2cc>)
 8006d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d40:	d01a      	beq.n	8006d78 <UART_SetConfig+0x250>
 8006d42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d46:	d81b      	bhi.n	8006d80 <UART_SetConfig+0x258>
 8006d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d4c:	d00c      	beq.n	8006d68 <UART_SetConfig+0x240>
 8006d4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d52:	d815      	bhi.n	8006d80 <UART_SetConfig+0x258>
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d003      	beq.n	8006d60 <UART_SetConfig+0x238>
 8006d58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d5c:	d008      	beq.n	8006d70 <UART_SetConfig+0x248>
 8006d5e:	e00f      	b.n	8006d80 <UART_SetConfig+0x258>
 8006d60:	2300      	movs	r3, #0
 8006d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d66:	e052      	b.n	8006e0e <UART_SetConfig+0x2e6>
 8006d68:	2302      	movs	r3, #2
 8006d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d6e:	e04e      	b.n	8006e0e <UART_SetConfig+0x2e6>
 8006d70:	2304      	movs	r3, #4
 8006d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d76:	e04a      	b.n	8006e0e <UART_SetConfig+0x2e6>
 8006d78:	2308      	movs	r3, #8
 8006d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d7e:	e046      	b.n	8006e0e <UART_SetConfig+0x2e6>
 8006d80:	2310      	movs	r3, #16
 8006d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d86:	e042      	b.n	8006e0e <UART_SetConfig+0x2e6>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a17      	ldr	r2, [pc, #92]	; (8006dec <UART_SetConfig+0x2c4>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d13a      	bne.n	8006e08 <UART_SetConfig+0x2e0>
 8006d92:	4b18      	ldr	r3, [pc, #96]	; (8006df4 <UART_SetConfig+0x2cc>)
 8006d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006da0:	d01a      	beq.n	8006dd8 <UART_SetConfig+0x2b0>
 8006da2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006da6:	d81b      	bhi.n	8006de0 <UART_SetConfig+0x2b8>
 8006da8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dac:	d00c      	beq.n	8006dc8 <UART_SetConfig+0x2a0>
 8006dae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006db2:	d815      	bhi.n	8006de0 <UART_SetConfig+0x2b8>
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d003      	beq.n	8006dc0 <UART_SetConfig+0x298>
 8006db8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dbc:	d008      	beq.n	8006dd0 <UART_SetConfig+0x2a8>
 8006dbe:	e00f      	b.n	8006de0 <UART_SetConfig+0x2b8>
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dc6:	e022      	b.n	8006e0e <UART_SetConfig+0x2e6>
 8006dc8:	2302      	movs	r3, #2
 8006dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dce:	e01e      	b.n	8006e0e <UART_SetConfig+0x2e6>
 8006dd0:	2304      	movs	r3, #4
 8006dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dd6:	e01a      	b.n	8006e0e <UART_SetConfig+0x2e6>
 8006dd8:	2308      	movs	r3, #8
 8006dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dde:	e016      	b.n	8006e0e <UART_SetConfig+0x2e6>
 8006de0:	2310      	movs	r3, #16
 8006de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006de6:	e012      	b.n	8006e0e <UART_SetConfig+0x2e6>
 8006de8:	efff69f3 	.word	0xefff69f3
 8006dec:	40008000 	.word	0x40008000
 8006df0:	40013800 	.word	0x40013800
 8006df4:	40021000 	.word	0x40021000
 8006df8:	40004400 	.word	0x40004400
 8006dfc:	40004800 	.word	0x40004800
 8006e00:	40004c00 	.word	0x40004c00
 8006e04:	40005000 	.word	0x40005000
 8006e08:	2310      	movs	r3, #16
 8006e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a9f      	ldr	r2, [pc, #636]	; (8007090 <UART_SetConfig+0x568>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d17a      	bne.n	8006f0e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e1c:	2b08      	cmp	r3, #8
 8006e1e:	d824      	bhi.n	8006e6a <UART_SetConfig+0x342>
 8006e20:	a201      	add	r2, pc, #4	; (adr r2, 8006e28 <UART_SetConfig+0x300>)
 8006e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e26:	bf00      	nop
 8006e28:	08006e4d 	.word	0x08006e4d
 8006e2c:	08006e6b 	.word	0x08006e6b
 8006e30:	08006e55 	.word	0x08006e55
 8006e34:	08006e6b 	.word	0x08006e6b
 8006e38:	08006e5b 	.word	0x08006e5b
 8006e3c:	08006e6b 	.word	0x08006e6b
 8006e40:	08006e6b 	.word	0x08006e6b
 8006e44:	08006e6b 	.word	0x08006e6b
 8006e48:	08006e63 	.word	0x08006e63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e4c:	f7fd fb30 	bl	80044b0 <HAL_RCC_GetPCLK1Freq>
 8006e50:	61f8      	str	r0, [r7, #28]
        break;
 8006e52:	e010      	b.n	8006e76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e54:	4b8f      	ldr	r3, [pc, #572]	; (8007094 <UART_SetConfig+0x56c>)
 8006e56:	61fb      	str	r3, [r7, #28]
        break;
 8006e58:	e00d      	b.n	8006e76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e5a:	f7fd fa91 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 8006e5e:	61f8      	str	r0, [r7, #28]
        break;
 8006e60:	e009      	b.n	8006e76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e66:	61fb      	str	r3, [r7, #28]
        break;
 8006e68:	e005      	b.n	8006e76 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006e74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f000 80fb 	beq.w	8007074 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	685a      	ldr	r2, [r3, #4]
 8006e82:	4613      	mov	r3, r2
 8006e84:	005b      	lsls	r3, r3, #1
 8006e86:	4413      	add	r3, r2
 8006e88:	69fa      	ldr	r2, [r7, #28]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d305      	bcc.n	8006e9a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006e94:	69fa      	ldr	r2, [r7, #28]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d903      	bls.n	8006ea2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ea0:	e0e8      	b.n	8007074 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	461c      	mov	r4, r3
 8006ea8:	4615      	mov	r5, r2
 8006eaa:	f04f 0200 	mov.w	r2, #0
 8006eae:	f04f 0300 	mov.w	r3, #0
 8006eb2:	022b      	lsls	r3, r5, #8
 8006eb4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006eb8:	0222      	lsls	r2, r4, #8
 8006eba:	68f9      	ldr	r1, [r7, #12]
 8006ebc:	6849      	ldr	r1, [r1, #4]
 8006ebe:	0849      	lsrs	r1, r1, #1
 8006ec0:	2000      	movs	r0, #0
 8006ec2:	4688      	mov	r8, r1
 8006ec4:	4681      	mov	r9, r0
 8006ec6:	eb12 0a08 	adds.w	sl, r2, r8
 8006eca:	eb43 0b09 	adc.w	fp, r3, r9
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	603b      	str	r3, [r7, #0]
 8006ed6:	607a      	str	r2, [r7, #4]
 8006ed8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006edc:	4650      	mov	r0, sl
 8006ede:	4659      	mov	r1, fp
 8006ee0:	f7f9 f9d6 	bl	8000290 <__aeabi_uldivmod>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	4613      	mov	r3, r2
 8006eea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ef2:	d308      	bcc.n	8006f06 <UART_SetConfig+0x3de>
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006efa:	d204      	bcs.n	8006f06 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	69ba      	ldr	r2, [r7, #24]
 8006f02:	60da      	str	r2, [r3, #12]
 8006f04:	e0b6      	b.n	8007074 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006f0c:	e0b2      	b.n	8007074 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f16:	d15e      	bne.n	8006fd6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006f18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f1c:	2b08      	cmp	r3, #8
 8006f1e:	d828      	bhi.n	8006f72 <UART_SetConfig+0x44a>
 8006f20:	a201      	add	r2, pc, #4	; (adr r2, 8006f28 <UART_SetConfig+0x400>)
 8006f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f26:	bf00      	nop
 8006f28:	08006f4d 	.word	0x08006f4d
 8006f2c:	08006f55 	.word	0x08006f55
 8006f30:	08006f5d 	.word	0x08006f5d
 8006f34:	08006f73 	.word	0x08006f73
 8006f38:	08006f63 	.word	0x08006f63
 8006f3c:	08006f73 	.word	0x08006f73
 8006f40:	08006f73 	.word	0x08006f73
 8006f44:	08006f73 	.word	0x08006f73
 8006f48:	08006f6b 	.word	0x08006f6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f4c:	f7fd fab0 	bl	80044b0 <HAL_RCC_GetPCLK1Freq>
 8006f50:	61f8      	str	r0, [r7, #28]
        break;
 8006f52:	e014      	b.n	8006f7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f54:	f7fd fac2 	bl	80044dc <HAL_RCC_GetPCLK2Freq>
 8006f58:	61f8      	str	r0, [r7, #28]
        break;
 8006f5a:	e010      	b.n	8006f7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f5c:	4b4d      	ldr	r3, [pc, #308]	; (8007094 <UART_SetConfig+0x56c>)
 8006f5e:	61fb      	str	r3, [r7, #28]
        break;
 8006f60:	e00d      	b.n	8006f7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f62:	f7fd fa0d 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 8006f66:	61f8      	str	r0, [r7, #28]
        break;
 8006f68:	e009      	b.n	8006f7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f6e:	61fb      	str	r3, [r7, #28]
        break;
 8006f70:	e005      	b.n	8006f7e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006f72:	2300      	movs	r3, #0
 8006f74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006f7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d077      	beq.n	8007074 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	005a      	lsls	r2, r3, #1
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	085b      	lsrs	r3, r3, #1
 8006f8e:	441a      	add	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f98:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	2b0f      	cmp	r3, #15
 8006f9e:	d916      	bls.n	8006fce <UART_SetConfig+0x4a6>
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fa6:	d212      	bcs.n	8006fce <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	f023 030f 	bic.w	r3, r3, #15
 8006fb0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	085b      	lsrs	r3, r3, #1
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	f003 0307 	and.w	r3, r3, #7
 8006fbc:	b29a      	uxth	r2, r3
 8006fbe:	8afb      	ldrh	r3, [r7, #22]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	8afa      	ldrh	r2, [r7, #22]
 8006fca:	60da      	str	r2, [r3, #12]
 8006fcc:	e052      	b.n	8007074 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006fd4:	e04e      	b.n	8007074 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006fd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006fda:	2b08      	cmp	r3, #8
 8006fdc:	d827      	bhi.n	800702e <UART_SetConfig+0x506>
 8006fde:	a201      	add	r2, pc, #4	; (adr r2, 8006fe4 <UART_SetConfig+0x4bc>)
 8006fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe4:	08007009 	.word	0x08007009
 8006fe8:	08007011 	.word	0x08007011
 8006fec:	08007019 	.word	0x08007019
 8006ff0:	0800702f 	.word	0x0800702f
 8006ff4:	0800701f 	.word	0x0800701f
 8006ff8:	0800702f 	.word	0x0800702f
 8006ffc:	0800702f 	.word	0x0800702f
 8007000:	0800702f 	.word	0x0800702f
 8007004:	08007027 	.word	0x08007027
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007008:	f7fd fa52 	bl	80044b0 <HAL_RCC_GetPCLK1Freq>
 800700c:	61f8      	str	r0, [r7, #28]
        break;
 800700e:	e014      	b.n	800703a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007010:	f7fd fa64 	bl	80044dc <HAL_RCC_GetPCLK2Freq>
 8007014:	61f8      	str	r0, [r7, #28]
        break;
 8007016:	e010      	b.n	800703a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007018:	4b1e      	ldr	r3, [pc, #120]	; (8007094 <UART_SetConfig+0x56c>)
 800701a:	61fb      	str	r3, [r7, #28]
        break;
 800701c:	e00d      	b.n	800703a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800701e:	f7fd f9af 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 8007022:	61f8      	str	r0, [r7, #28]
        break;
 8007024:	e009      	b.n	800703a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800702a:	61fb      	str	r3, [r7, #28]
        break;
 800702c:	e005      	b.n	800703a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800702e:	2300      	movs	r3, #0
 8007030:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007038:	bf00      	nop
    }

    if (pclk != 0U)
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d019      	beq.n	8007074 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	085a      	lsrs	r2, r3, #1
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	441a      	add	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007052:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	2b0f      	cmp	r3, #15
 8007058:	d909      	bls.n	800706e <UART_SetConfig+0x546>
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007060:	d205      	bcs.n	800706e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	b29a      	uxth	r2, r3
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	60da      	str	r2, [r3, #12]
 800706c:	e002      	b.n	8007074 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007080:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007084:	4618      	mov	r0, r3
 8007086:	3728      	adds	r7, #40	; 0x28
 8007088:	46bd      	mov	sp, r7
 800708a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800708e:	bf00      	nop
 8007090:	40008000 	.word	0x40008000
 8007094:	00f42400 	.word	0x00f42400

08007098 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a4:	f003 0301 	and.w	r3, r3, #1
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00a      	beq.n	80070c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	430a      	orrs	r2, r1
 80070c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c6:	f003 0302 	and.w	r3, r3, #2
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00a      	beq.n	80070e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	430a      	orrs	r2, r1
 80070e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e8:	f003 0304 	and.w	r3, r3, #4
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00a      	beq.n	8007106 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	430a      	orrs	r2, r1
 8007104:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710a:	f003 0308 	and.w	r3, r3, #8
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00a      	beq.n	8007128 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	430a      	orrs	r2, r1
 8007126:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712c:	f003 0310 	and.w	r3, r3, #16
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00a      	beq.n	800714a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	430a      	orrs	r2, r1
 8007148:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714e:	f003 0320 	and.w	r3, r3, #32
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00a      	beq.n	800716c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	430a      	orrs	r2, r1
 800716a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007174:	2b00      	cmp	r3, #0
 8007176:	d01a      	beq.n	80071ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	430a      	orrs	r2, r1
 800718c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007192:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007196:	d10a      	bne.n	80071ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	430a      	orrs	r2, r1
 80071ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00a      	beq.n	80071d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	430a      	orrs	r2, r1
 80071ce:	605a      	str	r2, [r3, #4]
  }
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b086      	sub	sp, #24
 80071e0:	af02      	add	r7, sp, #8
 80071e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071ec:	f7fa fcfc 	bl	8001be8 <HAL_GetTick>
 80071f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0308 	and.w	r3, r3, #8
 80071fc:	2b08      	cmp	r3, #8
 80071fe:	d10e      	bne.n	800721e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007200:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007204:	9300      	str	r3, [sp, #0]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f82d 	bl	800726e <UART_WaitOnFlagUntilTimeout>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d001      	beq.n	800721e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e023      	b.n	8007266 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 0304 	and.w	r3, r3, #4
 8007228:	2b04      	cmp	r3, #4
 800722a:	d10e      	bne.n	800724a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800722c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007230:	9300      	str	r3, [sp, #0]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2200      	movs	r2, #0
 8007236:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f817 	bl	800726e <UART_WaitOnFlagUntilTimeout>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d001      	beq.n	800724a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	e00d      	b.n	8007266 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2220      	movs	r2, #32
 800724e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2220      	movs	r2, #32
 8007254:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b09c      	sub	sp, #112	; 0x70
 8007272:	af00      	add	r7, sp, #0
 8007274:	60f8      	str	r0, [r7, #12]
 8007276:	60b9      	str	r1, [r7, #8]
 8007278:	603b      	str	r3, [r7, #0]
 800727a:	4613      	mov	r3, r2
 800727c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800727e:	e0a5      	b.n	80073cc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007280:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007286:	f000 80a1 	beq.w	80073cc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800728a:	f7fa fcad 	bl	8001be8 <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007296:	429a      	cmp	r2, r3
 8007298:	d302      	bcc.n	80072a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800729a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800729c:	2b00      	cmp	r3, #0
 800729e:	d13e      	bne.n	800731e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072a8:	e853 3f00 	ldrex	r3, [r3]
 80072ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80072ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072b4:	667b      	str	r3, [r7, #100]	; 0x64
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	461a      	mov	r2, r3
 80072bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072c0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80072c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80072c6:	e841 2300 	strex	r3, r2, [r1]
 80072ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80072cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1e6      	bne.n	80072a0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	3308      	adds	r3, #8
 80072d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072dc:	e853 3f00 	ldrex	r3, [r3]
 80072e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e4:	f023 0301 	bic.w	r3, r3, #1
 80072e8:	663b      	str	r3, [r7, #96]	; 0x60
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	3308      	adds	r3, #8
 80072f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80072f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80072f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80072f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072fa:	e841 2300 	strex	r3, r2, [r1]
 80072fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1e5      	bne.n	80072d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2220      	movs	r2, #32
 800730a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2220      	movs	r2, #32
 8007310:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	e067      	b.n	80073ee <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 0304 	and.w	r3, r3, #4
 8007328:	2b00      	cmp	r3, #0
 800732a:	d04f      	beq.n	80073cc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	69db      	ldr	r3, [r3, #28]
 8007332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800733a:	d147      	bne.n	80073cc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007344:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734e:	e853 3f00 	ldrex	r3, [r3]
 8007352:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007356:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800735a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	461a      	mov	r2, r3
 8007362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007364:	637b      	str	r3, [r7, #52]	; 0x34
 8007366:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007368:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800736a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800736c:	e841 2300 	strex	r3, r2, [r1]
 8007370:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1e6      	bne.n	8007346 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	3308      	adds	r3, #8
 800737e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	e853 3f00 	ldrex	r3, [r3]
 8007386:	613b      	str	r3, [r7, #16]
   return(result);
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	f023 0301 	bic.w	r3, r3, #1
 800738e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	3308      	adds	r3, #8
 8007396:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007398:	623a      	str	r2, [r7, #32]
 800739a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739c:	69f9      	ldr	r1, [r7, #28]
 800739e:	6a3a      	ldr	r2, [r7, #32]
 80073a0:	e841 2300 	strex	r3, r2, [r1]
 80073a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1e5      	bne.n	8007378 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2220      	movs	r2, #32
 80073b0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2220      	movs	r2, #32
 80073b6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2220      	movs	r2, #32
 80073bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80073c8:	2303      	movs	r3, #3
 80073ca:	e010      	b.n	80073ee <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	69da      	ldr	r2, [r3, #28]
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	4013      	ands	r3, r2
 80073d6:	68ba      	ldr	r2, [r7, #8]
 80073d8:	429a      	cmp	r2, r3
 80073da:	bf0c      	ite	eq
 80073dc:	2301      	moveq	r3, #1
 80073de:	2300      	movne	r3, #0
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	461a      	mov	r2, r3
 80073e4:	79fb      	ldrb	r3, [r7, #7]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	f43f af4a 	beq.w	8007280 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3770      	adds	r7, #112	; 0x70
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <atoi>:
 80073f6:	220a      	movs	r2, #10
 80073f8:	2100      	movs	r1, #0
 80073fa:	f000 b9a7 	b.w	800774c <strtol>
	...

08007400 <__errno>:
 8007400:	4b01      	ldr	r3, [pc, #4]	; (8007408 <__errno+0x8>)
 8007402:	6818      	ldr	r0, [r3, #0]
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	20000194 	.word	0x20000194

0800740c <__libc_init_array>:
 800740c:	b570      	push	{r4, r5, r6, lr}
 800740e:	4d0d      	ldr	r5, [pc, #52]	; (8007444 <__libc_init_array+0x38>)
 8007410:	4c0d      	ldr	r4, [pc, #52]	; (8007448 <__libc_init_array+0x3c>)
 8007412:	1b64      	subs	r4, r4, r5
 8007414:	10a4      	asrs	r4, r4, #2
 8007416:	2600      	movs	r6, #0
 8007418:	42a6      	cmp	r6, r4
 800741a:	d109      	bne.n	8007430 <__libc_init_array+0x24>
 800741c:	4d0b      	ldr	r5, [pc, #44]	; (800744c <__libc_init_array+0x40>)
 800741e:	4c0c      	ldr	r4, [pc, #48]	; (8007450 <__libc_init_array+0x44>)
 8007420:	f001 f998 	bl	8008754 <_init>
 8007424:	1b64      	subs	r4, r4, r5
 8007426:	10a4      	asrs	r4, r4, #2
 8007428:	2600      	movs	r6, #0
 800742a:	42a6      	cmp	r6, r4
 800742c:	d105      	bne.n	800743a <__libc_init_array+0x2e>
 800742e:	bd70      	pop	{r4, r5, r6, pc}
 8007430:	f855 3b04 	ldr.w	r3, [r5], #4
 8007434:	4798      	blx	r3
 8007436:	3601      	adds	r6, #1
 8007438:	e7ee      	b.n	8007418 <__libc_init_array+0xc>
 800743a:	f855 3b04 	ldr.w	r3, [r5], #4
 800743e:	4798      	blx	r3
 8007440:	3601      	adds	r6, #1
 8007442:	e7f2      	b.n	800742a <__libc_init_array+0x1e>
 8007444:	08008a9c 	.word	0x08008a9c
 8007448:	08008a9c 	.word	0x08008a9c
 800744c:	08008a9c 	.word	0x08008a9c
 8007450:	08008aa0 	.word	0x08008aa0

08007454 <memset>:
 8007454:	4402      	add	r2, r0
 8007456:	4603      	mov	r3, r0
 8007458:	4293      	cmp	r3, r2
 800745a:	d100      	bne.n	800745e <memset+0xa>
 800745c:	4770      	bx	lr
 800745e:	f803 1b01 	strb.w	r1, [r3], #1
 8007462:	e7f9      	b.n	8007458 <memset+0x4>

08007464 <iprintf>:
 8007464:	b40f      	push	{r0, r1, r2, r3}
 8007466:	4b0a      	ldr	r3, [pc, #40]	; (8007490 <iprintf+0x2c>)
 8007468:	b513      	push	{r0, r1, r4, lr}
 800746a:	681c      	ldr	r4, [r3, #0]
 800746c:	b124      	cbz	r4, 8007478 <iprintf+0x14>
 800746e:	69a3      	ldr	r3, [r4, #24]
 8007470:	b913      	cbnz	r3, 8007478 <iprintf+0x14>
 8007472:	4620      	mov	r0, r4
 8007474:	f000 fb6c 	bl	8007b50 <__sinit>
 8007478:	ab05      	add	r3, sp, #20
 800747a:	9a04      	ldr	r2, [sp, #16]
 800747c:	68a1      	ldr	r1, [r4, #8]
 800747e:	9301      	str	r3, [sp, #4]
 8007480:	4620      	mov	r0, r4
 8007482:	f000 fd8f 	bl	8007fa4 <_vfiprintf_r>
 8007486:	b002      	add	sp, #8
 8007488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800748c:	b004      	add	sp, #16
 800748e:	4770      	bx	lr
 8007490:	20000194 	.word	0x20000194

08007494 <_puts_r>:
 8007494:	b570      	push	{r4, r5, r6, lr}
 8007496:	460e      	mov	r6, r1
 8007498:	4605      	mov	r5, r0
 800749a:	b118      	cbz	r0, 80074a4 <_puts_r+0x10>
 800749c:	6983      	ldr	r3, [r0, #24]
 800749e:	b90b      	cbnz	r3, 80074a4 <_puts_r+0x10>
 80074a0:	f000 fb56 	bl	8007b50 <__sinit>
 80074a4:	69ab      	ldr	r3, [r5, #24]
 80074a6:	68ac      	ldr	r4, [r5, #8]
 80074a8:	b913      	cbnz	r3, 80074b0 <_puts_r+0x1c>
 80074aa:	4628      	mov	r0, r5
 80074ac:	f000 fb50 	bl	8007b50 <__sinit>
 80074b0:	4b2c      	ldr	r3, [pc, #176]	; (8007564 <_puts_r+0xd0>)
 80074b2:	429c      	cmp	r4, r3
 80074b4:	d120      	bne.n	80074f8 <_puts_r+0x64>
 80074b6:	686c      	ldr	r4, [r5, #4]
 80074b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074ba:	07db      	lsls	r3, r3, #31
 80074bc:	d405      	bmi.n	80074ca <_puts_r+0x36>
 80074be:	89a3      	ldrh	r3, [r4, #12]
 80074c0:	0598      	lsls	r0, r3, #22
 80074c2:	d402      	bmi.n	80074ca <_puts_r+0x36>
 80074c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074c6:	f000 fbf3 	bl	8007cb0 <__retarget_lock_acquire_recursive>
 80074ca:	89a3      	ldrh	r3, [r4, #12]
 80074cc:	0719      	lsls	r1, r3, #28
 80074ce:	d51d      	bpl.n	800750c <_puts_r+0x78>
 80074d0:	6923      	ldr	r3, [r4, #16]
 80074d2:	b1db      	cbz	r3, 800750c <_puts_r+0x78>
 80074d4:	3e01      	subs	r6, #1
 80074d6:	68a3      	ldr	r3, [r4, #8]
 80074d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80074dc:	3b01      	subs	r3, #1
 80074de:	60a3      	str	r3, [r4, #8]
 80074e0:	bb39      	cbnz	r1, 8007532 <_puts_r+0x9e>
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	da38      	bge.n	8007558 <_puts_r+0xc4>
 80074e6:	4622      	mov	r2, r4
 80074e8:	210a      	movs	r1, #10
 80074ea:	4628      	mov	r0, r5
 80074ec:	f000 f938 	bl	8007760 <__swbuf_r>
 80074f0:	3001      	adds	r0, #1
 80074f2:	d011      	beq.n	8007518 <_puts_r+0x84>
 80074f4:	250a      	movs	r5, #10
 80074f6:	e011      	b.n	800751c <_puts_r+0x88>
 80074f8:	4b1b      	ldr	r3, [pc, #108]	; (8007568 <_puts_r+0xd4>)
 80074fa:	429c      	cmp	r4, r3
 80074fc:	d101      	bne.n	8007502 <_puts_r+0x6e>
 80074fe:	68ac      	ldr	r4, [r5, #8]
 8007500:	e7da      	b.n	80074b8 <_puts_r+0x24>
 8007502:	4b1a      	ldr	r3, [pc, #104]	; (800756c <_puts_r+0xd8>)
 8007504:	429c      	cmp	r4, r3
 8007506:	bf08      	it	eq
 8007508:	68ec      	ldreq	r4, [r5, #12]
 800750a:	e7d5      	b.n	80074b8 <_puts_r+0x24>
 800750c:	4621      	mov	r1, r4
 800750e:	4628      	mov	r0, r5
 8007510:	f000 f978 	bl	8007804 <__swsetup_r>
 8007514:	2800      	cmp	r0, #0
 8007516:	d0dd      	beq.n	80074d4 <_puts_r+0x40>
 8007518:	f04f 35ff 	mov.w	r5, #4294967295
 800751c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800751e:	07da      	lsls	r2, r3, #31
 8007520:	d405      	bmi.n	800752e <_puts_r+0x9a>
 8007522:	89a3      	ldrh	r3, [r4, #12]
 8007524:	059b      	lsls	r3, r3, #22
 8007526:	d402      	bmi.n	800752e <_puts_r+0x9a>
 8007528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800752a:	f000 fbc2 	bl	8007cb2 <__retarget_lock_release_recursive>
 800752e:	4628      	mov	r0, r5
 8007530:	bd70      	pop	{r4, r5, r6, pc}
 8007532:	2b00      	cmp	r3, #0
 8007534:	da04      	bge.n	8007540 <_puts_r+0xac>
 8007536:	69a2      	ldr	r2, [r4, #24]
 8007538:	429a      	cmp	r2, r3
 800753a:	dc06      	bgt.n	800754a <_puts_r+0xb6>
 800753c:	290a      	cmp	r1, #10
 800753e:	d004      	beq.n	800754a <_puts_r+0xb6>
 8007540:	6823      	ldr	r3, [r4, #0]
 8007542:	1c5a      	adds	r2, r3, #1
 8007544:	6022      	str	r2, [r4, #0]
 8007546:	7019      	strb	r1, [r3, #0]
 8007548:	e7c5      	b.n	80074d6 <_puts_r+0x42>
 800754a:	4622      	mov	r2, r4
 800754c:	4628      	mov	r0, r5
 800754e:	f000 f907 	bl	8007760 <__swbuf_r>
 8007552:	3001      	adds	r0, #1
 8007554:	d1bf      	bne.n	80074d6 <_puts_r+0x42>
 8007556:	e7df      	b.n	8007518 <_puts_r+0x84>
 8007558:	6823      	ldr	r3, [r4, #0]
 800755a:	250a      	movs	r5, #10
 800755c:	1c5a      	adds	r2, r3, #1
 800755e:	6022      	str	r2, [r4, #0]
 8007560:	701d      	strb	r5, [r3, #0]
 8007562:	e7db      	b.n	800751c <_puts_r+0x88>
 8007564:	08008a20 	.word	0x08008a20
 8007568:	08008a40 	.word	0x08008a40
 800756c:	08008a00 	.word	0x08008a00

08007570 <puts>:
 8007570:	4b02      	ldr	r3, [pc, #8]	; (800757c <puts+0xc>)
 8007572:	4601      	mov	r1, r0
 8007574:	6818      	ldr	r0, [r3, #0]
 8007576:	f7ff bf8d 	b.w	8007494 <_puts_r>
 800757a:	bf00      	nop
 800757c:	20000194 	.word	0x20000194

08007580 <strcpy>:
 8007580:	4603      	mov	r3, r0
 8007582:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007586:	f803 2b01 	strb.w	r2, [r3], #1
 800758a:	2a00      	cmp	r2, #0
 800758c:	d1f9      	bne.n	8007582 <strcpy+0x2>
 800758e:	4770      	bx	lr

08007590 <strtok>:
 8007590:	4b16      	ldr	r3, [pc, #88]	; (80075ec <strtok+0x5c>)
 8007592:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007594:	681e      	ldr	r6, [r3, #0]
 8007596:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8007598:	4605      	mov	r5, r0
 800759a:	b9fc      	cbnz	r4, 80075dc <strtok+0x4c>
 800759c:	2050      	movs	r0, #80	; 0x50
 800759e:	9101      	str	r1, [sp, #4]
 80075a0:	f000 fbee 	bl	8007d80 <malloc>
 80075a4:	9901      	ldr	r1, [sp, #4]
 80075a6:	65b0      	str	r0, [r6, #88]	; 0x58
 80075a8:	4602      	mov	r2, r0
 80075aa:	b920      	cbnz	r0, 80075b6 <strtok+0x26>
 80075ac:	4b10      	ldr	r3, [pc, #64]	; (80075f0 <strtok+0x60>)
 80075ae:	4811      	ldr	r0, [pc, #68]	; (80075f4 <strtok+0x64>)
 80075b0:	2157      	movs	r1, #87	; 0x57
 80075b2:	f000 f995 	bl	80078e0 <__assert_func>
 80075b6:	e9c0 4400 	strd	r4, r4, [r0]
 80075ba:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80075be:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80075c2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80075c6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80075ca:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80075ce:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80075d2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80075d6:	6184      	str	r4, [r0, #24]
 80075d8:	7704      	strb	r4, [r0, #28]
 80075da:	6244      	str	r4, [r0, #36]	; 0x24
 80075dc:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80075de:	2301      	movs	r3, #1
 80075e0:	4628      	mov	r0, r5
 80075e2:	b002      	add	sp, #8
 80075e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80075e8:	f000 b806 	b.w	80075f8 <__strtok_r>
 80075ec:	20000194 	.word	0x20000194
 80075f0:	0800884c 	.word	0x0800884c
 80075f4:	08008863 	.word	0x08008863

080075f8 <__strtok_r>:
 80075f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075fa:	b908      	cbnz	r0, 8007600 <__strtok_r+0x8>
 80075fc:	6810      	ldr	r0, [r2, #0]
 80075fe:	b188      	cbz	r0, 8007624 <__strtok_r+0x2c>
 8007600:	4604      	mov	r4, r0
 8007602:	4620      	mov	r0, r4
 8007604:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007608:	460f      	mov	r7, r1
 800760a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800760e:	b91e      	cbnz	r6, 8007618 <__strtok_r+0x20>
 8007610:	b965      	cbnz	r5, 800762c <__strtok_r+0x34>
 8007612:	6015      	str	r5, [r2, #0]
 8007614:	4628      	mov	r0, r5
 8007616:	e005      	b.n	8007624 <__strtok_r+0x2c>
 8007618:	42b5      	cmp	r5, r6
 800761a:	d1f6      	bne.n	800760a <__strtok_r+0x12>
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1f0      	bne.n	8007602 <__strtok_r+0xa>
 8007620:	6014      	str	r4, [r2, #0]
 8007622:	7003      	strb	r3, [r0, #0]
 8007624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007626:	461c      	mov	r4, r3
 8007628:	e00c      	b.n	8007644 <__strtok_r+0x4c>
 800762a:	b915      	cbnz	r5, 8007632 <__strtok_r+0x3a>
 800762c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007630:	460e      	mov	r6, r1
 8007632:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007636:	42ab      	cmp	r3, r5
 8007638:	d1f7      	bne.n	800762a <__strtok_r+0x32>
 800763a:	2b00      	cmp	r3, #0
 800763c:	d0f3      	beq.n	8007626 <__strtok_r+0x2e>
 800763e:	2300      	movs	r3, #0
 8007640:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007644:	6014      	str	r4, [r2, #0]
 8007646:	e7ed      	b.n	8007624 <__strtok_r+0x2c>

08007648 <_strtol_l.constprop.0>:
 8007648:	2b01      	cmp	r3, #1
 800764a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800764e:	d001      	beq.n	8007654 <_strtol_l.constprop.0+0xc>
 8007650:	2b24      	cmp	r3, #36	; 0x24
 8007652:	d906      	bls.n	8007662 <_strtol_l.constprop.0+0x1a>
 8007654:	f7ff fed4 	bl	8007400 <__errno>
 8007658:	2316      	movs	r3, #22
 800765a:	6003      	str	r3, [r0, #0]
 800765c:	2000      	movs	r0, #0
 800765e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007662:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007748 <_strtol_l.constprop.0+0x100>
 8007666:	460d      	mov	r5, r1
 8007668:	462e      	mov	r6, r5
 800766a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800766e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007672:	f017 0708 	ands.w	r7, r7, #8
 8007676:	d1f7      	bne.n	8007668 <_strtol_l.constprop.0+0x20>
 8007678:	2c2d      	cmp	r4, #45	; 0x2d
 800767a:	d132      	bne.n	80076e2 <_strtol_l.constprop.0+0x9a>
 800767c:	782c      	ldrb	r4, [r5, #0]
 800767e:	2701      	movs	r7, #1
 8007680:	1cb5      	adds	r5, r6, #2
 8007682:	2b00      	cmp	r3, #0
 8007684:	d05b      	beq.n	800773e <_strtol_l.constprop.0+0xf6>
 8007686:	2b10      	cmp	r3, #16
 8007688:	d109      	bne.n	800769e <_strtol_l.constprop.0+0x56>
 800768a:	2c30      	cmp	r4, #48	; 0x30
 800768c:	d107      	bne.n	800769e <_strtol_l.constprop.0+0x56>
 800768e:	782c      	ldrb	r4, [r5, #0]
 8007690:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007694:	2c58      	cmp	r4, #88	; 0x58
 8007696:	d14d      	bne.n	8007734 <_strtol_l.constprop.0+0xec>
 8007698:	786c      	ldrb	r4, [r5, #1]
 800769a:	2310      	movs	r3, #16
 800769c:	3502      	adds	r5, #2
 800769e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80076a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80076a6:	f04f 0c00 	mov.w	ip, #0
 80076aa:	fbb8 f9f3 	udiv	r9, r8, r3
 80076ae:	4666      	mov	r6, ip
 80076b0:	fb03 8a19 	mls	sl, r3, r9, r8
 80076b4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80076b8:	f1be 0f09 	cmp.w	lr, #9
 80076bc:	d816      	bhi.n	80076ec <_strtol_l.constprop.0+0xa4>
 80076be:	4674      	mov	r4, lr
 80076c0:	42a3      	cmp	r3, r4
 80076c2:	dd24      	ble.n	800770e <_strtol_l.constprop.0+0xc6>
 80076c4:	f1bc 0f00 	cmp.w	ip, #0
 80076c8:	db1e      	blt.n	8007708 <_strtol_l.constprop.0+0xc0>
 80076ca:	45b1      	cmp	r9, r6
 80076cc:	d31c      	bcc.n	8007708 <_strtol_l.constprop.0+0xc0>
 80076ce:	d101      	bne.n	80076d4 <_strtol_l.constprop.0+0x8c>
 80076d0:	45a2      	cmp	sl, r4
 80076d2:	db19      	blt.n	8007708 <_strtol_l.constprop.0+0xc0>
 80076d4:	fb06 4603 	mla	r6, r6, r3, r4
 80076d8:	f04f 0c01 	mov.w	ip, #1
 80076dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80076e0:	e7e8      	b.n	80076b4 <_strtol_l.constprop.0+0x6c>
 80076e2:	2c2b      	cmp	r4, #43	; 0x2b
 80076e4:	bf04      	itt	eq
 80076e6:	782c      	ldrbeq	r4, [r5, #0]
 80076e8:	1cb5      	addeq	r5, r6, #2
 80076ea:	e7ca      	b.n	8007682 <_strtol_l.constprop.0+0x3a>
 80076ec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80076f0:	f1be 0f19 	cmp.w	lr, #25
 80076f4:	d801      	bhi.n	80076fa <_strtol_l.constprop.0+0xb2>
 80076f6:	3c37      	subs	r4, #55	; 0x37
 80076f8:	e7e2      	b.n	80076c0 <_strtol_l.constprop.0+0x78>
 80076fa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80076fe:	f1be 0f19 	cmp.w	lr, #25
 8007702:	d804      	bhi.n	800770e <_strtol_l.constprop.0+0xc6>
 8007704:	3c57      	subs	r4, #87	; 0x57
 8007706:	e7db      	b.n	80076c0 <_strtol_l.constprop.0+0x78>
 8007708:	f04f 3cff 	mov.w	ip, #4294967295
 800770c:	e7e6      	b.n	80076dc <_strtol_l.constprop.0+0x94>
 800770e:	f1bc 0f00 	cmp.w	ip, #0
 8007712:	da05      	bge.n	8007720 <_strtol_l.constprop.0+0xd8>
 8007714:	2322      	movs	r3, #34	; 0x22
 8007716:	6003      	str	r3, [r0, #0]
 8007718:	4646      	mov	r6, r8
 800771a:	b942      	cbnz	r2, 800772e <_strtol_l.constprop.0+0xe6>
 800771c:	4630      	mov	r0, r6
 800771e:	e79e      	b.n	800765e <_strtol_l.constprop.0+0x16>
 8007720:	b107      	cbz	r7, 8007724 <_strtol_l.constprop.0+0xdc>
 8007722:	4276      	negs	r6, r6
 8007724:	2a00      	cmp	r2, #0
 8007726:	d0f9      	beq.n	800771c <_strtol_l.constprop.0+0xd4>
 8007728:	f1bc 0f00 	cmp.w	ip, #0
 800772c:	d000      	beq.n	8007730 <_strtol_l.constprop.0+0xe8>
 800772e:	1e69      	subs	r1, r5, #1
 8007730:	6011      	str	r1, [r2, #0]
 8007732:	e7f3      	b.n	800771c <_strtol_l.constprop.0+0xd4>
 8007734:	2430      	movs	r4, #48	; 0x30
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1b1      	bne.n	800769e <_strtol_l.constprop.0+0x56>
 800773a:	2308      	movs	r3, #8
 800773c:	e7af      	b.n	800769e <_strtol_l.constprop.0+0x56>
 800773e:	2c30      	cmp	r4, #48	; 0x30
 8007740:	d0a5      	beq.n	800768e <_strtol_l.constprop.0+0x46>
 8007742:	230a      	movs	r3, #10
 8007744:	e7ab      	b.n	800769e <_strtol_l.constprop.0+0x56>
 8007746:	bf00      	nop
 8007748:	080088fd 	.word	0x080088fd

0800774c <strtol>:
 800774c:	4613      	mov	r3, r2
 800774e:	460a      	mov	r2, r1
 8007750:	4601      	mov	r1, r0
 8007752:	4802      	ldr	r0, [pc, #8]	; (800775c <strtol+0x10>)
 8007754:	6800      	ldr	r0, [r0, #0]
 8007756:	f7ff bf77 	b.w	8007648 <_strtol_l.constprop.0>
 800775a:	bf00      	nop
 800775c:	20000194 	.word	0x20000194

08007760 <__swbuf_r>:
 8007760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007762:	460e      	mov	r6, r1
 8007764:	4614      	mov	r4, r2
 8007766:	4605      	mov	r5, r0
 8007768:	b118      	cbz	r0, 8007772 <__swbuf_r+0x12>
 800776a:	6983      	ldr	r3, [r0, #24]
 800776c:	b90b      	cbnz	r3, 8007772 <__swbuf_r+0x12>
 800776e:	f000 f9ef 	bl	8007b50 <__sinit>
 8007772:	4b21      	ldr	r3, [pc, #132]	; (80077f8 <__swbuf_r+0x98>)
 8007774:	429c      	cmp	r4, r3
 8007776:	d12b      	bne.n	80077d0 <__swbuf_r+0x70>
 8007778:	686c      	ldr	r4, [r5, #4]
 800777a:	69a3      	ldr	r3, [r4, #24]
 800777c:	60a3      	str	r3, [r4, #8]
 800777e:	89a3      	ldrh	r3, [r4, #12]
 8007780:	071a      	lsls	r2, r3, #28
 8007782:	d52f      	bpl.n	80077e4 <__swbuf_r+0x84>
 8007784:	6923      	ldr	r3, [r4, #16]
 8007786:	b36b      	cbz	r3, 80077e4 <__swbuf_r+0x84>
 8007788:	6923      	ldr	r3, [r4, #16]
 800778a:	6820      	ldr	r0, [r4, #0]
 800778c:	1ac0      	subs	r0, r0, r3
 800778e:	6963      	ldr	r3, [r4, #20]
 8007790:	b2f6      	uxtb	r6, r6
 8007792:	4283      	cmp	r3, r0
 8007794:	4637      	mov	r7, r6
 8007796:	dc04      	bgt.n	80077a2 <__swbuf_r+0x42>
 8007798:	4621      	mov	r1, r4
 800779a:	4628      	mov	r0, r5
 800779c:	f000 f944 	bl	8007a28 <_fflush_r>
 80077a0:	bb30      	cbnz	r0, 80077f0 <__swbuf_r+0x90>
 80077a2:	68a3      	ldr	r3, [r4, #8]
 80077a4:	3b01      	subs	r3, #1
 80077a6:	60a3      	str	r3, [r4, #8]
 80077a8:	6823      	ldr	r3, [r4, #0]
 80077aa:	1c5a      	adds	r2, r3, #1
 80077ac:	6022      	str	r2, [r4, #0]
 80077ae:	701e      	strb	r6, [r3, #0]
 80077b0:	6963      	ldr	r3, [r4, #20]
 80077b2:	3001      	adds	r0, #1
 80077b4:	4283      	cmp	r3, r0
 80077b6:	d004      	beq.n	80077c2 <__swbuf_r+0x62>
 80077b8:	89a3      	ldrh	r3, [r4, #12]
 80077ba:	07db      	lsls	r3, r3, #31
 80077bc:	d506      	bpl.n	80077cc <__swbuf_r+0x6c>
 80077be:	2e0a      	cmp	r6, #10
 80077c0:	d104      	bne.n	80077cc <__swbuf_r+0x6c>
 80077c2:	4621      	mov	r1, r4
 80077c4:	4628      	mov	r0, r5
 80077c6:	f000 f92f 	bl	8007a28 <_fflush_r>
 80077ca:	b988      	cbnz	r0, 80077f0 <__swbuf_r+0x90>
 80077cc:	4638      	mov	r0, r7
 80077ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077d0:	4b0a      	ldr	r3, [pc, #40]	; (80077fc <__swbuf_r+0x9c>)
 80077d2:	429c      	cmp	r4, r3
 80077d4:	d101      	bne.n	80077da <__swbuf_r+0x7a>
 80077d6:	68ac      	ldr	r4, [r5, #8]
 80077d8:	e7cf      	b.n	800777a <__swbuf_r+0x1a>
 80077da:	4b09      	ldr	r3, [pc, #36]	; (8007800 <__swbuf_r+0xa0>)
 80077dc:	429c      	cmp	r4, r3
 80077de:	bf08      	it	eq
 80077e0:	68ec      	ldreq	r4, [r5, #12]
 80077e2:	e7ca      	b.n	800777a <__swbuf_r+0x1a>
 80077e4:	4621      	mov	r1, r4
 80077e6:	4628      	mov	r0, r5
 80077e8:	f000 f80c 	bl	8007804 <__swsetup_r>
 80077ec:	2800      	cmp	r0, #0
 80077ee:	d0cb      	beq.n	8007788 <__swbuf_r+0x28>
 80077f0:	f04f 37ff 	mov.w	r7, #4294967295
 80077f4:	e7ea      	b.n	80077cc <__swbuf_r+0x6c>
 80077f6:	bf00      	nop
 80077f8:	08008a20 	.word	0x08008a20
 80077fc:	08008a40 	.word	0x08008a40
 8007800:	08008a00 	.word	0x08008a00

08007804 <__swsetup_r>:
 8007804:	4b32      	ldr	r3, [pc, #200]	; (80078d0 <__swsetup_r+0xcc>)
 8007806:	b570      	push	{r4, r5, r6, lr}
 8007808:	681d      	ldr	r5, [r3, #0]
 800780a:	4606      	mov	r6, r0
 800780c:	460c      	mov	r4, r1
 800780e:	b125      	cbz	r5, 800781a <__swsetup_r+0x16>
 8007810:	69ab      	ldr	r3, [r5, #24]
 8007812:	b913      	cbnz	r3, 800781a <__swsetup_r+0x16>
 8007814:	4628      	mov	r0, r5
 8007816:	f000 f99b 	bl	8007b50 <__sinit>
 800781a:	4b2e      	ldr	r3, [pc, #184]	; (80078d4 <__swsetup_r+0xd0>)
 800781c:	429c      	cmp	r4, r3
 800781e:	d10f      	bne.n	8007840 <__swsetup_r+0x3c>
 8007820:	686c      	ldr	r4, [r5, #4]
 8007822:	89a3      	ldrh	r3, [r4, #12]
 8007824:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007828:	0719      	lsls	r1, r3, #28
 800782a:	d42c      	bmi.n	8007886 <__swsetup_r+0x82>
 800782c:	06dd      	lsls	r5, r3, #27
 800782e:	d411      	bmi.n	8007854 <__swsetup_r+0x50>
 8007830:	2309      	movs	r3, #9
 8007832:	6033      	str	r3, [r6, #0]
 8007834:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007838:	81a3      	strh	r3, [r4, #12]
 800783a:	f04f 30ff 	mov.w	r0, #4294967295
 800783e:	e03e      	b.n	80078be <__swsetup_r+0xba>
 8007840:	4b25      	ldr	r3, [pc, #148]	; (80078d8 <__swsetup_r+0xd4>)
 8007842:	429c      	cmp	r4, r3
 8007844:	d101      	bne.n	800784a <__swsetup_r+0x46>
 8007846:	68ac      	ldr	r4, [r5, #8]
 8007848:	e7eb      	b.n	8007822 <__swsetup_r+0x1e>
 800784a:	4b24      	ldr	r3, [pc, #144]	; (80078dc <__swsetup_r+0xd8>)
 800784c:	429c      	cmp	r4, r3
 800784e:	bf08      	it	eq
 8007850:	68ec      	ldreq	r4, [r5, #12]
 8007852:	e7e6      	b.n	8007822 <__swsetup_r+0x1e>
 8007854:	0758      	lsls	r0, r3, #29
 8007856:	d512      	bpl.n	800787e <__swsetup_r+0x7a>
 8007858:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800785a:	b141      	cbz	r1, 800786e <__swsetup_r+0x6a>
 800785c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007860:	4299      	cmp	r1, r3
 8007862:	d002      	beq.n	800786a <__swsetup_r+0x66>
 8007864:	4630      	mov	r0, r6
 8007866:	f000 fa93 	bl	8007d90 <_free_r>
 800786a:	2300      	movs	r3, #0
 800786c:	6363      	str	r3, [r4, #52]	; 0x34
 800786e:	89a3      	ldrh	r3, [r4, #12]
 8007870:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007874:	81a3      	strh	r3, [r4, #12]
 8007876:	2300      	movs	r3, #0
 8007878:	6063      	str	r3, [r4, #4]
 800787a:	6923      	ldr	r3, [r4, #16]
 800787c:	6023      	str	r3, [r4, #0]
 800787e:	89a3      	ldrh	r3, [r4, #12]
 8007880:	f043 0308 	orr.w	r3, r3, #8
 8007884:	81a3      	strh	r3, [r4, #12]
 8007886:	6923      	ldr	r3, [r4, #16]
 8007888:	b94b      	cbnz	r3, 800789e <__swsetup_r+0x9a>
 800788a:	89a3      	ldrh	r3, [r4, #12]
 800788c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007890:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007894:	d003      	beq.n	800789e <__swsetup_r+0x9a>
 8007896:	4621      	mov	r1, r4
 8007898:	4630      	mov	r0, r6
 800789a:	f000 fa31 	bl	8007d00 <__smakebuf_r>
 800789e:	89a0      	ldrh	r0, [r4, #12]
 80078a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078a4:	f010 0301 	ands.w	r3, r0, #1
 80078a8:	d00a      	beq.n	80078c0 <__swsetup_r+0xbc>
 80078aa:	2300      	movs	r3, #0
 80078ac:	60a3      	str	r3, [r4, #8]
 80078ae:	6963      	ldr	r3, [r4, #20]
 80078b0:	425b      	negs	r3, r3
 80078b2:	61a3      	str	r3, [r4, #24]
 80078b4:	6923      	ldr	r3, [r4, #16]
 80078b6:	b943      	cbnz	r3, 80078ca <__swsetup_r+0xc6>
 80078b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80078bc:	d1ba      	bne.n	8007834 <__swsetup_r+0x30>
 80078be:	bd70      	pop	{r4, r5, r6, pc}
 80078c0:	0781      	lsls	r1, r0, #30
 80078c2:	bf58      	it	pl
 80078c4:	6963      	ldrpl	r3, [r4, #20]
 80078c6:	60a3      	str	r3, [r4, #8]
 80078c8:	e7f4      	b.n	80078b4 <__swsetup_r+0xb0>
 80078ca:	2000      	movs	r0, #0
 80078cc:	e7f7      	b.n	80078be <__swsetup_r+0xba>
 80078ce:	bf00      	nop
 80078d0:	20000194 	.word	0x20000194
 80078d4:	08008a20 	.word	0x08008a20
 80078d8:	08008a40 	.word	0x08008a40
 80078dc:	08008a00 	.word	0x08008a00

080078e0 <__assert_func>:
 80078e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078e2:	4614      	mov	r4, r2
 80078e4:	461a      	mov	r2, r3
 80078e6:	4b09      	ldr	r3, [pc, #36]	; (800790c <__assert_func+0x2c>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4605      	mov	r5, r0
 80078ec:	68d8      	ldr	r0, [r3, #12]
 80078ee:	b14c      	cbz	r4, 8007904 <__assert_func+0x24>
 80078f0:	4b07      	ldr	r3, [pc, #28]	; (8007910 <__assert_func+0x30>)
 80078f2:	9100      	str	r1, [sp, #0]
 80078f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80078f8:	4906      	ldr	r1, [pc, #24]	; (8007914 <__assert_func+0x34>)
 80078fa:	462b      	mov	r3, r5
 80078fc:	f000 f9a6 	bl	8007c4c <fiprintf>
 8007900:	f000 fe7a 	bl	80085f8 <abort>
 8007904:	4b04      	ldr	r3, [pc, #16]	; (8007918 <__assert_func+0x38>)
 8007906:	461c      	mov	r4, r3
 8007908:	e7f3      	b.n	80078f2 <__assert_func+0x12>
 800790a:	bf00      	nop
 800790c:	20000194 	.word	0x20000194
 8007910:	080088c0 	.word	0x080088c0
 8007914:	080088cd 	.word	0x080088cd
 8007918:	080088fb 	.word	0x080088fb

0800791c <__sflush_r>:
 800791c:	898a      	ldrh	r2, [r1, #12]
 800791e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007922:	4605      	mov	r5, r0
 8007924:	0710      	lsls	r0, r2, #28
 8007926:	460c      	mov	r4, r1
 8007928:	d458      	bmi.n	80079dc <__sflush_r+0xc0>
 800792a:	684b      	ldr	r3, [r1, #4]
 800792c:	2b00      	cmp	r3, #0
 800792e:	dc05      	bgt.n	800793c <__sflush_r+0x20>
 8007930:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007932:	2b00      	cmp	r3, #0
 8007934:	dc02      	bgt.n	800793c <__sflush_r+0x20>
 8007936:	2000      	movs	r0, #0
 8007938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800793c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800793e:	2e00      	cmp	r6, #0
 8007940:	d0f9      	beq.n	8007936 <__sflush_r+0x1a>
 8007942:	2300      	movs	r3, #0
 8007944:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007948:	682f      	ldr	r7, [r5, #0]
 800794a:	602b      	str	r3, [r5, #0]
 800794c:	d032      	beq.n	80079b4 <__sflush_r+0x98>
 800794e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007950:	89a3      	ldrh	r3, [r4, #12]
 8007952:	075a      	lsls	r2, r3, #29
 8007954:	d505      	bpl.n	8007962 <__sflush_r+0x46>
 8007956:	6863      	ldr	r3, [r4, #4]
 8007958:	1ac0      	subs	r0, r0, r3
 800795a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800795c:	b10b      	cbz	r3, 8007962 <__sflush_r+0x46>
 800795e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007960:	1ac0      	subs	r0, r0, r3
 8007962:	2300      	movs	r3, #0
 8007964:	4602      	mov	r2, r0
 8007966:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007968:	6a21      	ldr	r1, [r4, #32]
 800796a:	4628      	mov	r0, r5
 800796c:	47b0      	blx	r6
 800796e:	1c43      	adds	r3, r0, #1
 8007970:	89a3      	ldrh	r3, [r4, #12]
 8007972:	d106      	bne.n	8007982 <__sflush_r+0x66>
 8007974:	6829      	ldr	r1, [r5, #0]
 8007976:	291d      	cmp	r1, #29
 8007978:	d82c      	bhi.n	80079d4 <__sflush_r+0xb8>
 800797a:	4a2a      	ldr	r2, [pc, #168]	; (8007a24 <__sflush_r+0x108>)
 800797c:	40ca      	lsrs	r2, r1
 800797e:	07d6      	lsls	r6, r2, #31
 8007980:	d528      	bpl.n	80079d4 <__sflush_r+0xb8>
 8007982:	2200      	movs	r2, #0
 8007984:	6062      	str	r2, [r4, #4]
 8007986:	04d9      	lsls	r1, r3, #19
 8007988:	6922      	ldr	r2, [r4, #16]
 800798a:	6022      	str	r2, [r4, #0]
 800798c:	d504      	bpl.n	8007998 <__sflush_r+0x7c>
 800798e:	1c42      	adds	r2, r0, #1
 8007990:	d101      	bne.n	8007996 <__sflush_r+0x7a>
 8007992:	682b      	ldr	r3, [r5, #0]
 8007994:	b903      	cbnz	r3, 8007998 <__sflush_r+0x7c>
 8007996:	6560      	str	r0, [r4, #84]	; 0x54
 8007998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800799a:	602f      	str	r7, [r5, #0]
 800799c:	2900      	cmp	r1, #0
 800799e:	d0ca      	beq.n	8007936 <__sflush_r+0x1a>
 80079a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079a4:	4299      	cmp	r1, r3
 80079a6:	d002      	beq.n	80079ae <__sflush_r+0x92>
 80079a8:	4628      	mov	r0, r5
 80079aa:	f000 f9f1 	bl	8007d90 <_free_r>
 80079ae:	2000      	movs	r0, #0
 80079b0:	6360      	str	r0, [r4, #52]	; 0x34
 80079b2:	e7c1      	b.n	8007938 <__sflush_r+0x1c>
 80079b4:	6a21      	ldr	r1, [r4, #32]
 80079b6:	2301      	movs	r3, #1
 80079b8:	4628      	mov	r0, r5
 80079ba:	47b0      	blx	r6
 80079bc:	1c41      	adds	r1, r0, #1
 80079be:	d1c7      	bne.n	8007950 <__sflush_r+0x34>
 80079c0:	682b      	ldr	r3, [r5, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d0c4      	beq.n	8007950 <__sflush_r+0x34>
 80079c6:	2b1d      	cmp	r3, #29
 80079c8:	d001      	beq.n	80079ce <__sflush_r+0xb2>
 80079ca:	2b16      	cmp	r3, #22
 80079cc:	d101      	bne.n	80079d2 <__sflush_r+0xb6>
 80079ce:	602f      	str	r7, [r5, #0]
 80079d0:	e7b1      	b.n	8007936 <__sflush_r+0x1a>
 80079d2:	89a3      	ldrh	r3, [r4, #12]
 80079d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079d8:	81a3      	strh	r3, [r4, #12]
 80079da:	e7ad      	b.n	8007938 <__sflush_r+0x1c>
 80079dc:	690f      	ldr	r7, [r1, #16]
 80079de:	2f00      	cmp	r7, #0
 80079e0:	d0a9      	beq.n	8007936 <__sflush_r+0x1a>
 80079e2:	0793      	lsls	r3, r2, #30
 80079e4:	680e      	ldr	r6, [r1, #0]
 80079e6:	bf08      	it	eq
 80079e8:	694b      	ldreq	r3, [r1, #20]
 80079ea:	600f      	str	r7, [r1, #0]
 80079ec:	bf18      	it	ne
 80079ee:	2300      	movne	r3, #0
 80079f0:	eba6 0807 	sub.w	r8, r6, r7
 80079f4:	608b      	str	r3, [r1, #8]
 80079f6:	f1b8 0f00 	cmp.w	r8, #0
 80079fa:	dd9c      	ble.n	8007936 <__sflush_r+0x1a>
 80079fc:	6a21      	ldr	r1, [r4, #32]
 80079fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007a00:	4643      	mov	r3, r8
 8007a02:	463a      	mov	r2, r7
 8007a04:	4628      	mov	r0, r5
 8007a06:	47b0      	blx	r6
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	dc06      	bgt.n	8007a1a <__sflush_r+0xfe>
 8007a0c:	89a3      	ldrh	r3, [r4, #12]
 8007a0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a12:	81a3      	strh	r3, [r4, #12]
 8007a14:	f04f 30ff 	mov.w	r0, #4294967295
 8007a18:	e78e      	b.n	8007938 <__sflush_r+0x1c>
 8007a1a:	4407      	add	r7, r0
 8007a1c:	eba8 0800 	sub.w	r8, r8, r0
 8007a20:	e7e9      	b.n	80079f6 <__sflush_r+0xda>
 8007a22:	bf00      	nop
 8007a24:	20400001 	.word	0x20400001

08007a28 <_fflush_r>:
 8007a28:	b538      	push	{r3, r4, r5, lr}
 8007a2a:	690b      	ldr	r3, [r1, #16]
 8007a2c:	4605      	mov	r5, r0
 8007a2e:	460c      	mov	r4, r1
 8007a30:	b913      	cbnz	r3, 8007a38 <_fflush_r+0x10>
 8007a32:	2500      	movs	r5, #0
 8007a34:	4628      	mov	r0, r5
 8007a36:	bd38      	pop	{r3, r4, r5, pc}
 8007a38:	b118      	cbz	r0, 8007a42 <_fflush_r+0x1a>
 8007a3a:	6983      	ldr	r3, [r0, #24]
 8007a3c:	b90b      	cbnz	r3, 8007a42 <_fflush_r+0x1a>
 8007a3e:	f000 f887 	bl	8007b50 <__sinit>
 8007a42:	4b14      	ldr	r3, [pc, #80]	; (8007a94 <_fflush_r+0x6c>)
 8007a44:	429c      	cmp	r4, r3
 8007a46:	d11b      	bne.n	8007a80 <_fflush_r+0x58>
 8007a48:	686c      	ldr	r4, [r5, #4]
 8007a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d0ef      	beq.n	8007a32 <_fflush_r+0xa>
 8007a52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a54:	07d0      	lsls	r0, r2, #31
 8007a56:	d404      	bmi.n	8007a62 <_fflush_r+0x3a>
 8007a58:	0599      	lsls	r1, r3, #22
 8007a5a:	d402      	bmi.n	8007a62 <_fflush_r+0x3a>
 8007a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a5e:	f000 f927 	bl	8007cb0 <__retarget_lock_acquire_recursive>
 8007a62:	4628      	mov	r0, r5
 8007a64:	4621      	mov	r1, r4
 8007a66:	f7ff ff59 	bl	800791c <__sflush_r>
 8007a6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a6c:	07da      	lsls	r2, r3, #31
 8007a6e:	4605      	mov	r5, r0
 8007a70:	d4e0      	bmi.n	8007a34 <_fflush_r+0xc>
 8007a72:	89a3      	ldrh	r3, [r4, #12]
 8007a74:	059b      	lsls	r3, r3, #22
 8007a76:	d4dd      	bmi.n	8007a34 <_fflush_r+0xc>
 8007a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a7a:	f000 f91a 	bl	8007cb2 <__retarget_lock_release_recursive>
 8007a7e:	e7d9      	b.n	8007a34 <_fflush_r+0xc>
 8007a80:	4b05      	ldr	r3, [pc, #20]	; (8007a98 <_fflush_r+0x70>)
 8007a82:	429c      	cmp	r4, r3
 8007a84:	d101      	bne.n	8007a8a <_fflush_r+0x62>
 8007a86:	68ac      	ldr	r4, [r5, #8]
 8007a88:	e7df      	b.n	8007a4a <_fflush_r+0x22>
 8007a8a:	4b04      	ldr	r3, [pc, #16]	; (8007a9c <_fflush_r+0x74>)
 8007a8c:	429c      	cmp	r4, r3
 8007a8e:	bf08      	it	eq
 8007a90:	68ec      	ldreq	r4, [r5, #12]
 8007a92:	e7da      	b.n	8007a4a <_fflush_r+0x22>
 8007a94:	08008a20 	.word	0x08008a20
 8007a98:	08008a40 	.word	0x08008a40
 8007a9c:	08008a00 	.word	0x08008a00

08007aa0 <std>:
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	b510      	push	{r4, lr}
 8007aa4:	4604      	mov	r4, r0
 8007aa6:	e9c0 3300 	strd	r3, r3, [r0]
 8007aaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007aae:	6083      	str	r3, [r0, #8]
 8007ab0:	8181      	strh	r1, [r0, #12]
 8007ab2:	6643      	str	r3, [r0, #100]	; 0x64
 8007ab4:	81c2      	strh	r2, [r0, #14]
 8007ab6:	6183      	str	r3, [r0, #24]
 8007ab8:	4619      	mov	r1, r3
 8007aba:	2208      	movs	r2, #8
 8007abc:	305c      	adds	r0, #92	; 0x5c
 8007abe:	f7ff fcc9 	bl	8007454 <memset>
 8007ac2:	4b05      	ldr	r3, [pc, #20]	; (8007ad8 <std+0x38>)
 8007ac4:	6263      	str	r3, [r4, #36]	; 0x24
 8007ac6:	4b05      	ldr	r3, [pc, #20]	; (8007adc <std+0x3c>)
 8007ac8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007aca:	4b05      	ldr	r3, [pc, #20]	; (8007ae0 <std+0x40>)
 8007acc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ace:	4b05      	ldr	r3, [pc, #20]	; (8007ae4 <std+0x44>)
 8007ad0:	6224      	str	r4, [r4, #32]
 8007ad2:	6323      	str	r3, [r4, #48]	; 0x30
 8007ad4:	bd10      	pop	{r4, pc}
 8007ad6:	bf00      	nop
 8007ad8:	0800854d 	.word	0x0800854d
 8007adc:	0800856f 	.word	0x0800856f
 8007ae0:	080085a7 	.word	0x080085a7
 8007ae4:	080085cb 	.word	0x080085cb

08007ae8 <_cleanup_r>:
 8007ae8:	4901      	ldr	r1, [pc, #4]	; (8007af0 <_cleanup_r+0x8>)
 8007aea:	f000 b8c1 	b.w	8007c70 <_fwalk_reent>
 8007aee:	bf00      	nop
 8007af0:	08007a29 	.word	0x08007a29

08007af4 <__sfmoreglue>:
 8007af4:	b570      	push	{r4, r5, r6, lr}
 8007af6:	2268      	movs	r2, #104	; 0x68
 8007af8:	1e4d      	subs	r5, r1, #1
 8007afa:	4355      	muls	r5, r2
 8007afc:	460e      	mov	r6, r1
 8007afe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007b02:	f000 f9b1 	bl	8007e68 <_malloc_r>
 8007b06:	4604      	mov	r4, r0
 8007b08:	b140      	cbz	r0, 8007b1c <__sfmoreglue+0x28>
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	e9c0 1600 	strd	r1, r6, [r0]
 8007b10:	300c      	adds	r0, #12
 8007b12:	60a0      	str	r0, [r4, #8]
 8007b14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007b18:	f7ff fc9c 	bl	8007454 <memset>
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	bd70      	pop	{r4, r5, r6, pc}

08007b20 <__sfp_lock_acquire>:
 8007b20:	4801      	ldr	r0, [pc, #4]	; (8007b28 <__sfp_lock_acquire+0x8>)
 8007b22:	f000 b8c5 	b.w	8007cb0 <__retarget_lock_acquire_recursive>
 8007b26:	bf00      	nop
 8007b28:	2000051d 	.word	0x2000051d

08007b2c <__sfp_lock_release>:
 8007b2c:	4801      	ldr	r0, [pc, #4]	; (8007b34 <__sfp_lock_release+0x8>)
 8007b2e:	f000 b8c0 	b.w	8007cb2 <__retarget_lock_release_recursive>
 8007b32:	bf00      	nop
 8007b34:	2000051d 	.word	0x2000051d

08007b38 <__sinit_lock_acquire>:
 8007b38:	4801      	ldr	r0, [pc, #4]	; (8007b40 <__sinit_lock_acquire+0x8>)
 8007b3a:	f000 b8b9 	b.w	8007cb0 <__retarget_lock_acquire_recursive>
 8007b3e:	bf00      	nop
 8007b40:	2000051e 	.word	0x2000051e

08007b44 <__sinit_lock_release>:
 8007b44:	4801      	ldr	r0, [pc, #4]	; (8007b4c <__sinit_lock_release+0x8>)
 8007b46:	f000 b8b4 	b.w	8007cb2 <__retarget_lock_release_recursive>
 8007b4a:	bf00      	nop
 8007b4c:	2000051e 	.word	0x2000051e

08007b50 <__sinit>:
 8007b50:	b510      	push	{r4, lr}
 8007b52:	4604      	mov	r4, r0
 8007b54:	f7ff fff0 	bl	8007b38 <__sinit_lock_acquire>
 8007b58:	69a3      	ldr	r3, [r4, #24]
 8007b5a:	b11b      	cbz	r3, 8007b64 <__sinit+0x14>
 8007b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b60:	f7ff bff0 	b.w	8007b44 <__sinit_lock_release>
 8007b64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007b68:	6523      	str	r3, [r4, #80]	; 0x50
 8007b6a:	4b13      	ldr	r3, [pc, #76]	; (8007bb8 <__sinit+0x68>)
 8007b6c:	4a13      	ldr	r2, [pc, #76]	; (8007bbc <__sinit+0x6c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	62a2      	str	r2, [r4, #40]	; 0x28
 8007b72:	42a3      	cmp	r3, r4
 8007b74:	bf04      	itt	eq
 8007b76:	2301      	moveq	r3, #1
 8007b78:	61a3      	streq	r3, [r4, #24]
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f000 f820 	bl	8007bc0 <__sfp>
 8007b80:	6060      	str	r0, [r4, #4]
 8007b82:	4620      	mov	r0, r4
 8007b84:	f000 f81c 	bl	8007bc0 <__sfp>
 8007b88:	60a0      	str	r0, [r4, #8]
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	f000 f818 	bl	8007bc0 <__sfp>
 8007b90:	2200      	movs	r2, #0
 8007b92:	60e0      	str	r0, [r4, #12]
 8007b94:	2104      	movs	r1, #4
 8007b96:	6860      	ldr	r0, [r4, #4]
 8007b98:	f7ff ff82 	bl	8007aa0 <std>
 8007b9c:	68a0      	ldr	r0, [r4, #8]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	2109      	movs	r1, #9
 8007ba2:	f7ff ff7d 	bl	8007aa0 <std>
 8007ba6:	68e0      	ldr	r0, [r4, #12]
 8007ba8:	2202      	movs	r2, #2
 8007baa:	2112      	movs	r1, #18
 8007bac:	f7ff ff78 	bl	8007aa0 <std>
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	61a3      	str	r3, [r4, #24]
 8007bb4:	e7d2      	b.n	8007b5c <__sinit+0xc>
 8007bb6:	bf00      	nop
 8007bb8:	08008848 	.word	0x08008848
 8007bbc:	08007ae9 	.word	0x08007ae9

08007bc0 <__sfp>:
 8007bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bc2:	4607      	mov	r7, r0
 8007bc4:	f7ff ffac 	bl	8007b20 <__sfp_lock_acquire>
 8007bc8:	4b1e      	ldr	r3, [pc, #120]	; (8007c44 <__sfp+0x84>)
 8007bca:	681e      	ldr	r6, [r3, #0]
 8007bcc:	69b3      	ldr	r3, [r6, #24]
 8007bce:	b913      	cbnz	r3, 8007bd6 <__sfp+0x16>
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	f7ff ffbd 	bl	8007b50 <__sinit>
 8007bd6:	3648      	adds	r6, #72	; 0x48
 8007bd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	d503      	bpl.n	8007be8 <__sfp+0x28>
 8007be0:	6833      	ldr	r3, [r6, #0]
 8007be2:	b30b      	cbz	r3, 8007c28 <__sfp+0x68>
 8007be4:	6836      	ldr	r6, [r6, #0]
 8007be6:	e7f7      	b.n	8007bd8 <__sfp+0x18>
 8007be8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007bec:	b9d5      	cbnz	r5, 8007c24 <__sfp+0x64>
 8007bee:	4b16      	ldr	r3, [pc, #88]	; (8007c48 <__sfp+0x88>)
 8007bf0:	60e3      	str	r3, [r4, #12]
 8007bf2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007bf6:	6665      	str	r5, [r4, #100]	; 0x64
 8007bf8:	f000 f859 	bl	8007cae <__retarget_lock_init_recursive>
 8007bfc:	f7ff ff96 	bl	8007b2c <__sfp_lock_release>
 8007c00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007c04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007c08:	6025      	str	r5, [r4, #0]
 8007c0a:	61a5      	str	r5, [r4, #24]
 8007c0c:	2208      	movs	r2, #8
 8007c0e:	4629      	mov	r1, r5
 8007c10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007c14:	f7ff fc1e 	bl	8007454 <memset>
 8007c18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007c1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007c20:	4620      	mov	r0, r4
 8007c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c24:	3468      	adds	r4, #104	; 0x68
 8007c26:	e7d9      	b.n	8007bdc <__sfp+0x1c>
 8007c28:	2104      	movs	r1, #4
 8007c2a:	4638      	mov	r0, r7
 8007c2c:	f7ff ff62 	bl	8007af4 <__sfmoreglue>
 8007c30:	4604      	mov	r4, r0
 8007c32:	6030      	str	r0, [r6, #0]
 8007c34:	2800      	cmp	r0, #0
 8007c36:	d1d5      	bne.n	8007be4 <__sfp+0x24>
 8007c38:	f7ff ff78 	bl	8007b2c <__sfp_lock_release>
 8007c3c:	230c      	movs	r3, #12
 8007c3e:	603b      	str	r3, [r7, #0]
 8007c40:	e7ee      	b.n	8007c20 <__sfp+0x60>
 8007c42:	bf00      	nop
 8007c44:	08008848 	.word	0x08008848
 8007c48:	ffff0001 	.word	0xffff0001

08007c4c <fiprintf>:
 8007c4c:	b40e      	push	{r1, r2, r3}
 8007c4e:	b503      	push	{r0, r1, lr}
 8007c50:	4601      	mov	r1, r0
 8007c52:	ab03      	add	r3, sp, #12
 8007c54:	4805      	ldr	r0, [pc, #20]	; (8007c6c <fiprintf+0x20>)
 8007c56:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c5a:	6800      	ldr	r0, [r0, #0]
 8007c5c:	9301      	str	r3, [sp, #4]
 8007c5e:	f000 f9a1 	bl	8007fa4 <_vfiprintf_r>
 8007c62:	b002      	add	sp, #8
 8007c64:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c68:	b003      	add	sp, #12
 8007c6a:	4770      	bx	lr
 8007c6c:	20000194 	.word	0x20000194

08007c70 <_fwalk_reent>:
 8007c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c74:	4606      	mov	r6, r0
 8007c76:	4688      	mov	r8, r1
 8007c78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007c7c:	2700      	movs	r7, #0
 8007c7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c82:	f1b9 0901 	subs.w	r9, r9, #1
 8007c86:	d505      	bpl.n	8007c94 <_fwalk_reent+0x24>
 8007c88:	6824      	ldr	r4, [r4, #0]
 8007c8a:	2c00      	cmp	r4, #0
 8007c8c:	d1f7      	bne.n	8007c7e <_fwalk_reent+0xe>
 8007c8e:	4638      	mov	r0, r7
 8007c90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c94:	89ab      	ldrh	r3, [r5, #12]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d907      	bls.n	8007caa <_fwalk_reent+0x3a>
 8007c9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	d003      	beq.n	8007caa <_fwalk_reent+0x3a>
 8007ca2:	4629      	mov	r1, r5
 8007ca4:	4630      	mov	r0, r6
 8007ca6:	47c0      	blx	r8
 8007ca8:	4307      	orrs	r7, r0
 8007caa:	3568      	adds	r5, #104	; 0x68
 8007cac:	e7e9      	b.n	8007c82 <_fwalk_reent+0x12>

08007cae <__retarget_lock_init_recursive>:
 8007cae:	4770      	bx	lr

08007cb0 <__retarget_lock_acquire_recursive>:
 8007cb0:	4770      	bx	lr

08007cb2 <__retarget_lock_release_recursive>:
 8007cb2:	4770      	bx	lr

08007cb4 <__swhatbuf_r>:
 8007cb4:	b570      	push	{r4, r5, r6, lr}
 8007cb6:	460e      	mov	r6, r1
 8007cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cbc:	2900      	cmp	r1, #0
 8007cbe:	b096      	sub	sp, #88	; 0x58
 8007cc0:	4614      	mov	r4, r2
 8007cc2:	461d      	mov	r5, r3
 8007cc4:	da08      	bge.n	8007cd8 <__swhatbuf_r+0x24>
 8007cc6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	602a      	str	r2, [r5, #0]
 8007cce:	061a      	lsls	r2, r3, #24
 8007cd0:	d410      	bmi.n	8007cf4 <__swhatbuf_r+0x40>
 8007cd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cd6:	e00e      	b.n	8007cf6 <__swhatbuf_r+0x42>
 8007cd8:	466a      	mov	r2, sp
 8007cda:	f000 fca5 	bl	8008628 <_fstat_r>
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	dbf1      	blt.n	8007cc6 <__swhatbuf_r+0x12>
 8007ce2:	9a01      	ldr	r2, [sp, #4]
 8007ce4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007ce8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007cec:	425a      	negs	r2, r3
 8007cee:	415a      	adcs	r2, r3
 8007cf0:	602a      	str	r2, [r5, #0]
 8007cf2:	e7ee      	b.n	8007cd2 <__swhatbuf_r+0x1e>
 8007cf4:	2340      	movs	r3, #64	; 0x40
 8007cf6:	2000      	movs	r0, #0
 8007cf8:	6023      	str	r3, [r4, #0]
 8007cfa:	b016      	add	sp, #88	; 0x58
 8007cfc:	bd70      	pop	{r4, r5, r6, pc}
	...

08007d00 <__smakebuf_r>:
 8007d00:	898b      	ldrh	r3, [r1, #12]
 8007d02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d04:	079d      	lsls	r5, r3, #30
 8007d06:	4606      	mov	r6, r0
 8007d08:	460c      	mov	r4, r1
 8007d0a:	d507      	bpl.n	8007d1c <__smakebuf_r+0x1c>
 8007d0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d10:	6023      	str	r3, [r4, #0]
 8007d12:	6123      	str	r3, [r4, #16]
 8007d14:	2301      	movs	r3, #1
 8007d16:	6163      	str	r3, [r4, #20]
 8007d18:	b002      	add	sp, #8
 8007d1a:	bd70      	pop	{r4, r5, r6, pc}
 8007d1c:	ab01      	add	r3, sp, #4
 8007d1e:	466a      	mov	r2, sp
 8007d20:	f7ff ffc8 	bl	8007cb4 <__swhatbuf_r>
 8007d24:	9900      	ldr	r1, [sp, #0]
 8007d26:	4605      	mov	r5, r0
 8007d28:	4630      	mov	r0, r6
 8007d2a:	f000 f89d 	bl	8007e68 <_malloc_r>
 8007d2e:	b948      	cbnz	r0, 8007d44 <__smakebuf_r+0x44>
 8007d30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d34:	059a      	lsls	r2, r3, #22
 8007d36:	d4ef      	bmi.n	8007d18 <__smakebuf_r+0x18>
 8007d38:	f023 0303 	bic.w	r3, r3, #3
 8007d3c:	f043 0302 	orr.w	r3, r3, #2
 8007d40:	81a3      	strh	r3, [r4, #12]
 8007d42:	e7e3      	b.n	8007d0c <__smakebuf_r+0xc>
 8007d44:	4b0d      	ldr	r3, [pc, #52]	; (8007d7c <__smakebuf_r+0x7c>)
 8007d46:	62b3      	str	r3, [r6, #40]	; 0x28
 8007d48:	89a3      	ldrh	r3, [r4, #12]
 8007d4a:	6020      	str	r0, [r4, #0]
 8007d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d50:	81a3      	strh	r3, [r4, #12]
 8007d52:	9b00      	ldr	r3, [sp, #0]
 8007d54:	6163      	str	r3, [r4, #20]
 8007d56:	9b01      	ldr	r3, [sp, #4]
 8007d58:	6120      	str	r0, [r4, #16]
 8007d5a:	b15b      	cbz	r3, 8007d74 <__smakebuf_r+0x74>
 8007d5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d60:	4630      	mov	r0, r6
 8007d62:	f000 fc73 	bl	800864c <_isatty_r>
 8007d66:	b128      	cbz	r0, 8007d74 <__smakebuf_r+0x74>
 8007d68:	89a3      	ldrh	r3, [r4, #12]
 8007d6a:	f023 0303 	bic.w	r3, r3, #3
 8007d6e:	f043 0301 	orr.w	r3, r3, #1
 8007d72:	81a3      	strh	r3, [r4, #12]
 8007d74:	89a0      	ldrh	r0, [r4, #12]
 8007d76:	4305      	orrs	r5, r0
 8007d78:	81a5      	strh	r5, [r4, #12]
 8007d7a:	e7cd      	b.n	8007d18 <__smakebuf_r+0x18>
 8007d7c:	08007ae9 	.word	0x08007ae9

08007d80 <malloc>:
 8007d80:	4b02      	ldr	r3, [pc, #8]	; (8007d8c <malloc+0xc>)
 8007d82:	4601      	mov	r1, r0
 8007d84:	6818      	ldr	r0, [r3, #0]
 8007d86:	f000 b86f 	b.w	8007e68 <_malloc_r>
 8007d8a:	bf00      	nop
 8007d8c:	20000194 	.word	0x20000194

08007d90 <_free_r>:
 8007d90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d92:	2900      	cmp	r1, #0
 8007d94:	d044      	beq.n	8007e20 <_free_r+0x90>
 8007d96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d9a:	9001      	str	r0, [sp, #4]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f1a1 0404 	sub.w	r4, r1, #4
 8007da2:	bfb8      	it	lt
 8007da4:	18e4      	addlt	r4, r4, r3
 8007da6:	f000 fc73 	bl	8008690 <__malloc_lock>
 8007daa:	4a1e      	ldr	r2, [pc, #120]	; (8007e24 <_free_r+0x94>)
 8007dac:	9801      	ldr	r0, [sp, #4]
 8007dae:	6813      	ldr	r3, [r2, #0]
 8007db0:	b933      	cbnz	r3, 8007dc0 <_free_r+0x30>
 8007db2:	6063      	str	r3, [r4, #4]
 8007db4:	6014      	str	r4, [r2, #0]
 8007db6:	b003      	add	sp, #12
 8007db8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007dbc:	f000 bc6e 	b.w	800869c <__malloc_unlock>
 8007dc0:	42a3      	cmp	r3, r4
 8007dc2:	d908      	bls.n	8007dd6 <_free_r+0x46>
 8007dc4:	6825      	ldr	r5, [r4, #0]
 8007dc6:	1961      	adds	r1, r4, r5
 8007dc8:	428b      	cmp	r3, r1
 8007dca:	bf01      	itttt	eq
 8007dcc:	6819      	ldreq	r1, [r3, #0]
 8007dce:	685b      	ldreq	r3, [r3, #4]
 8007dd0:	1949      	addeq	r1, r1, r5
 8007dd2:	6021      	streq	r1, [r4, #0]
 8007dd4:	e7ed      	b.n	8007db2 <_free_r+0x22>
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	b10b      	cbz	r3, 8007de0 <_free_r+0x50>
 8007ddc:	42a3      	cmp	r3, r4
 8007dde:	d9fa      	bls.n	8007dd6 <_free_r+0x46>
 8007de0:	6811      	ldr	r1, [r2, #0]
 8007de2:	1855      	adds	r5, r2, r1
 8007de4:	42a5      	cmp	r5, r4
 8007de6:	d10b      	bne.n	8007e00 <_free_r+0x70>
 8007de8:	6824      	ldr	r4, [r4, #0]
 8007dea:	4421      	add	r1, r4
 8007dec:	1854      	adds	r4, r2, r1
 8007dee:	42a3      	cmp	r3, r4
 8007df0:	6011      	str	r1, [r2, #0]
 8007df2:	d1e0      	bne.n	8007db6 <_free_r+0x26>
 8007df4:	681c      	ldr	r4, [r3, #0]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	6053      	str	r3, [r2, #4]
 8007dfa:	4421      	add	r1, r4
 8007dfc:	6011      	str	r1, [r2, #0]
 8007dfe:	e7da      	b.n	8007db6 <_free_r+0x26>
 8007e00:	d902      	bls.n	8007e08 <_free_r+0x78>
 8007e02:	230c      	movs	r3, #12
 8007e04:	6003      	str	r3, [r0, #0]
 8007e06:	e7d6      	b.n	8007db6 <_free_r+0x26>
 8007e08:	6825      	ldr	r5, [r4, #0]
 8007e0a:	1961      	adds	r1, r4, r5
 8007e0c:	428b      	cmp	r3, r1
 8007e0e:	bf04      	itt	eq
 8007e10:	6819      	ldreq	r1, [r3, #0]
 8007e12:	685b      	ldreq	r3, [r3, #4]
 8007e14:	6063      	str	r3, [r4, #4]
 8007e16:	bf04      	itt	eq
 8007e18:	1949      	addeq	r1, r1, r5
 8007e1a:	6021      	streq	r1, [r4, #0]
 8007e1c:	6054      	str	r4, [r2, #4]
 8007e1e:	e7ca      	b.n	8007db6 <_free_r+0x26>
 8007e20:	b003      	add	sp, #12
 8007e22:	bd30      	pop	{r4, r5, pc}
 8007e24:	20000520 	.word	0x20000520

08007e28 <sbrk_aligned>:
 8007e28:	b570      	push	{r4, r5, r6, lr}
 8007e2a:	4e0e      	ldr	r6, [pc, #56]	; (8007e64 <sbrk_aligned+0x3c>)
 8007e2c:	460c      	mov	r4, r1
 8007e2e:	6831      	ldr	r1, [r6, #0]
 8007e30:	4605      	mov	r5, r0
 8007e32:	b911      	cbnz	r1, 8007e3a <sbrk_aligned+0x12>
 8007e34:	f000 fb7a 	bl	800852c <_sbrk_r>
 8007e38:	6030      	str	r0, [r6, #0]
 8007e3a:	4621      	mov	r1, r4
 8007e3c:	4628      	mov	r0, r5
 8007e3e:	f000 fb75 	bl	800852c <_sbrk_r>
 8007e42:	1c43      	adds	r3, r0, #1
 8007e44:	d00a      	beq.n	8007e5c <sbrk_aligned+0x34>
 8007e46:	1cc4      	adds	r4, r0, #3
 8007e48:	f024 0403 	bic.w	r4, r4, #3
 8007e4c:	42a0      	cmp	r0, r4
 8007e4e:	d007      	beq.n	8007e60 <sbrk_aligned+0x38>
 8007e50:	1a21      	subs	r1, r4, r0
 8007e52:	4628      	mov	r0, r5
 8007e54:	f000 fb6a 	bl	800852c <_sbrk_r>
 8007e58:	3001      	adds	r0, #1
 8007e5a:	d101      	bne.n	8007e60 <sbrk_aligned+0x38>
 8007e5c:	f04f 34ff 	mov.w	r4, #4294967295
 8007e60:	4620      	mov	r0, r4
 8007e62:	bd70      	pop	{r4, r5, r6, pc}
 8007e64:	20000524 	.word	0x20000524

08007e68 <_malloc_r>:
 8007e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e6c:	1ccd      	adds	r5, r1, #3
 8007e6e:	f025 0503 	bic.w	r5, r5, #3
 8007e72:	3508      	adds	r5, #8
 8007e74:	2d0c      	cmp	r5, #12
 8007e76:	bf38      	it	cc
 8007e78:	250c      	movcc	r5, #12
 8007e7a:	2d00      	cmp	r5, #0
 8007e7c:	4607      	mov	r7, r0
 8007e7e:	db01      	blt.n	8007e84 <_malloc_r+0x1c>
 8007e80:	42a9      	cmp	r1, r5
 8007e82:	d905      	bls.n	8007e90 <_malloc_r+0x28>
 8007e84:	230c      	movs	r3, #12
 8007e86:	603b      	str	r3, [r7, #0]
 8007e88:	2600      	movs	r6, #0
 8007e8a:	4630      	mov	r0, r6
 8007e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e90:	4e2e      	ldr	r6, [pc, #184]	; (8007f4c <_malloc_r+0xe4>)
 8007e92:	f000 fbfd 	bl	8008690 <__malloc_lock>
 8007e96:	6833      	ldr	r3, [r6, #0]
 8007e98:	461c      	mov	r4, r3
 8007e9a:	bb34      	cbnz	r4, 8007eea <_malloc_r+0x82>
 8007e9c:	4629      	mov	r1, r5
 8007e9e:	4638      	mov	r0, r7
 8007ea0:	f7ff ffc2 	bl	8007e28 <sbrk_aligned>
 8007ea4:	1c43      	adds	r3, r0, #1
 8007ea6:	4604      	mov	r4, r0
 8007ea8:	d14d      	bne.n	8007f46 <_malloc_r+0xde>
 8007eaa:	6834      	ldr	r4, [r6, #0]
 8007eac:	4626      	mov	r6, r4
 8007eae:	2e00      	cmp	r6, #0
 8007eb0:	d140      	bne.n	8007f34 <_malloc_r+0xcc>
 8007eb2:	6823      	ldr	r3, [r4, #0]
 8007eb4:	4631      	mov	r1, r6
 8007eb6:	4638      	mov	r0, r7
 8007eb8:	eb04 0803 	add.w	r8, r4, r3
 8007ebc:	f000 fb36 	bl	800852c <_sbrk_r>
 8007ec0:	4580      	cmp	r8, r0
 8007ec2:	d13a      	bne.n	8007f3a <_malloc_r+0xd2>
 8007ec4:	6821      	ldr	r1, [r4, #0]
 8007ec6:	3503      	adds	r5, #3
 8007ec8:	1a6d      	subs	r5, r5, r1
 8007eca:	f025 0503 	bic.w	r5, r5, #3
 8007ece:	3508      	adds	r5, #8
 8007ed0:	2d0c      	cmp	r5, #12
 8007ed2:	bf38      	it	cc
 8007ed4:	250c      	movcc	r5, #12
 8007ed6:	4629      	mov	r1, r5
 8007ed8:	4638      	mov	r0, r7
 8007eda:	f7ff ffa5 	bl	8007e28 <sbrk_aligned>
 8007ede:	3001      	adds	r0, #1
 8007ee0:	d02b      	beq.n	8007f3a <_malloc_r+0xd2>
 8007ee2:	6823      	ldr	r3, [r4, #0]
 8007ee4:	442b      	add	r3, r5
 8007ee6:	6023      	str	r3, [r4, #0]
 8007ee8:	e00e      	b.n	8007f08 <_malloc_r+0xa0>
 8007eea:	6822      	ldr	r2, [r4, #0]
 8007eec:	1b52      	subs	r2, r2, r5
 8007eee:	d41e      	bmi.n	8007f2e <_malloc_r+0xc6>
 8007ef0:	2a0b      	cmp	r2, #11
 8007ef2:	d916      	bls.n	8007f22 <_malloc_r+0xba>
 8007ef4:	1961      	adds	r1, r4, r5
 8007ef6:	42a3      	cmp	r3, r4
 8007ef8:	6025      	str	r5, [r4, #0]
 8007efa:	bf18      	it	ne
 8007efc:	6059      	strne	r1, [r3, #4]
 8007efe:	6863      	ldr	r3, [r4, #4]
 8007f00:	bf08      	it	eq
 8007f02:	6031      	streq	r1, [r6, #0]
 8007f04:	5162      	str	r2, [r4, r5]
 8007f06:	604b      	str	r3, [r1, #4]
 8007f08:	4638      	mov	r0, r7
 8007f0a:	f104 060b 	add.w	r6, r4, #11
 8007f0e:	f000 fbc5 	bl	800869c <__malloc_unlock>
 8007f12:	f026 0607 	bic.w	r6, r6, #7
 8007f16:	1d23      	adds	r3, r4, #4
 8007f18:	1af2      	subs	r2, r6, r3
 8007f1a:	d0b6      	beq.n	8007e8a <_malloc_r+0x22>
 8007f1c:	1b9b      	subs	r3, r3, r6
 8007f1e:	50a3      	str	r3, [r4, r2]
 8007f20:	e7b3      	b.n	8007e8a <_malloc_r+0x22>
 8007f22:	6862      	ldr	r2, [r4, #4]
 8007f24:	42a3      	cmp	r3, r4
 8007f26:	bf0c      	ite	eq
 8007f28:	6032      	streq	r2, [r6, #0]
 8007f2a:	605a      	strne	r2, [r3, #4]
 8007f2c:	e7ec      	b.n	8007f08 <_malloc_r+0xa0>
 8007f2e:	4623      	mov	r3, r4
 8007f30:	6864      	ldr	r4, [r4, #4]
 8007f32:	e7b2      	b.n	8007e9a <_malloc_r+0x32>
 8007f34:	4634      	mov	r4, r6
 8007f36:	6876      	ldr	r6, [r6, #4]
 8007f38:	e7b9      	b.n	8007eae <_malloc_r+0x46>
 8007f3a:	230c      	movs	r3, #12
 8007f3c:	603b      	str	r3, [r7, #0]
 8007f3e:	4638      	mov	r0, r7
 8007f40:	f000 fbac 	bl	800869c <__malloc_unlock>
 8007f44:	e7a1      	b.n	8007e8a <_malloc_r+0x22>
 8007f46:	6025      	str	r5, [r4, #0]
 8007f48:	e7de      	b.n	8007f08 <_malloc_r+0xa0>
 8007f4a:	bf00      	nop
 8007f4c:	20000520 	.word	0x20000520

08007f50 <__sfputc_r>:
 8007f50:	6893      	ldr	r3, [r2, #8]
 8007f52:	3b01      	subs	r3, #1
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	b410      	push	{r4}
 8007f58:	6093      	str	r3, [r2, #8]
 8007f5a:	da08      	bge.n	8007f6e <__sfputc_r+0x1e>
 8007f5c:	6994      	ldr	r4, [r2, #24]
 8007f5e:	42a3      	cmp	r3, r4
 8007f60:	db01      	blt.n	8007f66 <__sfputc_r+0x16>
 8007f62:	290a      	cmp	r1, #10
 8007f64:	d103      	bne.n	8007f6e <__sfputc_r+0x1e>
 8007f66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f6a:	f7ff bbf9 	b.w	8007760 <__swbuf_r>
 8007f6e:	6813      	ldr	r3, [r2, #0]
 8007f70:	1c58      	adds	r0, r3, #1
 8007f72:	6010      	str	r0, [r2, #0]
 8007f74:	7019      	strb	r1, [r3, #0]
 8007f76:	4608      	mov	r0, r1
 8007f78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f7c:	4770      	bx	lr

08007f7e <__sfputs_r>:
 8007f7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f80:	4606      	mov	r6, r0
 8007f82:	460f      	mov	r7, r1
 8007f84:	4614      	mov	r4, r2
 8007f86:	18d5      	adds	r5, r2, r3
 8007f88:	42ac      	cmp	r4, r5
 8007f8a:	d101      	bne.n	8007f90 <__sfputs_r+0x12>
 8007f8c:	2000      	movs	r0, #0
 8007f8e:	e007      	b.n	8007fa0 <__sfputs_r+0x22>
 8007f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f94:	463a      	mov	r2, r7
 8007f96:	4630      	mov	r0, r6
 8007f98:	f7ff ffda 	bl	8007f50 <__sfputc_r>
 8007f9c:	1c43      	adds	r3, r0, #1
 8007f9e:	d1f3      	bne.n	8007f88 <__sfputs_r+0xa>
 8007fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007fa4 <_vfiprintf_r>:
 8007fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa8:	460d      	mov	r5, r1
 8007faa:	b09d      	sub	sp, #116	; 0x74
 8007fac:	4614      	mov	r4, r2
 8007fae:	4698      	mov	r8, r3
 8007fb0:	4606      	mov	r6, r0
 8007fb2:	b118      	cbz	r0, 8007fbc <_vfiprintf_r+0x18>
 8007fb4:	6983      	ldr	r3, [r0, #24]
 8007fb6:	b90b      	cbnz	r3, 8007fbc <_vfiprintf_r+0x18>
 8007fb8:	f7ff fdca 	bl	8007b50 <__sinit>
 8007fbc:	4b89      	ldr	r3, [pc, #548]	; (80081e4 <_vfiprintf_r+0x240>)
 8007fbe:	429d      	cmp	r5, r3
 8007fc0:	d11b      	bne.n	8007ffa <_vfiprintf_r+0x56>
 8007fc2:	6875      	ldr	r5, [r6, #4]
 8007fc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fc6:	07d9      	lsls	r1, r3, #31
 8007fc8:	d405      	bmi.n	8007fd6 <_vfiprintf_r+0x32>
 8007fca:	89ab      	ldrh	r3, [r5, #12]
 8007fcc:	059a      	lsls	r2, r3, #22
 8007fce:	d402      	bmi.n	8007fd6 <_vfiprintf_r+0x32>
 8007fd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fd2:	f7ff fe6d 	bl	8007cb0 <__retarget_lock_acquire_recursive>
 8007fd6:	89ab      	ldrh	r3, [r5, #12]
 8007fd8:	071b      	lsls	r3, r3, #28
 8007fda:	d501      	bpl.n	8007fe0 <_vfiprintf_r+0x3c>
 8007fdc:	692b      	ldr	r3, [r5, #16]
 8007fde:	b9eb      	cbnz	r3, 800801c <_vfiprintf_r+0x78>
 8007fe0:	4629      	mov	r1, r5
 8007fe2:	4630      	mov	r0, r6
 8007fe4:	f7ff fc0e 	bl	8007804 <__swsetup_r>
 8007fe8:	b1c0      	cbz	r0, 800801c <_vfiprintf_r+0x78>
 8007fea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fec:	07dc      	lsls	r4, r3, #31
 8007fee:	d50e      	bpl.n	800800e <_vfiprintf_r+0x6a>
 8007ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ff4:	b01d      	add	sp, #116	; 0x74
 8007ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ffa:	4b7b      	ldr	r3, [pc, #492]	; (80081e8 <_vfiprintf_r+0x244>)
 8007ffc:	429d      	cmp	r5, r3
 8007ffe:	d101      	bne.n	8008004 <_vfiprintf_r+0x60>
 8008000:	68b5      	ldr	r5, [r6, #8]
 8008002:	e7df      	b.n	8007fc4 <_vfiprintf_r+0x20>
 8008004:	4b79      	ldr	r3, [pc, #484]	; (80081ec <_vfiprintf_r+0x248>)
 8008006:	429d      	cmp	r5, r3
 8008008:	bf08      	it	eq
 800800a:	68f5      	ldreq	r5, [r6, #12]
 800800c:	e7da      	b.n	8007fc4 <_vfiprintf_r+0x20>
 800800e:	89ab      	ldrh	r3, [r5, #12]
 8008010:	0598      	lsls	r0, r3, #22
 8008012:	d4ed      	bmi.n	8007ff0 <_vfiprintf_r+0x4c>
 8008014:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008016:	f7ff fe4c 	bl	8007cb2 <__retarget_lock_release_recursive>
 800801a:	e7e9      	b.n	8007ff0 <_vfiprintf_r+0x4c>
 800801c:	2300      	movs	r3, #0
 800801e:	9309      	str	r3, [sp, #36]	; 0x24
 8008020:	2320      	movs	r3, #32
 8008022:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008026:	f8cd 800c 	str.w	r8, [sp, #12]
 800802a:	2330      	movs	r3, #48	; 0x30
 800802c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80081f0 <_vfiprintf_r+0x24c>
 8008030:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008034:	f04f 0901 	mov.w	r9, #1
 8008038:	4623      	mov	r3, r4
 800803a:	469a      	mov	sl, r3
 800803c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008040:	b10a      	cbz	r2, 8008046 <_vfiprintf_r+0xa2>
 8008042:	2a25      	cmp	r2, #37	; 0x25
 8008044:	d1f9      	bne.n	800803a <_vfiprintf_r+0x96>
 8008046:	ebba 0b04 	subs.w	fp, sl, r4
 800804a:	d00b      	beq.n	8008064 <_vfiprintf_r+0xc0>
 800804c:	465b      	mov	r3, fp
 800804e:	4622      	mov	r2, r4
 8008050:	4629      	mov	r1, r5
 8008052:	4630      	mov	r0, r6
 8008054:	f7ff ff93 	bl	8007f7e <__sfputs_r>
 8008058:	3001      	adds	r0, #1
 800805a:	f000 80aa 	beq.w	80081b2 <_vfiprintf_r+0x20e>
 800805e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008060:	445a      	add	r2, fp
 8008062:	9209      	str	r2, [sp, #36]	; 0x24
 8008064:	f89a 3000 	ldrb.w	r3, [sl]
 8008068:	2b00      	cmp	r3, #0
 800806a:	f000 80a2 	beq.w	80081b2 <_vfiprintf_r+0x20e>
 800806e:	2300      	movs	r3, #0
 8008070:	f04f 32ff 	mov.w	r2, #4294967295
 8008074:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008078:	f10a 0a01 	add.w	sl, sl, #1
 800807c:	9304      	str	r3, [sp, #16]
 800807e:	9307      	str	r3, [sp, #28]
 8008080:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008084:	931a      	str	r3, [sp, #104]	; 0x68
 8008086:	4654      	mov	r4, sl
 8008088:	2205      	movs	r2, #5
 800808a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800808e:	4858      	ldr	r0, [pc, #352]	; (80081f0 <_vfiprintf_r+0x24c>)
 8008090:	f7f8 f8ae 	bl	80001f0 <memchr>
 8008094:	9a04      	ldr	r2, [sp, #16]
 8008096:	b9d8      	cbnz	r0, 80080d0 <_vfiprintf_r+0x12c>
 8008098:	06d1      	lsls	r1, r2, #27
 800809a:	bf44      	itt	mi
 800809c:	2320      	movmi	r3, #32
 800809e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080a2:	0713      	lsls	r3, r2, #28
 80080a4:	bf44      	itt	mi
 80080a6:	232b      	movmi	r3, #43	; 0x2b
 80080a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080ac:	f89a 3000 	ldrb.w	r3, [sl]
 80080b0:	2b2a      	cmp	r3, #42	; 0x2a
 80080b2:	d015      	beq.n	80080e0 <_vfiprintf_r+0x13c>
 80080b4:	9a07      	ldr	r2, [sp, #28]
 80080b6:	4654      	mov	r4, sl
 80080b8:	2000      	movs	r0, #0
 80080ba:	f04f 0c0a 	mov.w	ip, #10
 80080be:	4621      	mov	r1, r4
 80080c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080c4:	3b30      	subs	r3, #48	; 0x30
 80080c6:	2b09      	cmp	r3, #9
 80080c8:	d94e      	bls.n	8008168 <_vfiprintf_r+0x1c4>
 80080ca:	b1b0      	cbz	r0, 80080fa <_vfiprintf_r+0x156>
 80080cc:	9207      	str	r2, [sp, #28]
 80080ce:	e014      	b.n	80080fa <_vfiprintf_r+0x156>
 80080d0:	eba0 0308 	sub.w	r3, r0, r8
 80080d4:	fa09 f303 	lsl.w	r3, r9, r3
 80080d8:	4313      	orrs	r3, r2
 80080da:	9304      	str	r3, [sp, #16]
 80080dc:	46a2      	mov	sl, r4
 80080de:	e7d2      	b.n	8008086 <_vfiprintf_r+0xe2>
 80080e0:	9b03      	ldr	r3, [sp, #12]
 80080e2:	1d19      	adds	r1, r3, #4
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	9103      	str	r1, [sp, #12]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	bfbb      	ittet	lt
 80080ec:	425b      	neglt	r3, r3
 80080ee:	f042 0202 	orrlt.w	r2, r2, #2
 80080f2:	9307      	strge	r3, [sp, #28]
 80080f4:	9307      	strlt	r3, [sp, #28]
 80080f6:	bfb8      	it	lt
 80080f8:	9204      	strlt	r2, [sp, #16]
 80080fa:	7823      	ldrb	r3, [r4, #0]
 80080fc:	2b2e      	cmp	r3, #46	; 0x2e
 80080fe:	d10c      	bne.n	800811a <_vfiprintf_r+0x176>
 8008100:	7863      	ldrb	r3, [r4, #1]
 8008102:	2b2a      	cmp	r3, #42	; 0x2a
 8008104:	d135      	bne.n	8008172 <_vfiprintf_r+0x1ce>
 8008106:	9b03      	ldr	r3, [sp, #12]
 8008108:	1d1a      	adds	r2, r3, #4
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	9203      	str	r2, [sp, #12]
 800810e:	2b00      	cmp	r3, #0
 8008110:	bfb8      	it	lt
 8008112:	f04f 33ff 	movlt.w	r3, #4294967295
 8008116:	3402      	adds	r4, #2
 8008118:	9305      	str	r3, [sp, #20]
 800811a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008200 <_vfiprintf_r+0x25c>
 800811e:	7821      	ldrb	r1, [r4, #0]
 8008120:	2203      	movs	r2, #3
 8008122:	4650      	mov	r0, sl
 8008124:	f7f8 f864 	bl	80001f0 <memchr>
 8008128:	b140      	cbz	r0, 800813c <_vfiprintf_r+0x198>
 800812a:	2340      	movs	r3, #64	; 0x40
 800812c:	eba0 000a 	sub.w	r0, r0, sl
 8008130:	fa03 f000 	lsl.w	r0, r3, r0
 8008134:	9b04      	ldr	r3, [sp, #16]
 8008136:	4303      	orrs	r3, r0
 8008138:	3401      	adds	r4, #1
 800813a:	9304      	str	r3, [sp, #16]
 800813c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008140:	482c      	ldr	r0, [pc, #176]	; (80081f4 <_vfiprintf_r+0x250>)
 8008142:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008146:	2206      	movs	r2, #6
 8008148:	f7f8 f852 	bl	80001f0 <memchr>
 800814c:	2800      	cmp	r0, #0
 800814e:	d03f      	beq.n	80081d0 <_vfiprintf_r+0x22c>
 8008150:	4b29      	ldr	r3, [pc, #164]	; (80081f8 <_vfiprintf_r+0x254>)
 8008152:	bb1b      	cbnz	r3, 800819c <_vfiprintf_r+0x1f8>
 8008154:	9b03      	ldr	r3, [sp, #12]
 8008156:	3307      	adds	r3, #7
 8008158:	f023 0307 	bic.w	r3, r3, #7
 800815c:	3308      	adds	r3, #8
 800815e:	9303      	str	r3, [sp, #12]
 8008160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008162:	443b      	add	r3, r7
 8008164:	9309      	str	r3, [sp, #36]	; 0x24
 8008166:	e767      	b.n	8008038 <_vfiprintf_r+0x94>
 8008168:	fb0c 3202 	mla	r2, ip, r2, r3
 800816c:	460c      	mov	r4, r1
 800816e:	2001      	movs	r0, #1
 8008170:	e7a5      	b.n	80080be <_vfiprintf_r+0x11a>
 8008172:	2300      	movs	r3, #0
 8008174:	3401      	adds	r4, #1
 8008176:	9305      	str	r3, [sp, #20]
 8008178:	4619      	mov	r1, r3
 800817a:	f04f 0c0a 	mov.w	ip, #10
 800817e:	4620      	mov	r0, r4
 8008180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008184:	3a30      	subs	r2, #48	; 0x30
 8008186:	2a09      	cmp	r2, #9
 8008188:	d903      	bls.n	8008192 <_vfiprintf_r+0x1ee>
 800818a:	2b00      	cmp	r3, #0
 800818c:	d0c5      	beq.n	800811a <_vfiprintf_r+0x176>
 800818e:	9105      	str	r1, [sp, #20]
 8008190:	e7c3      	b.n	800811a <_vfiprintf_r+0x176>
 8008192:	fb0c 2101 	mla	r1, ip, r1, r2
 8008196:	4604      	mov	r4, r0
 8008198:	2301      	movs	r3, #1
 800819a:	e7f0      	b.n	800817e <_vfiprintf_r+0x1da>
 800819c:	ab03      	add	r3, sp, #12
 800819e:	9300      	str	r3, [sp, #0]
 80081a0:	462a      	mov	r2, r5
 80081a2:	4b16      	ldr	r3, [pc, #88]	; (80081fc <_vfiprintf_r+0x258>)
 80081a4:	a904      	add	r1, sp, #16
 80081a6:	4630      	mov	r0, r6
 80081a8:	f3af 8000 	nop.w
 80081ac:	4607      	mov	r7, r0
 80081ae:	1c78      	adds	r0, r7, #1
 80081b0:	d1d6      	bne.n	8008160 <_vfiprintf_r+0x1bc>
 80081b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081b4:	07d9      	lsls	r1, r3, #31
 80081b6:	d405      	bmi.n	80081c4 <_vfiprintf_r+0x220>
 80081b8:	89ab      	ldrh	r3, [r5, #12]
 80081ba:	059a      	lsls	r2, r3, #22
 80081bc:	d402      	bmi.n	80081c4 <_vfiprintf_r+0x220>
 80081be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081c0:	f7ff fd77 	bl	8007cb2 <__retarget_lock_release_recursive>
 80081c4:	89ab      	ldrh	r3, [r5, #12]
 80081c6:	065b      	lsls	r3, r3, #25
 80081c8:	f53f af12 	bmi.w	8007ff0 <_vfiprintf_r+0x4c>
 80081cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081ce:	e711      	b.n	8007ff4 <_vfiprintf_r+0x50>
 80081d0:	ab03      	add	r3, sp, #12
 80081d2:	9300      	str	r3, [sp, #0]
 80081d4:	462a      	mov	r2, r5
 80081d6:	4b09      	ldr	r3, [pc, #36]	; (80081fc <_vfiprintf_r+0x258>)
 80081d8:	a904      	add	r1, sp, #16
 80081da:	4630      	mov	r0, r6
 80081dc:	f000 f880 	bl	80082e0 <_printf_i>
 80081e0:	e7e4      	b.n	80081ac <_vfiprintf_r+0x208>
 80081e2:	bf00      	nop
 80081e4:	08008a20 	.word	0x08008a20
 80081e8:	08008a40 	.word	0x08008a40
 80081ec:	08008a00 	.word	0x08008a00
 80081f0:	08008a60 	.word	0x08008a60
 80081f4:	08008a6a 	.word	0x08008a6a
 80081f8:	00000000 	.word	0x00000000
 80081fc:	08007f7f 	.word	0x08007f7f
 8008200:	08008a66 	.word	0x08008a66

08008204 <_printf_common>:
 8008204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008208:	4616      	mov	r6, r2
 800820a:	4699      	mov	r9, r3
 800820c:	688a      	ldr	r2, [r1, #8]
 800820e:	690b      	ldr	r3, [r1, #16]
 8008210:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008214:	4293      	cmp	r3, r2
 8008216:	bfb8      	it	lt
 8008218:	4613      	movlt	r3, r2
 800821a:	6033      	str	r3, [r6, #0]
 800821c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008220:	4607      	mov	r7, r0
 8008222:	460c      	mov	r4, r1
 8008224:	b10a      	cbz	r2, 800822a <_printf_common+0x26>
 8008226:	3301      	adds	r3, #1
 8008228:	6033      	str	r3, [r6, #0]
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	0699      	lsls	r1, r3, #26
 800822e:	bf42      	ittt	mi
 8008230:	6833      	ldrmi	r3, [r6, #0]
 8008232:	3302      	addmi	r3, #2
 8008234:	6033      	strmi	r3, [r6, #0]
 8008236:	6825      	ldr	r5, [r4, #0]
 8008238:	f015 0506 	ands.w	r5, r5, #6
 800823c:	d106      	bne.n	800824c <_printf_common+0x48>
 800823e:	f104 0a19 	add.w	sl, r4, #25
 8008242:	68e3      	ldr	r3, [r4, #12]
 8008244:	6832      	ldr	r2, [r6, #0]
 8008246:	1a9b      	subs	r3, r3, r2
 8008248:	42ab      	cmp	r3, r5
 800824a:	dc26      	bgt.n	800829a <_printf_common+0x96>
 800824c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008250:	1e13      	subs	r3, r2, #0
 8008252:	6822      	ldr	r2, [r4, #0]
 8008254:	bf18      	it	ne
 8008256:	2301      	movne	r3, #1
 8008258:	0692      	lsls	r2, r2, #26
 800825a:	d42b      	bmi.n	80082b4 <_printf_common+0xb0>
 800825c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008260:	4649      	mov	r1, r9
 8008262:	4638      	mov	r0, r7
 8008264:	47c0      	blx	r8
 8008266:	3001      	adds	r0, #1
 8008268:	d01e      	beq.n	80082a8 <_printf_common+0xa4>
 800826a:	6823      	ldr	r3, [r4, #0]
 800826c:	68e5      	ldr	r5, [r4, #12]
 800826e:	6832      	ldr	r2, [r6, #0]
 8008270:	f003 0306 	and.w	r3, r3, #6
 8008274:	2b04      	cmp	r3, #4
 8008276:	bf08      	it	eq
 8008278:	1aad      	subeq	r5, r5, r2
 800827a:	68a3      	ldr	r3, [r4, #8]
 800827c:	6922      	ldr	r2, [r4, #16]
 800827e:	bf0c      	ite	eq
 8008280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008284:	2500      	movne	r5, #0
 8008286:	4293      	cmp	r3, r2
 8008288:	bfc4      	itt	gt
 800828a:	1a9b      	subgt	r3, r3, r2
 800828c:	18ed      	addgt	r5, r5, r3
 800828e:	2600      	movs	r6, #0
 8008290:	341a      	adds	r4, #26
 8008292:	42b5      	cmp	r5, r6
 8008294:	d11a      	bne.n	80082cc <_printf_common+0xc8>
 8008296:	2000      	movs	r0, #0
 8008298:	e008      	b.n	80082ac <_printf_common+0xa8>
 800829a:	2301      	movs	r3, #1
 800829c:	4652      	mov	r2, sl
 800829e:	4649      	mov	r1, r9
 80082a0:	4638      	mov	r0, r7
 80082a2:	47c0      	blx	r8
 80082a4:	3001      	adds	r0, #1
 80082a6:	d103      	bne.n	80082b0 <_printf_common+0xac>
 80082a8:	f04f 30ff 	mov.w	r0, #4294967295
 80082ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082b0:	3501      	adds	r5, #1
 80082b2:	e7c6      	b.n	8008242 <_printf_common+0x3e>
 80082b4:	18e1      	adds	r1, r4, r3
 80082b6:	1c5a      	adds	r2, r3, #1
 80082b8:	2030      	movs	r0, #48	; 0x30
 80082ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082be:	4422      	add	r2, r4
 80082c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082c8:	3302      	adds	r3, #2
 80082ca:	e7c7      	b.n	800825c <_printf_common+0x58>
 80082cc:	2301      	movs	r3, #1
 80082ce:	4622      	mov	r2, r4
 80082d0:	4649      	mov	r1, r9
 80082d2:	4638      	mov	r0, r7
 80082d4:	47c0      	blx	r8
 80082d6:	3001      	adds	r0, #1
 80082d8:	d0e6      	beq.n	80082a8 <_printf_common+0xa4>
 80082da:	3601      	adds	r6, #1
 80082dc:	e7d9      	b.n	8008292 <_printf_common+0x8e>
	...

080082e0 <_printf_i>:
 80082e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082e4:	7e0f      	ldrb	r7, [r1, #24]
 80082e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80082e8:	2f78      	cmp	r7, #120	; 0x78
 80082ea:	4691      	mov	r9, r2
 80082ec:	4680      	mov	r8, r0
 80082ee:	460c      	mov	r4, r1
 80082f0:	469a      	mov	sl, r3
 80082f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80082f6:	d807      	bhi.n	8008308 <_printf_i+0x28>
 80082f8:	2f62      	cmp	r7, #98	; 0x62
 80082fa:	d80a      	bhi.n	8008312 <_printf_i+0x32>
 80082fc:	2f00      	cmp	r7, #0
 80082fe:	f000 80d8 	beq.w	80084b2 <_printf_i+0x1d2>
 8008302:	2f58      	cmp	r7, #88	; 0x58
 8008304:	f000 80a3 	beq.w	800844e <_printf_i+0x16e>
 8008308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800830c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008310:	e03a      	b.n	8008388 <_printf_i+0xa8>
 8008312:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008316:	2b15      	cmp	r3, #21
 8008318:	d8f6      	bhi.n	8008308 <_printf_i+0x28>
 800831a:	a101      	add	r1, pc, #4	; (adr r1, 8008320 <_printf_i+0x40>)
 800831c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008320:	08008379 	.word	0x08008379
 8008324:	0800838d 	.word	0x0800838d
 8008328:	08008309 	.word	0x08008309
 800832c:	08008309 	.word	0x08008309
 8008330:	08008309 	.word	0x08008309
 8008334:	08008309 	.word	0x08008309
 8008338:	0800838d 	.word	0x0800838d
 800833c:	08008309 	.word	0x08008309
 8008340:	08008309 	.word	0x08008309
 8008344:	08008309 	.word	0x08008309
 8008348:	08008309 	.word	0x08008309
 800834c:	08008499 	.word	0x08008499
 8008350:	080083bd 	.word	0x080083bd
 8008354:	0800847b 	.word	0x0800847b
 8008358:	08008309 	.word	0x08008309
 800835c:	08008309 	.word	0x08008309
 8008360:	080084bb 	.word	0x080084bb
 8008364:	08008309 	.word	0x08008309
 8008368:	080083bd 	.word	0x080083bd
 800836c:	08008309 	.word	0x08008309
 8008370:	08008309 	.word	0x08008309
 8008374:	08008483 	.word	0x08008483
 8008378:	682b      	ldr	r3, [r5, #0]
 800837a:	1d1a      	adds	r2, r3, #4
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	602a      	str	r2, [r5, #0]
 8008380:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008384:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008388:	2301      	movs	r3, #1
 800838a:	e0a3      	b.n	80084d4 <_printf_i+0x1f4>
 800838c:	6820      	ldr	r0, [r4, #0]
 800838e:	6829      	ldr	r1, [r5, #0]
 8008390:	0606      	lsls	r6, r0, #24
 8008392:	f101 0304 	add.w	r3, r1, #4
 8008396:	d50a      	bpl.n	80083ae <_printf_i+0xce>
 8008398:	680e      	ldr	r6, [r1, #0]
 800839a:	602b      	str	r3, [r5, #0]
 800839c:	2e00      	cmp	r6, #0
 800839e:	da03      	bge.n	80083a8 <_printf_i+0xc8>
 80083a0:	232d      	movs	r3, #45	; 0x2d
 80083a2:	4276      	negs	r6, r6
 80083a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083a8:	485e      	ldr	r0, [pc, #376]	; (8008524 <_printf_i+0x244>)
 80083aa:	230a      	movs	r3, #10
 80083ac:	e019      	b.n	80083e2 <_printf_i+0x102>
 80083ae:	680e      	ldr	r6, [r1, #0]
 80083b0:	602b      	str	r3, [r5, #0]
 80083b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80083b6:	bf18      	it	ne
 80083b8:	b236      	sxthne	r6, r6
 80083ba:	e7ef      	b.n	800839c <_printf_i+0xbc>
 80083bc:	682b      	ldr	r3, [r5, #0]
 80083be:	6820      	ldr	r0, [r4, #0]
 80083c0:	1d19      	adds	r1, r3, #4
 80083c2:	6029      	str	r1, [r5, #0]
 80083c4:	0601      	lsls	r1, r0, #24
 80083c6:	d501      	bpl.n	80083cc <_printf_i+0xec>
 80083c8:	681e      	ldr	r6, [r3, #0]
 80083ca:	e002      	b.n	80083d2 <_printf_i+0xf2>
 80083cc:	0646      	lsls	r6, r0, #25
 80083ce:	d5fb      	bpl.n	80083c8 <_printf_i+0xe8>
 80083d0:	881e      	ldrh	r6, [r3, #0]
 80083d2:	4854      	ldr	r0, [pc, #336]	; (8008524 <_printf_i+0x244>)
 80083d4:	2f6f      	cmp	r7, #111	; 0x6f
 80083d6:	bf0c      	ite	eq
 80083d8:	2308      	moveq	r3, #8
 80083da:	230a      	movne	r3, #10
 80083dc:	2100      	movs	r1, #0
 80083de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083e2:	6865      	ldr	r5, [r4, #4]
 80083e4:	60a5      	str	r5, [r4, #8]
 80083e6:	2d00      	cmp	r5, #0
 80083e8:	bfa2      	ittt	ge
 80083ea:	6821      	ldrge	r1, [r4, #0]
 80083ec:	f021 0104 	bicge.w	r1, r1, #4
 80083f0:	6021      	strge	r1, [r4, #0]
 80083f2:	b90e      	cbnz	r6, 80083f8 <_printf_i+0x118>
 80083f4:	2d00      	cmp	r5, #0
 80083f6:	d04d      	beq.n	8008494 <_printf_i+0x1b4>
 80083f8:	4615      	mov	r5, r2
 80083fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80083fe:	fb03 6711 	mls	r7, r3, r1, r6
 8008402:	5dc7      	ldrb	r7, [r0, r7]
 8008404:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008408:	4637      	mov	r7, r6
 800840a:	42bb      	cmp	r3, r7
 800840c:	460e      	mov	r6, r1
 800840e:	d9f4      	bls.n	80083fa <_printf_i+0x11a>
 8008410:	2b08      	cmp	r3, #8
 8008412:	d10b      	bne.n	800842c <_printf_i+0x14c>
 8008414:	6823      	ldr	r3, [r4, #0]
 8008416:	07de      	lsls	r6, r3, #31
 8008418:	d508      	bpl.n	800842c <_printf_i+0x14c>
 800841a:	6923      	ldr	r3, [r4, #16]
 800841c:	6861      	ldr	r1, [r4, #4]
 800841e:	4299      	cmp	r1, r3
 8008420:	bfde      	ittt	le
 8008422:	2330      	movle	r3, #48	; 0x30
 8008424:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008428:	f105 35ff 	addle.w	r5, r5, #4294967295
 800842c:	1b52      	subs	r2, r2, r5
 800842e:	6122      	str	r2, [r4, #16]
 8008430:	f8cd a000 	str.w	sl, [sp]
 8008434:	464b      	mov	r3, r9
 8008436:	aa03      	add	r2, sp, #12
 8008438:	4621      	mov	r1, r4
 800843a:	4640      	mov	r0, r8
 800843c:	f7ff fee2 	bl	8008204 <_printf_common>
 8008440:	3001      	adds	r0, #1
 8008442:	d14c      	bne.n	80084de <_printf_i+0x1fe>
 8008444:	f04f 30ff 	mov.w	r0, #4294967295
 8008448:	b004      	add	sp, #16
 800844a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800844e:	4835      	ldr	r0, [pc, #212]	; (8008524 <_printf_i+0x244>)
 8008450:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008454:	6829      	ldr	r1, [r5, #0]
 8008456:	6823      	ldr	r3, [r4, #0]
 8008458:	f851 6b04 	ldr.w	r6, [r1], #4
 800845c:	6029      	str	r1, [r5, #0]
 800845e:	061d      	lsls	r5, r3, #24
 8008460:	d514      	bpl.n	800848c <_printf_i+0x1ac>
 8008462:	07df      	lsls	r7, r3, #31
 8008464:	bf44      	itt	mi
 8008466:	f043 0320 	orrmi.w	r3, r3, #32
 800846a:	6023      	strmi	r3, [r4, #0]
 800846c:	b91e      	cbnz	r6, 8008476 <_printf_i+0x196>
 800846e:	6823      	ldr	r3, [r4, #0]
 8008470:	f023 0320 	bic.w	r3, r3, #32
 8008474:	6023      	str	r3, [r4, #0]
 8008476:	2310      	movs	r3, #16
 8008478:	e7b0      	b.n	80083dc <_printf_i+0xfc>
 800847a:	6823      	ldr	r3, [r4, #0]
 800847c:	f043 0320 	orr.w	r3, r3, #32
 8008480:	6023      	str	r3, [r4, #0]
 8008482:	2378      	movs	r3, #120	; 0x78
 8008484:	4828      	ldr	r0, [pc, #160]	; (8008528 <_printf_i+0x248>)
 8008486:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800848a:	e7e3      	b.n	8008454 <_printf_i+0x174>
 800848c:	0659      	lsls	r1, r3, #25
 800848e:	bf48      	it	mi
 8008490:	b2b6      	uxthmi	r6, r6
 8008492:	e7e6      	b.n	8008462 <_printf_i+0x182>
 8008494:	4615      	mov	r5, r2
 8008496:	e7bb      	b.n	8008410 <_printf_i+0x130>
 8008498:	682b      	ldr	r3, [r5, #0]
 800849a:	6826      	ldr	r6, [r4, #0]
 800849c:	6961      	ldr	r1, [r4, #20]
 800849e:	1d18      	adds	r0, r3, #4
 80084a0:	6028      	str	r0, [r5, #0]
 80084a2:	0635      	lsls	r5, r6, #24
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	d501      	bpl.n	80084ac <_printf_i+0x1cc>
 80084a8:	6019      	str	r1, [r3, #0]
 80084aa:	e002      	b.n	80084b2 <_printf_i+0x1d2>
 80084ac:	0670      	lsls	r0, r6, #25
 80084ae:	d5fb      	bpl.n	80084a8 <_printf_i+0x1c8>
 80084b0:	8019      	strh	r1, [r3, #0]
 80084b2:	2300      	movs	r3, #0
 80084b4:	6123      	str	r3, [r4, #16]
 80084b6:	4615      	mov	r5, r2
 80084b8:	e7ba      	b.n	8008430 <_printf_i+0x150>
 80084ba:	682b      	ldr	r3, [r5, #0]
 80084bc:	1d1a      	adds	r2, r3, #4
 80084be:	602a      	str	r2, [r5, #0]
 80084c0:	681d      	ldr	r5, [r3, #0]
 80084c2:	6862      	ldr	r2, [r4, #4]
 80084c4:	2100      	movs	r1, #0
 80084c6:	4628      	mov	r0, r5
 80084c8:	f7f7 fe92 	bl	80001f0 <memchr>
 80084cc:	b108      	cbz	r0, 80084d2 <_printf_i+0x1f2>
 80084ce:	1b40      	subs	r0, r0, r5
 80084d0:	6060      	str	r0, [r4, #4]
 80084d2:	6863      	ldr	r3, [r4, #4]
 80084d4:	6123      	str	r3, [r4, #16]
 80084d6:	2300      	movs	r3, #0
 80084d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084dc:	e7a8      	b.n	8008430 <_printf_i+0x150>
 80084de:	6923      	ldr	r3, [r4, #16]
 80084e0:	462a      	mov	r2, r5
 80084e2:	4649      	mov	r1, r9
 80084e4:	4640      	mov	r0, r8
 80084e6:	47d0      	blx	sl
 80084e8:	3001      	adds	r0, #1
 80084ea:	d0ab      	beq.n	8008444 <_printf_i+0x164>
 80084ec:	6823      	ldr	r3, [r4, #0]
 80084ee:	079b      	lsls	r3, r3, #30
 80084f0:	d413      	bmi.n	800851a <_printf_i+0x23a>
 80084f2:	68e0      	ldr	r0, [r4, #12]
 80084f4:	9b03      	ldr	r3, [sp, #12]
 80084f6:	4298      	cmp	r0, r3
 80084f8:	bfb8      	it	lt
 80084fa:	4618      	movlt	r0, r3
 80084fc:	e7a4      	b.n	8008448 <_printf_i+0x168>
 80084fe:	2301      	movs	r3, #1
 8008500:	4632      	mov	r2, r6
 8008502:	4649      	mov	r1, r9
 8008504:	4640      	mov	r0, r8
 8008506:	47d0      	blx	sl
 8008508:	3001      	adds	r0, #1
 800850a:	d09b      	beq.n	8008444 <_printf_i+0x164>
 800850c:	3501      	adds	r5, #1
 800850e:	68e3      	ldr	r3, [r4, #12]
 8008510:	9903      	ldr	r1, [sp, #12]
 8008512:	1a5b      	subs	r3, r3, r1
 8008514:	42ab      	cmp	r3, r5
 8008516:	dcf2      	bgt.n	80084fe <_printf_i+0x21e>
 8008518:	e7eb      	b.n	80084f2 <_printf_i+0x212>
 800851a:	2500      	movs	r5, #0
 800851c:	f104 0619 	add.w	r6, r4, #25
 8008520:	e7f5      	b.n	800850e <_printf_i+0x22e>
 8008522:	bf00      	nop
 8008524:	08008a71 	.word	0x08008a71
 8008528:	08008a82 	.word	0x08008a82

0800852c <_sbrk_r>:
 800852c:	b538      	push	{r3, r4, r5, lr}
 800852e:	4d06      	ldr	r5, [pc, #24]	; (8008548 <_sbrk_r+0x1c>)
 8008530:	2300      	movs	r3, #0
 8008532:	4604      	mov	r4, r0
 8008534:	4608      	mov	r0, r1
 8008536:	602b      	str	r3, [r5, #0]
 8008538:	f7f9 fa74 	bl	8001a24 <_sbrk>
 800853c:	1c43      	adds	r3, r0, #1
 800853e:	d102      	bne.n	8008546 <_sbrk_r+0x1a>
 8008540:	682b      	ldr	r3, [r5, #0]
 8008542:	b103      	cbz	r3, 8008546 <_sbrk_r+0x1a>
 8008544:	6023      	str	r3, [r4, #0]
 8008546:	bd38      	pop	{r3, r4, r5, pc}
 8008548:	20000528 	.word	0x20000528

0800854c <__sread>:
 800854c:	b510      	push	{r4, lr}
 800854e:	460c      	mov	r4, r1
 8008550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008554:	f000 f8a8 	bl	80086a8 <_read_r>
 8008558:	2800      	cmp	r0, #0
 800855a:	bfab      	itete	ge
 800855c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800855e:	89a3      	ldrhlt	r3, [r4, #12]
 8008560:	181b      	addge	r3, r3, r0
 8008562:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008566:	bfac      	ite	ge
 8008568:	6563      	strge	r3, [r4, #84]	; 0x54
 800856a:	81a3      	strhlt	r3, [r4, #12]
 800856c:	bd10      	pop	{r4, pc}

0800856e <__swrite>:
 800856e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008572:	461f      	mov	r7, r3
 8008574:	898b      	ldrh	r3, [r1, #12]
 8008576:	05db      	lsls	r3, r3, #23
 8008578:	4605      	mov	r5, r0
 800857a:	460c      	mov	r4, r1
 800857c:	4616      	mov	r6, r2
 800857e:	d505      	bpl.n	800858c <__swrite+0x1e>
 8008580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008584:	2302      	movs	r3, #2
 8008586:	2200      	movs	r2, #0
 8008588:	f000 f870 	bl	800866c <_lseek_r>
 800858c:	89a3      	ldrh	r3, [r4, #12]
 800858e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008592:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008596:	81a3      	strh	r3, [r4, #12]
 8008598:	4632      	mov	r2, r6
 800859a:	463b      	mov	r3, r7
 800859c:	4628      	mov	r0, r5
 800859e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085a2:	f000 b817 	b.w	80085d4 <_write_r>

080085a6 <__sseek>:
 80085a6:	b510      	push	{r4, lr}
 80085a8:	460c      	mov	r4, r1
 80085aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ae:	f000 f85d 	bl	800866c <_lseek_r>
 80085b2:	1c43      	adds	r3, r0, #1
 80085b4:	89a3      	ldrh	r3, [r4, #12]
 80085b6:	bf15      	itete	ne
 80085b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80085ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80085be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80085c2:	81a3      	strheq	r3, [r4, #12]
 80085c4:	bf18      	it	ne
 80085c6:	81a3      	strhne	r3, [r4, #12]
 80085c8:	bd10      	pop	{r4, pc}

080085ca <__sclose>:
 80085ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ce:	f000 b81b 	b.w	8008608 <_close_r>
	...

080085d4 <_write_r>:
 80085d4:	b538      	push	{r3, r4, r5, lr}
 80085d6:	4d07      	ldr	r5, [pc, #28]	; (80085f4 <_write_r+0x20>)
 80085d8:	4604      	mov	r4, r0
 80085da:	4608      	mov	r0, r1
 80085dc:	4611      	mov	r1, r2
 80085de:	2200      	movs	r2, #0
 80085e0:	602a      	str	r2, [r5, #0]
 80085e2:	461a      	mov	r2, r3
 80085e4:	f7f8 fbe0 	bl	8000da8 <_write>
 80085e8:	1c43      	adds	r3, r0, #1
 80085ea:	d102      	bne.n	80085f2 <_write_r+0x1e>
 80085ec:	682b      	ldr	r3, [r5, #0]
 80085ee:	b103      	cbz	r3, 80085f2 <_write_r+0x1e>
 80085f0:	6023      	str	r3, [r4, #0]
 80085f2:	bd38      	pop	{r3, r4, r5, pc}
 80085f4:	20000528 	.word	0x20000528

080085f8 <abort>:
 80085f8:	b508      	push	{r3, lr}
 80085fa:	2006      	movs	r0, #6
 80085fc:	f000 f88e 	bl	800871c <raise>
 8008600:	2001      	movs	r0, #1
 8008602:	f7f9 f9b3 	bl	800196c <_exit>
	...

08008608 <_close_r>:
 8008608:	b538      	push	{r3, r4, r5, lr}
 800860a:	4d06      	ldr	r5, [pc, #24]	; (8008624 <_close_r+0x1c>)
 800860c:	2300      	movs	r3, #0
 800860e:	4604      	mov	r4, r0
 8008610:	4608      	mov	r0, r1
 8008612:	602b      	str	r3, [r5, #0]
 8008614:	f7f9 f9d1 	bl	80019ba <_close>
 8008618:	1c43      	adds	r3, r0, #1
 800861a:	d102      	bne.n	8008622 <_close_r+0x1a>
 800861c:	682b      	ldr	r3, [r5, #0]
 800861e:	b103      	cbz	r3, 8008622 <_close_r+0x1a>
 8008620:	6023      	str	r3, [r4, #0]
 8008622:	bd38      	pop	{r3, r4, r5, pc}
 8008624:	20000528 	.word	0x20000528

08008628 <_fstat_r>:
 8008628:	b538      	push	{r3, r4, r5, lr}
 800862a:	4d07      	ldr	r5, [pc, #28]	; (8008648 <_fstat_r+0x20>)
 800862c:	2300      	movs	r3, #0
 800862e:	4604      	mov	r4, r0
 8008630:	4608      	mov	r0, r1
 8008632:	4611      	mov	r1, r2
 8008634:	602b      	str	r3, [r5, #0]
 8008636:	f7f9 f9cc 	bl	80019d2 <_fstat>
 800863a:	1c43      	adds	r3, r0, #1
 800863c:	d102      	bne.n	8008644 <_fstat_r+0x1c>
 800863e:	682b      	ldr	r3, [r5, #0]
 8008640:	b103      	cbz	r3, 8008644 <_fstat_r+0x1c>
 8008642:	6023      	str	r3, [r4, #0]
 8008644:	bd38      	pop	{r3, r4, r5, pc}
 8008646:	bf00      	nop
 8008648:	20000528 	.word	0x20000528

0800864c <_isatty_r>:
 800864c:	b538      	push	{r3, r4, r5, lr}
 800864e:	4d06      	ldr	r5, [pc, #24]	; (8008668 <_isatty_r+0x1c>)
 8008650:	2300      	movs	r3, #0
 8008652:	4604      	mov	r4, r0
 8008654:	4608      	mov	r0, r1
 8008656:	602b      	str	r3, [r5, #0]
 8008658:	f7f9 f9cb 	bl	80019f2 <_isatty>
 800865c:	1c43      	adds	r3, r0, #1
 800865e:	d102      	bne.n	8008666 <_isatty_r+0x1a>
 8008660:	682b      	ldr	r3, [r5, #0]
 8008662:	b103      	cbz	r3, 8008666 <_isatty_r+0x1a>
 8008664:	6023      	str	r3, [r4, #0]
 8008666:	bd38      	pop	{r3, r4, r5, pc}
 8008668:	20000528 	.word	0x20000528

0800866c <_lseek_r>:
 800866c:	b538      	push	{r3, r4, r5, lr}
 800866e:	4d07      	ldr	r5, [pc, #28]	; (800868c <_lseek_r+0x20>)
 8008670:	4604      	mov	r4, r0
 8008672:	4608      	mov	r0, r1
 8008674:	4611      	mov	r1, r2
 8008676:	2200      	movs	r2, #0
 8008678:	602a      	str	r2, [r5, #0]
 800867a:	461a      	mov	r2, r3
 800867c:	f7f9 f9c4 	bl	8001a08 <_lseek>
 8008680:	1c43      	adds	r3, r0, #1
 8008682:	d102      	bne.n	800868a <_lseek_r+0x1e>
 8008684:	682b      	ldr	r3, [r5, #0]
 8008686:	b103      	cbz	r3, 800868a <_lseek_r+0x1e>
 8008688:	6023      	str	r3, [r4, #0]
 800868a:	bd38      	pop	{r3, r4, r5, pc}
 800868c:	20000528 	.word	0x20000528

08008690 <__malloc_lock>:
 8008690:	4801      	ldr	r0, [pc, #4]	; (8008698 <__malloc_lock+0x8>)
 8008692:	f7ff bb0d 	b.w	8007cb0 <__retarget_lock_acquire_recursive>
 8008696:	bf00      	nop
 8008698:	2000051c 	.word	0x2000051c

0800869c <__malloc_unlock>:
 800869c:	4801      	ldr	r0, [pc, #4]	; (80086a4 <__malloc_unlock+0x8>)
 800869e:	f7ff bb08 	b.w	8007cb2 <__retarget_lock_release_recursive>
 80086a2:	bf00      	nop
 80086a4:	2000051c 	.word	0x2000051c

080086a8 <_read_r>:
 80086a8:	b538      	push	{r3, r4, r5, lr}
 80086aa:	4d07      	ldr	r5, [pc, #28]	; (80086c8 <_read_r+0x20>)
 80086ac:	4604      	mov	r4, r0
 80086ae:	4608      	mov	r0, r1
 80086b0:	4611      	mov	r1, r2
 80086b2:	2200      	movs	r2, #0
 80086b4:	602a      	str	r2, [r5, #0]
 80086b6:	461a      	mov	r2, r3
 80086b8:	f7f9 f962 	bl	8001980 <_read>
 80086bc:	1c43      	adds	r3, r0, #1
 80086be:	d102      	bne.n	80086c6 <_read_r+0x1e>
 80086c0:	682b      	ldr	r3, [r5, #0]
 80086c2:	b103      	cbz	r3, 80086c6 <_read_r+0x1e>
 80086c4:	6023      	str	r3, [r4, #0]
 80086c6:	bd38      	pop	{r3, r4, r5, pc}
 80086c8:	20000528 	.word	0x20000528

080086cc <_raise_r>:
 80086cc:	291f      	cmp	r1, #31
 80086ce:	b538      	push	{r3, r4, r5, lr}
 80086d0:	4604      	mov	r4, r0
 80086d2:	460d      	mov	r5, r1
 80086d4:	d904      	bls.n	80086e0 <_raise_r+0x14>
 80086d6:	2316      	movs	r3, #22
 80086d8:	6003      	str	r3, [r0, #0]
 80086da:	f04f 30ff 	mov.w	r0, #4294967295
 80086de:	bd38      	pop	{r3, r4, r5, pc}
 80086e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80086e2:	b112      	cbz	r2, 80086ea <_raise_r+0x1e>
 80086e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80086e8:	b94b      	cbnz	r3, 80086fe <_raise_r+0x32>
 80086ea:	4620      	mov	r0, r4
 80086ec:	f000 f830 	bl	8008750 <_getpid_r>
 80086f0:	462a      	mov	r2, r5
 80086f2:	4601      	mov	r1, r0
 80086f4:	4620      	mov	r0, r4
 80086f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086fa:	f000 b817 	b.w	800872c <_kill_r>
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d00a      	beq.n	8008718 <_raise_r+0x4c>
 8008702:	1c59      	adds	r1, r3, #1
 8008704:	d103      	bne.n	800870e <_raise_r+0x42>
 8008706:	2316      	movs	r3, #22
 8008708:	6003      	str	r3, [r0, #0]
 800870a:	2001      	movs	r0, #1
 800870c:	e7e7      	b.n	80086de <_raise_r+0x12>
 800870e:	2400      	movs	r4, #0
 8008710:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008714:	4628      	mov	r0, r5
 8008716:	4798      	blx	r3
 8008718:	2000      	movs	r0, #0
 800871a:	e7e0      	b.n	80086de <_raise_r+0x12>

0800871c <raise>:
 800871c:	4b02      	ldr	r3, [pc, #8]	; (8008728 <raise+0xc>)
 800871e:	4601      	mov	r1, r0
 8008720:	6818      	ldr	r0, [r3, #0]
 8008722:	f7ff bfd3 	b.w	80086cc <_raise_r>
 8008726:	bf00      	nop
 8008728:	20000194 	.word	0x20000194

0800872c <_kill_r>:
 800872c:	b538      	push	{r3, r4, r5, lr}
 800872e:	4d07      	ldr	r5, [pc, #28]	; (800874c <_kill_r+0x20>)
 8008730:	2300      	movs	r3, #0
 8008732:	4604      	mov	r4, r0
 8008734:	4608      	mov	r0, r1
 8008736:	4611      	mov	r1, r2
 8008738:	602b      	str	r3, [r5, #0]
 800873a:	f7f9 f907 	bl	800194c <_kill>
 800873e:	1c43      	adds	r3, r0, #1
 8008740:	d102      	bne.n	8008748 <_kill_r+0x1c>
 8008742:	682b      	ldr	r3, [r5, #0]
 8008744:	b103      	cbz	r3, 8008748 <_kill_r+0x1c>
 8008746:	6023      	str	r3, [r4, #0]
 8008748:	bd38      	pop	{r3, r4, r5, pc}
 800874a:	bf00      	nop
 800874c:	20000528 	.word	0x20000528

08008750 <_getpid_r>:
 8008750:	f7f9 b8f4 	b.w	800193c <_getpid>

08008754 <_init>:
 8008754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008756:	bf00      	nop
 8008758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800875a:	bc08      	pop	{r3}
 800875c:	469e      	mov	lr, r3
 800875e:	4770      	bx	lr

08008760 <_fini>:
 8008760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008762:	bf00      	nop
 8008764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008766:	bc08      	pop	{r3}
 8008768:	469e      	mov	lr, r3
 800876a:	4770      	bx	lr
